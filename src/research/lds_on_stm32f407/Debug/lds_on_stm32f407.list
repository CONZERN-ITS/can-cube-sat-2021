
lds_on_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08006e30  08006e30  00016e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800726c  0800726c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007274  08007274  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800727c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000200  0800747c  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  0800747c  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e1e  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016a3  00000000  00000000  0002804e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  000296f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  00029f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002064e  00000000  00000000  0002a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000072a3  00000000  00000000  0004acce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d15b8  00000000  00000000  00051f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000001e  00000000  00000000  00123529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c4  00000000  00000000  00123548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 b80c 	b.w	8000c38 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f005 ff9e 	bl	8006b68 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_idiv0>:
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__do_global_dtors_aux>:
 8000c3c:	b510      	push	{r4, lr}
 8000c3e:	4c05      	ldr	r4, [pc, #20]	; (8000c54 <__do_global_dtors_aux+0x18>)
 8000c40:	7823      	ldrb	r3, [r4, #0]
 8000c42:	b933      	cbnz	r3, 8000c52 <__do_global_dtors_aux+0x16>
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__do_global_dtors_aux+0x1c>)
 8000c46:	b113      	cbz	r3, 8000c4e <__do_global_dtors_aux+0x12>
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <__do_global_dtors_aux+0x20>)
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	2301      	movs	r3, #1
 8000c50:	7023      	strb	r3, [r4, #0]
 8000c52:	bd10      	pop	{r4, pc}
 8000c54:	20000200 	.word	0x20000200
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	08006e14 	.word	0x08006e14

08000c60 <frame_dummy>:
 8000c60:	b508      	push	{r3, lr}
 8000c62:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <frame_dummy+0x10>)
 8000c64:	b11b      	cbz	r3, 8000c6e <frame_dummy+0xe>
 8000c66:	4903      	ldr	r1, [pc, #12]	; (8000c74 <frame_dummy+0x14>)
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <frame_dummy+0x18>)
 8000c6a:	f3af 8000 	nop.w
 8000c6e:	bd08      	pop	{r3, pc}
 8000c70:	00000000 	.word	0x00000000
 8000c74:	20000204 	.word	0x20000204
 8000c78:	08006e14 	.word	0x08006e14

08000c7c <_read>:

#define ADC_TIMEOUT 100
#define STDIO_UART_TIMEOUT 100

int _read(int file, char *ptr, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
    if (HAL_UART_Receive(&huart1, (uint8_t *)ptr, len, STDIO_UART_TIMEOUT) == HAL_OK) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	2364      	movs	r3, #100	; 0x64
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <_read+0x30>)
 8000c92:	f002 f936 	bl	8002f02 <HAL_UART_Receive>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <_read+0x24>
        return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	e000      	b.n	8000ca2 <_read+0x26>
    } else {
        return 0;
 8000ca0:	2300      	movs	r3, #0
    }
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000264 	.word	0x20000264

08000cb0 <_write>:

int _write(int file, char *ptr, int len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
    if (HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, STDIO_UART_TIMEOUT) == HAL_OK) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	2364      	movs	r3, #100	; 0x64
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <_write+0x30>)
 8000cc6:	f002 f88a 	bl	8002dde <HAL_UART_Transmit>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <_write+0x24>
        return len;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	e000      	b.n	8000cd6 <_write+0x26>
    } else {
        return 0;
 8000cd4:	2300      	movs	r3, #0
    }
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000264 	.word	0x20000264

08000ce4 <lds_find>:
        {-1.00000, 0.75249, 0.75249 },
        {0.00000, -1.46190, 1.46190 }
};


void lds_find(float x[3], float b[LDS_COUNT]) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e033      	b.n	8000d5c <lds_find+0x78>
        x[i] = 0;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < LDS_COUNT; j++) {
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	e023      	b.n	8000d50 <lds_find+0x6c>
            x[i] += Arr[i][j] * b[j];
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	ed93 7a00 	vldr	s14, [r3]
 8000d14:	4916      	ldr	r1, [pc, #88]	; (8000d70 <lds_find+0x8c>)
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	4413      	add	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	440b      	add	r3, r1
 8000d26:	edd3 6a00 	vldr	s13, [r3]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	4413      	add	r3, r2
 8000d32:	edd3 7a00 	vldr	s15, [r3]
 8000d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d46:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < LDS_COUNT; j++) {
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	ddd8      	ble.n	8000d08 <lds_find+0x24>
    for (int i = 0; i < 3; i++) {
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	ddc8      	ble.n	8000cf4 <lds_find+0x10>
        }
    }
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20000000 	.word	0x20000000

08000d74 <dekart_to_euler>:

void dekart_to_euler(float x[3], float sph[3]) {
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
    sph[0] = sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	ed93 7a00 	vldr	s14, [r3]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	edd3 7a00 	vldr	s15, [r3]
 8000d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3304      	adds	r3, #4
 8000d92:	edd3 6a00 	vldr	s13, [r3]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	edd3 7a00 	vldr	s15, [r3]
 8000d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3308      	adds	r3, #8
 8000daa:	edd3 6a00 	vldr	s13, [r3]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3308      	adds	r3, #8
 8000db2:	edd3 7a00 	vldr	s15, [r3]
 8000db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dbe:	ee17 0a90 	vmov	r0, s15
 8000dc2:	f7ff fba1 	bl	8000508 <__aeabi_f2d>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	ec43 2b10 	vmov	d0, r2, r3
 8000dce:	f005 fb55 	bl	800647c <sqrt>
 8000dd2:	ec53 2b10 	vmov	r2, r3, d0
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f7ff fec5 	bl	8000b68 <__aeabi_d2f>
 8000dde:	4602      	mov	r2, r0
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	601a      	str	r2, [r3, #0]
    sph[1] = acos(x[2] / sph[0]);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3308      	adds	r3, #8
 8000de8:	ed93 7a00 	vldr	s14, [r3]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	edd3 7a00 	vldr	s15, [r3]
 8000df2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000df6:	ee16 0a90 	vmov	r0, s13
 8000dfa:	f7ff fb85 	bl	8000508 <__aeabi_f2d>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	ec43 2b10 	vmov	d0, r2, r3
 8000e06:	f005 fb05 	bl	8006414 <acos>
 8000e0a:	ec51 0b10 	vmov	r0, r1, d0
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	1d1c      	adds	r4, r3, #4
 8000e12:	f7ff fea9 	bl	8000b68 <__aeabi_d2f>
 8000e16:	4603      	mov	r3, r0
 8000e18:	6023      	str	r3, [r4, #0]
    sph[2] = atan(x[1] / x[0]);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	ed93 7a00 	vldr	s14, [r3]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e2c:	ee16 0a90 	vmov	r0, s13
 8000e30:	f7ff fb6a 	bl	8000508 <__aeabi_f2d>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	ec43 2b10 	vmov	d0, r2, r3
 8000e3c:	f005 f948 	bl	80060d0 <atan>
 8000e40:	ec51 0b10 	vmov	r0, r1, d0
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f103 0408 	add.w	r4, r3, #8
 8000e4a:	f7ff fe8d 	bl	8000b68 <__aeabi_d2f>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6023      	str	r3, [r4, #0]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	0000      	movs	r0, r0
 8000e5c:	0000      	movs	r0, r0
	...

08000e60 <degrees>:

float degrees(float a) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	ed87 0a01 	vstr	s0, [r7, #4]
    return a * 180 / M_PI;
 8000e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e6e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000eb0 <degrees+0x50>
 8000e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e76:	ee17 0a90 	vmov	r0, s15
 8000e7a:	f7ff fb45 	bl	8000508 <__aeabi_f2d>
 8000e7e:	a30a      	add	r3, pc, #40	; (adr r3, 8000ea8 <degrees+0x48>)
 8000e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e84:	f7ff fcc2 	bl	800080c <__aeabi_ddiv>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f7ff fe6a 	bl	8000b68 <__aeabi_d2f>
 8000e94:	4603      	mov	r3, r0
 8000e96:	ee07 3a90 	vmov	s15, r3
}
 8000e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	54442d18 	.word	0x54442d18
 8000eac:	400921fb 	.word	0x400921fb
 8000eb0:	43340000 	.word	0x43340000
 8000eb4:	00000000 	.word	0x00000000

08000eb8 <tmain>:

int tmain() {
 8000eb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ebc:	b092      	sub	sp, #72	; 0x48
 8000ebe:	af04      	add	r7, sp, #16
    float x[3];
    float b[LDS_COUNT];
    int step = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    while (1) {
        for (int i = 0; i < LDS_COUNT; i++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ec8:	e033      	b.n	8000f32 <tmain+0x7a>
            hadc1.Instance->SQR3 = i;
 8000eca:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <tmain+0x150>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
            HAL_ADC_Start(&hadc1);
 8000ed2:	484d      	ldr	r0, [pc, #308]	; (8001008 <tmain+0x150>)
 8000ed4:	f000 fca0 	bl	8001818 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT);
 8000ed8:	2164      	movs	r1, #100	; 0x64
 8000eda:	484b      	ldr	r0, [pc, #300]	; (8001008 <tmain+0x150>)
 8000edc:	f000 fd6e 	bl	80019bc <HAL_ADC_PollForConversion>
            uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000ee0:	4849      	ldr	r0, [pc, #292]	; (8001008 <tmain+0x150>)
 8000ee2:	f000 fdf6 	bl	8001ad2 <HAL_ADC_GetValue>
 8000ee6:	62b8      	str	r0, [r7, #40]	; 0x28
            float v = ((float)value / (1 << 12)) * 3.3;
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800100c <tmain+0x154>
 8000ef6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000efa:	ee16 0a90 	vmov	r0, s13
 8000efe:	f7ff fb03 	bl	8000508 <__aeabi_f2d>
 8000f02:	a33f      	add	r3, pc, #252	; (adr r3, 8001000 <tmain+0x148>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff fb56 	bl	80005b8 <__aeabi_dmul>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fe28 	bl	8000b68 <__aeabi_d2f>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24

            b[i] = v;
 8000f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f24:	4413      	add	r3, r2
 8000f26:	3b2c      	subs	r3, #44	; 0x2c
 8000f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2a:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < LDS_COUNT; i++) {
 8000f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2e:	3301      	adds	r3, #1
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
 8000f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	ddc8      	ble.n	8000eca <tmain+0x12>
        }

        float sph[3];
        lds_find(x, b);
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fece 	bl	8000ce4 <lds_find>
        dekart_to_euler(x, sph);
 8000f48:	463a      	mov	r2, r7
 8000f4a:	f107 0318 	add.w	r3, r7, #24
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff0f 	bl	8000d74 <dekart_to_euler>

        for (int i = 0; i < LDS_COUNT; i++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f5a:	e012      	b.n	8000f82 <tmain+0xca>
            printf("a%d: %f0.3 ", i, b[i]);
 8000f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f64:	4413      	add	r3, r2
 8000f66:	3b2c      	subs	r3, #44	; 0x2c
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff facc 	bl	8000508 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f76:	4826      	ldr	r0, [pc, #152]	; (8001010 <tmain+0x158>)
 8000f78:	f003 f9fc 	bl	8004374 <iprintf>
        for (int i = 0; i < LDS_COUNT; i++) {
 8000f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7e:	3301      	adds	r3, #1
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	dde9      	ble.n	8000f5c <tmain+0xa4>
        }
        printf("\n");
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f003 fa0b 	bl	80043a4 <putchar>

        printf("%4d: mag: %4.4f theta: %.4f phi: %.4f\n", step, sph[0], degrees(sph[1]), degrees(sph[2]));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fab9 	bl	8000508 <__aeabi_f2d>
 8000f96:	4680      	mov	r8, r0
 8000f98:	4689      	mov	r9, r1
 8000f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	f7ff ff5d 	bl	8000e60 <degrees>
 8000fa6:	ee10 3a10 	vmov	r3, s0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff faac 	bl	8000508 <__aeabi_f2d>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbc:	f7ff ff50 	bl	8000e60 <degrees>
 8000fc0:	ee10 3a10 	vmov	r3, s0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fa9f 	bl	8000508 <__aeabi_f2d>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fd2:	e9cd 4500 	strd	r4, r5, [sp]
 8000fd6:	4642      	mov	r2, r8
 8000fd8:	464b      	mov	r3, r9
 8000fda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <tmain+0x15c>)
 8000fde:	f003 f9c9 	bl	8004374 <iprintf>
        HAL_Delay(1000);
 8000fe2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe6:	f000 fbaf 	bl	8001748 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fee:	480a      	ldr	r0, [pc, #40]	; (8001018 <tmain+0x160>)
 8000ff0:	f001 fa35 	bl	800245e <HAL_GPIO_TogglePin>
        step++;
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
    while (1) {
 8000ffa:	e763      	b.n	8000ec4 <tmain+0xc>
 8000ffc:	f3af 8000 	nop.w
 8001000:	66666666 	.word	0x66666666
 8001004:	400a6666 	.word	0x400a6666
 8001008:	2000021c 	.word	0x2000021c
 800100c:	45800000 	.word	0x45800000
 8001010:	08006e30 	.word	0x08006e30
 8001014:	08006e3c 	.word	0x08006e3c
 8001018:	40021400 	.word	0x40021400

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f000 fb20 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f80a 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f000 f8fe 	bl	8001228 <MX_GPIO_Init>
  MX_ADC1_Init();
 800102c:	f000 f864 	bl	80010f8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001030:	f000 f8d0 	bl	80011d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  tmain();
 8001034:	f7ff ff40 	bl	8000eb8 <tmain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001038:	e7fe      	b.n	8001038 <main+0x1c>
	...

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fb20 	bl	8003690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <SystemClock_Config+0xb4>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <SystemClock_Config+0xb4>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <SystemClock_Config+0xb4>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <SystemClock_Config+0xb8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <SystemClock_Config+0xb8>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <SystemClock_Config+0xb8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001098:	2302      	movs	r3, #2
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109c:	2301      	movs	r3, #1
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a0:	2310      	movs	r3, #16
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 f9f1 	bl	8002494 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010b8:	f000 f91e 	bl	80012f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	230f      	movs	r3, #15
 80010be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fc54 	bl	8002984 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010e2:	f000 f909 	bl	80012f8 <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3750      	adds	r7, #80	; 0x50
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800110a:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <MX_ADC1_Init+0xd0>)
 800110c:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <MX_ADC1_Init+0xd4>)
 800110e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <MX_ADC1_Init+0xd0>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <MX_ADC1_Init+0xd0>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800111c:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <MX_ADC1_Init+0xd0>)
 800111e:	2201      	movs	r2, #1
 8001120:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <MX_ADC1_Init+0xd0>)
 8001124:	2200      	movs	r2, #0
 8001126:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <MX_ADC1_Init+0xd0>)
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_ADC1_Init+0xd0>)
 8001132:	2200      	movs	r2, #0
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001136:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_ADC1_Init+0xd0>)
 8001138:	4a25      	ldr	r2, [pc, #148]	; (80011d0 <MX_ADC1_Init+0xd8>)
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_ADC1_Init+0xd0>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_ADC1_Init+0xd0>)
 8001144:	2203      	movs	r2, #3
 8001146:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_ADC1_Init+0xd0>)
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_ADC1_Init+0xd0>)
 8001152:	2201      	movs	r2, #1
 8001154:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001156:	481c      	ldr	r0, [pc, #112]	; (80011c8 <MX_ADC1_Init+0xd0>)
 8001158:	f000 fb1a 	bl	8001790 <HAL_ADC_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001162:	f000 f8c9 	bl	80012f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800116e:	2304      	movs	r3, #4
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_ADC1_Init+0xd0>)
 8001178:	f000 fcb8 	bl	8001aec <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001182:	f000 f8b9 	bl	80012f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001186:	2301      	movs	r3, #1
 8001188:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_ADC1_Init+0xd0>)
 8001194:	f000 fcaa 	bl	8001aec <HAL_ADC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800119e:	f000 f8ab 	bl	80012f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011a6:	2303      	movs	r3, #3
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_ADC1_Init+0xd0>)
 80011b0:	f000 fc9c 	bl	8001aec <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80011ba:	f000 f89d 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000021c 	.word	0x2000021c
 80011cc:	40012000 	.word	0x40012000
 80011d0:	0f000001 	.word	0x0f000001

080011d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART1_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 800120c:	f001 fd9a 	bl	8002d44 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f86f 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000264 	.word	0x20000264
 8001224:	40011000 	.word	0x40011000

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <MX_GPIO_Init+0xc4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a29      	ldr	r2, [pc, #164]	; (80012ec <MX_GPIO_Init+0xc4>)
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <MX_GPIO_Init+0xc4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <MX_GPIO_Init+0xc4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a22      	ldr	r2, [pc, #136]	; (80012ec <MX_GPIO_Init+0xc4>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <MX_GPIO_Init+0xc4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_GPIO_Init+0xc4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <MX_GPIO_Init+0xc4>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_GPIO_Init+0xc4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001298:	4815      	ldr	r0, [pc, #84]	; (80012f0 <MX_GPIO_Init+0xc8>)
 800129a:	f001 f8c7 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2110      	movs	r1, #16
 80012a2:	4814      	ldr	r0, [pc, #80]	; (80012f4 <MX_GPIO_Init+0xcc>)
 80012a4:	f001 f8c2 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 80012a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	4619      	mov	r1, r3
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <MX_GPIO_Init+0xc8>)
 80012c2:	f000 ff17 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 80012c6:	2310      	movs	r3, #16
 80012c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012ca:	2311      	movs	r3, #17
 80012cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_GPIO_Init+0xcc>)
 80012de:	f000 ff09 	bl	80020f4 <HAL_GPIO_Init>

}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40020c00 	.word	0x40020c00

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_MspInit+0x4c>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_ADC_MspInit+0x7c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d127      	bne.n	80013ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HAL_ADC_MspInit+0x80>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <HAL_ADC_MspInit+0x80>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_ADC_MspInit+0x80>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_ADC_MspInit+0x80>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_ADC_MspInit+0x80>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_ADC_MspInit+0x80>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80013b2:	2307      	movs	r3, #7
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <HAL_ADC_MspInit+0x84>)
 80013c6:	f000 fe95 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40012000 	.word	0x40012000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_UART_MspInit+0x84>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d12c      	bne.n	800145c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_UART_MspInit+0x88>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800143a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800144c:	2307      	movs	r3, #7
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_UART_MspInit+0x8c>)
 8001458:	f000 fe4c 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40011000 	.word	0x40011000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 f920 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	return 1;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_kill>:

int _kill(int pid, int sig)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014e6:	f002 f88b 	bl	8003600 <__errno>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2216      	movs	r2, #22
 80014ee:	601a      	str	r2, [r3, #0]
	return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_exit>:

void _exit (int status)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ffe7 	bl	80014dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800150e:	e7fe      	b.n	800150e <_exit+0x12>

08001510 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001538:	605a      	str	r2, [r3, #4]
	return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_isatty>:

int _isatty(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
	return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f002 f82a 	bl	8003600 <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20020000 	.word	0x20020000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	200002a8 	.word	0x200002a8
 80015e0:	200002c0 	.word	0x200002c0

080015e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <SystemInit+0x28>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ee:	4a07      	ldr	r2, [pc, #28]	; (800160c <SystemInit+0x28>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <SystemInit+0x28>)
 80015fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001648 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001614:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001616:	e003      	b.n	8001620 <LoopCopyDataInit>

08001618 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800161a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800161c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800161e:	3104      	adds	r1, #4

08001620 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001624:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001626:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001628:	d3f6      	bcc.n	8001618 <CopyDataInit>
  ldr  r2, =_sbss
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800162c:	e002      	b.n	8001634 <LoopFillZerobss>

0800162e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800162e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001630:	f842 3b04 	str.w	r3, [r2], #4

08001634 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001636:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001638:	d3f9      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800163a:	f7ff ffd3 	bl	80015e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163e:	f001 fff7 	bl	8003630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001642:	f7ff fceb 	bl	800101c <main>
  bx  lr    
 8001646:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001648:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800164c:	0800727c 	.word	0x0800727c
  ldr  r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001654:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8001658:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 800165c:	200002c0 	.word	0x200002c0

08001660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC_IRQHandler>
	...

08001664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_Init+0x40>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_Init+0x40>)
 800167a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_Init+0x40>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168c:	2003      	movs	r0, #3
 800168e:	f000 fcfd 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001692:	2000      	movs	r0, #0
 8001694:	f000 f808 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001698:	f7ff fe36 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023c00 	.word	0x40023c00

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x54>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x58>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fd07 	bl	80020da <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016e4:	f000 fcdd 	bl	80020a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_InitTick+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000024 	.word	0x20000024
 8001700:	2000002c 	.word	0x2000002c
 8001704:	20000028 	.word	0x20000028

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000002c 	.word	0x2000002c
 800172c:	200002ac 	.word	0x200002ac

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200002ac 	.word	0x200002ac

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_Delay+0x44>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000002c 	.word	0x2000002c

08001790 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e033      	b.n	800180e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fdd2 	bl	8001358 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017d6:	f023 0302 	bic.w	r3, r3, #2
 80017da:	f043 0202 	orr.w	r2, r3, #2
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 faa4 	bl	8001d30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f023 0303 	bic.w	r3, r3, #3
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
 80017fe:	e001      	b.n	8001804 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_ADC_Start+0x1a>
 800182e:	2302      	movs	r3, #2
 8001830:	e0b2      	b.n	8001998 <HAL_ADC_Start+0x180>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d018      	beq.n	800187a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001858:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <HAL_ADC_Start+0x18c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_ADC_Start+0x190>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0c9a      	lsrs	r2, r3, #18
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800186c:	e002      	b.n	8001874 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3b01      	subs	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f9      	bne.n	800186e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d17a      	bne.n	800197e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018c6:	d106      	bne.n	80018d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f023 0206 	bic.w	r2, r3, #6
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	645a      	str	r2, [r3, #68]	; 0x44
 80018d4:	e002      	b.n	80018dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e4:	4b31      	ldr	r3, [pc, #196]	; (80019ac <HAL_ADC_Start+0x194>)
 80018e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d12a      	bne.n	8001954 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <HAL_ADC_Start+0x198>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d015      	beq.n	8001934 <HAL_ADC_Start+0x11c>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <HAL_ADC_Start+0x19c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d105      	bne.n	800191e <HAL_ADC_Start+0x106>
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_ADC_Start+0x194>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <HAL_ADC_Start+0x1a0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d136      	bne.n	8001996 <HAL_ADC_Start+0x17e>
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_ADC_Start+0x194>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d130      	bne.n	8001996 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d129      	bne.n	8001996 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	e020      	b.n	8001996 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <HAL_ADC_Start+0x198>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d11b      	bne.n	8001996 <HAL_ADC_Start+0x17e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d114      	bne.n	8001996 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	e00b      	b.n	8001996 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f043 0210 	orr.w	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	20000024 	.word	0x20000024
 80019a8:	431bde83 	.word	0x431bde83
 80019ac:	40012300 	.word	0x40012300
 80019b0:	40012000 	.word	0x40012000
 80019b4:	40012100 	.word	0x40012100
 80019b8:	40012200 	.word	0x40012200

080019bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d8:	d113      	bne.n	8001a02 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e8:	d10b      	bne.n	8001a02 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f043 0220 	orr.w	r2, r3, #32
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e063      	b.n	8001aca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a02:	f7ff fe95 	bl	8001730 <HAL_GetTick>
 8001a06:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a08:	e021      	b.n	8001a4e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a10:	d01d      	beq.n	8001a4e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d007      	beq.n	8001a28 <HAL_ADC_PollForConversion+0x6c>
 8001a18:	f7ff fe8a 	bl	8001730 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d212      	bcs.n	8001a4e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d00b      	beq.n	8001a4e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f043 0204 	orr.w	r2, r3, #4
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e03d      	b.n	8001aca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d1d6      	bne.n	8001a0a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0212 	mvn.w	r2, #18
 8001a64:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d123      	bne.n	8001ac8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d11f      	bne.n	8001ac8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d111      	bne.n	8001ac8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x1c>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e105      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x228>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	d925      	bls.n	8001b64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68d9      	ldr	r1, [r3, #12]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3b1e      	subs	r3, #30
 8001b2e:	2207      	movs	r2, #7
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43da      	mvns	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	400a      	ands	r2, r1
 8001b3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68d9      	ldr	r1, [r3, #12]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	4603      	mov	r3, r0
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4403      	add	r3, r0
 8001b56:	3b1e      	subs	r3, #30
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	e022      	b.n	8001baa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6919      	ldr	r1, [r3, #16]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	2207      	movs	r2, #7
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	400a      	ands	r2, r1
 8001b86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6919      	ldr	r1, [r3, #16]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4403      	add	r3, r0
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d824      	bhi.n	8001bfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3b05      	subs	r3, #5
 8001bc4:	221f      	movs	r2, #31
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	3b05      	subs	r3, #5
 8001bee:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bfa:	e04c      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b0c      	cmp	r3, #12
 8001c02:	d824      	bhi.n	8001c4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3b23      	subs	r3, #35	; 0x23
 8001c16:	221f      	movs	r2, #31
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	400a      	ands	r2, r1
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b23      	subs	r3, #35	; 0x23
 8001c40:	fa00 f203 	lsl.w	r2, r0, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c4c:	e023      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b41      	subs	r3, #65	; 0x41
 8001c60:	221f      	movs	r2, #31
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	3b41      	subs	r3, #65	; 0x41
 8001c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c96:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <HAL_ADC_ConfigChannel+0x234>)
 8001c98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_ADC_ConfigChannel+0x238>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d109      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b12      	cmp	r3, #18
 8001caa:	d105      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_ADC_ConfigChannel+0x238>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d123      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x21e>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d003      	beq.n	8001cd2 <HAL_ADC_ConfigChannel+0x1e6>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b11      	cmp	r3, #17
 8001cd0:	d11b      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d111      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_ADC_ConfigChannel+0x23c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_ADC_ConfigChannel+0x240>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	0c9a      	lsrs	r2, r3, #18
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40012300 	.word	0x40012300
 8001d24:	40012000 	.word	0x40012000
 8001d28:	20000024 	.word	0x20000024
 8001d2c:	431bde83 	.word	0x431bde83

08001d30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d38:	4b79      	ldr	r3, [pc, #484]	; (8001f20 <ADC_Init+0x1f0>)
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	021a      	lsls	r2, r3, #8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6899      	ldr	r1, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	4a58      	ldr	r2, [pc, #352]	; (8001f24 <ADC_Init+0x1f4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d022      	beq.n	8001e0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6899      	ldr	r1, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6899      	ldr	r1, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	e00f      	b.n	8001e2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0202 	bic.w	r2, r2, #2
 8001e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6899      	ldr	r1, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7e1b      	ldrb	r3, [r3, #24]
 8001e48:	005a      	lsls	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01b      	beq.n	8001e94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	3b01      	subs	r3, #1
 8001e88:	035a      	lsls	r2, r3, #13
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	e007      	b.n	8001ea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	051a      	lsls	r2, r3, #20
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6899      	ldr	r1, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ee6:	025a      	lsls	r2, r3, #9
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6899      	ldr	r1, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	029a      	lsls	r2, r3, #10
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40012300 	.word	0x40012300
 8001f24:	0f000001 	.word	0x0f000001

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5a:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	60d3      	str	r3, [r2, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <__NVIC_GetPriorityGrouping+0x18>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0307 	and.w	r3, r3, #7
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff47 	bl	8001f28 <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b4:	f7ff ff5c 	bl	8001f70 <__NVIC_GetPriorityGrouping>
 80020b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7ff ff8e 	bl	8001fe0 <NVIC_EncodePriority>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffb0 	bl	8002048 <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e16b      	b.n	80023e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	f040 815a 	bne.w	80023e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d005      	beq.n	8002146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002142:	2b02      	cmp	r3, #2
 8002144:	d130      	bne.n	80021a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0201 	and.w	r2, r3, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d017      	beq.n	80021e4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d123      	bne.n	8002238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	69b9      	ldr	r1, [r7, #24]
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80b4 	beq.w	80023e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b60      	ldr	r3, [pc, #384]	; (8002400 <HAL_GPIO_Init+0x30c>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4a5f      	ldr	r2, [pc, #380]	; (8002400 <HAL_GPIO_Init+0x30c>)
 8002284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
 800228a:	4b5d      	ldr	r3, [pc, #372]	; (8002400 <HAL_GPIO_Init+0x30c>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002296:	4a5b      	ldr	r2, [pc, #364]	; (8002404 <HAL_GPIO_Init+0x310>)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a52      	ldr	r2, [pc, #328]	; (8002408 <HAL_GPIO_Init+0x314>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02b      	beq.n	800231a <HAL_GPIO_Init+0x226>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a51      	ldr	r2, [pc, #324]	; (800240c <HAL_GPIO_Init+0x318>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d025      	beq.n	8002316 <HAL_GPIO_Init+0x222>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a50      	ldr	r2, [pc, #320]	; (8002410 <HAL_GPIO_Init+0x31c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <HAL_GPIO_Init+0x21e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4f      	ldr	r2, [pc, #316]	; (8002414 <HAL_GPIO_Init+0x320>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d019      	beq.n	800230e <HAL_GPIO_Init+0x21a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4e      	ldr	r2, [pc, #312]	; (8002418 <HAL_GPIO_Init+0x324>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x216>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4d      	ldr	r2, [pc, #308]	; (800241c <HAL_GPIO_Init+0x328>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x212>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4c      	ldr	r2, [pc, #304]	; (8002420 <HAL_GPIO_Init+0x32c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x20e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4b      	ldr	r2, [pc, #300]	; (8002424 <HAL_GPIO_Init+0x330>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x20a>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e00e      	b.n	800231c <HAL_GPIO_Init+0x228>
 80022fe:	2308      	movs	r3, #8
 8002300:	e00c      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002302:	2306      	movs	r3, #6
 8002304:	e00a      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002306:	2305      	movs	r3, #5
 8002308:	e008      	b.n	800231c <HAL_GPIO_Init+0x228>
 800230a:	2304      	movs	r3, #4
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x228>
 800230e:	2303      	movs	r3, #3
 8002310:	e004      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002312:	2302      	movs	r3, #2
 8002314:	e002      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_GPIO_Init+0x228>
 800231a:	2300      	movs	r3, #0
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	f002 0203 	and.w	r2, r2, #3
 8002322:	0092      	lsls	r2, r2, #2
 8002324:	4093      	lsls	r3, r2
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800232c:	4935      	ldr	r1, [pc, #212]	; (8002404 <HAL_GPIO_Init+0x310>)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	3302      	adds	r3, #2
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_GPIO_Init+0x334>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235e:	4a32      	ldr	r2, [pc, #200]	; (8002428 <HAL_GPIO_Init+0x334>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_GPIO_Init+0x334>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002388:	4a27      	ldr	r2, [pc, #156]	; (8002428 <HAL_GPIO_Init+0x334>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_GPIO_Init+0x334>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b2:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_GPIO_Init+0x334>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_GPIO_Init+0x334>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023dc:	4a12      	ldr	r2, [pc, #72]	; (8002428 <HAL_GPIO_Init+0x334>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3301      	adds	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b0f      	cmp	r3, #15
 80023ec:	f67f ae90 	bls.w	8002110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	40013800 	.word	0x40013800
 8002408:	40020000 	.word	0x40020000
 800240c:	40020400 	.word	0x40020400
 8002410:	40020800 	.word	0x40020800
 8002414:	40020c00 	.word	0x40020c00
 8002418:	40021000 	.word	0x40021000
 800241c:	40021400 	.word	0x40021400
 8002420:	40021800 	.word	0x40021800
 8002424:	40021c00 	.word	0x40021c00
 8002428:	40013c00 	.word	0x40013c00

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002448:	e003      	b.n	8002452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002470:	887a      	ldrh	r2, [r7, #2]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4013      	ands	r3, r2
 8002476:	041a      	lsls	r2, r3, #16
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43d9      	mvns	r1, r3
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	400b      	ands	r3, r1
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e267      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d075      	beq.n	800259e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b2:	4b88      	ldr	r3, [pc, #544]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d00c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	4b85      	ldr	r3, [pc, #532]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d112      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d6:	d10b      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	4b7e      	ldr	r3, [pc, #504]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05b      	beq.n	800259c <HAL_RCC_OscConfig+0x108>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d157      	bne.n	800259c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e242      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x74>
 80024fa:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a75      	ldr	r2, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x98>
 8002512:	4b70      	ldr	r3, [pc, #448]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6f      	ldr	r2, [pc, #444]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b6d      	ldr	r3, [pc, #436]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6c      	ldr	r2, [pc, #432]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 800252c:	4b69      	ldr	r3, [pc, #420]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a68      	ldr	r2, [pc, #416]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a65      	ldr	r2, [pc, #404]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff f8f0 	bl	8001730 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff f8ec 	bl	8001730 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e207      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xc0>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff f8dc 	bl	8001730 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff f8d8 	bl	8001730 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1f3      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0xe8>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025aa:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1c7      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4937      	ldr	r1, [pc, #220]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCC_OscConfig+0x244>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7ff f891 	bl	8001730 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002612:	f7ff f88d 	bl	8001730 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1a8      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4925      	ldr	r1, [pc, #148]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_RCC_OscConfig+0x244>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff f870 	bl	8001730 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002654:	f7ff f86c 	bl	8001730 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e187      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d036      	beq.n	80026ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_RCC_OscConfig+0x248>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7ff f850 	bl	8001730 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002694:	f7ff f84c 	bl	8001730 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e167      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x200>
 80026b2:	e01b      	b.n	80026ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_OscConfig+0x248>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7ff f839 	bl	8001730 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	e00e      	b.n	80026e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c2:	f7ff f835 	bl	8001730 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d907      	bls.n	80026e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e150      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
 80026d4:	40023800 	.word	0x40023800
 80026d8:	42470000 	.word	0x42470000
 80026dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4b88      	ldr	r3, [pc, #544]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ea      	bne.n	80026c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8097 	beq.w	8002828 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fe:	4b81      	ldr	r3, [pc, #516]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b7d      	ldr	r3, [pc, #500]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a7c      	ldr	r2, [pc, #496]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b7a      	ldr	r3, [pc, #488]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	4b77      	ldr	r3, [pc, #476]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002736:	4b74      	ldr	r3, [pc, #464]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a73      	ldr	r2, [pc, #460]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7fe fff5 	bl	8001730 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7fe fff1 	bl	8001730 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e10c      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x2ea>
 8002770:	4b64      	ldr	r3, [pc, #400]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a63      	ldr	r2, [pc, #396]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	e01c      	b.n	80027b8 <HAL_RCC_OscConfig+0x324>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b05      	cmp	r3, #5
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x30c>
 8002786:	4b5f      	ldr	r3, [pc, #380]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	4a5e      	ldr	r2, [pc, #376]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6713      	str	r3, [r2, #112]	; 0x70
 8002792:	4b5c      	ldr	r3, [pc, #368]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a5b      	ldr	r2, [pc, #364]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0x324>
 80027a0:	4b58      	ldr	r3, [pc, #352]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a57      	ldr	r2, [pc, #348]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	4b55      	ldr	r3, [pc, #340]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a54      	ldr	r2, [pc, #336]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f023 0304 	bic.w	r3, r3, #4
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d015      	beq.n	80027ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe ffb6 	bl	8001730 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe ffb2 	bl	8001730 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0cb      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	4b49      	ldr	r3, [pc, #292]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ee      	beq.n	80027c8 <HAL_RCC_OscConfig+0x334>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7fe ffa0 	bl	8001730 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f4:	f7fe ff9c 	bl	8001730 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e0b5      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280a:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1ee      	bne.n	80027f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281c:	4b39      	ldr	r3, [pc, #228]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	4a38      	ldr	r2, [pc, #224]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002826:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a1 	beq.w	8002974 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002832:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b08      	cmp	r3, #8
 800283c:	d05c      	beq.n	80028f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d141      	bne.n	80028ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <HAL_RCC_OscConfig+0x478>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe ff70 	bl	8001730 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe ff6c 	bl	8001730 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e087      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	491b      	ldr	r1, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x478>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe ff45 	bl	8001730 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe ff41 	bl	8001730 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e05c      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x416>
 80028c8:	e054      	b.n	8002974 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCC_OscConfig+0x478>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fe ff2e 	bl	8001730 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe ff2a 	bl	8001730 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e045      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x444>
 80028f6:	e03d      	b.n	8002974 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e038      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
 8002904:	40023800 	.word	0x40023800
 8002908:	40007000 	.word	0x40007000
 800290c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_RCC_OscConfig+0x4ec>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d028      	beq.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d121      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d11a      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002948:	4293      	cmp	r3, r2
 800294a:	d111      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	3b01      	subs	r3, #1
 800295a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d107      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0cc      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d90c      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d044      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e06f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e067      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4934      	ldr	r1, [pc, #208]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fe5c 	bl	8001730 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fe58 	bl	8001730 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e04f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d20c      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fdbc 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023c00 	.word	0x40023c00
 8002b40:	40023800 	.word	0x40023800
 8002b44:	08006e64 	.word	0x08006e64
 8002b48:	20000024 	.word	0x20000024
 8002b4c:	20000028 	.word	0x20000028

08002b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b090      	sub	sp, #64	; 0x40
 8002b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	2300      	movs	r3, #0
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b68:	4b59      	ldr	r3, [pc, #356]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d00d      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x40>
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	f200 80a1 	bhi.w	8002cbc <HAL_RCC_GetSysClockFreq+0x16c>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b82:	e09b      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b88:	e09b      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8a:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b8e:	e098      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b90:	4b4f      	ldr	r3, [pc, #316]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9a:	4b4d      	ldr	r3, [pc, #308]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d028      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	2200      	movs	r2, #0
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	627a      	str	r2, [r7, #36]	; 0x24
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bbc:	fb03 f201 	mul.w	r2, r3, r1
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	fb00 f303 	mul.w	r3, r0, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	4a43      	ldr	r2, [pc, #268]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bca:	fba0 1202 	umull	r1, r2, r0, r2
 8002bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	4413      	add	r3, r2
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	2200      	movs	r2, #0
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	61fa      	str	r2, [r7, #28]
 8002be2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bea:	f7fe f80d 	bl	8000c08 <__aeabi_uldivmod>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf6:	e053      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	2200      	movs	r2, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	617a      	str	r2, [r7, #20]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c0a:	f04f 0b00 	mov.w	fp, #0
 8002c0e:	4652      	mov	r2, sl
 8002c10:	465b      	mov	r3, fp
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	0159      	lsls	r1, r3, #5
 8002c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c20:	0150      	lsls	r0, r2, #5
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	ebb2 080a 	subs.w	r8, r2, sl
 8002c2a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c42:	ebb2 0408 	subs.w	r4, r2, r8
 8002c46:	eb63 0509 	sbc.w	r5, r3, r9
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	00eb      	lsls	r3, r5, #3
 8002c54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c58:	00e2      	lsls	r2, r4, #3
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	461d      	mov	r5, r3
 8002c5e:	eb14 030a 	adds.w	r3, r4, sl
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	eb45 030b 	adc.w	r3, r5, fp
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c76:	4629      	mov	r1, r5
 8002c78:	028b      	lsls	r3, r1, #10
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c80:	4621      	mov	r1, r4
 8002c82:	028a      	lsls	r2, r1, #10
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	60fa      	str	r2, [r7, #12]
 8002c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c94:	f7fd ffb8 	bl	8000c08 <__aeabi_uldivmod>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cba:	e002      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3740      	adds	r7, #64	; 0x40
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	017d7840 	.word	0x017d7840

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000024 	.word	0x20000024

08002cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cf8:	f7ff fff0 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08006e74 	.word	0x08006e74

08002d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d20:	f7ff ffdc 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0b5b      	lsrs	r3, r3, #13
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4903      	ldr	r1, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	08006e74 	.word	0x08006e74

08002d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e03f      	b.n	8002dd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fb38 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	; 0x24
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f9a7 	bl	80030dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b08a      	sub	sp, #40	; 0x28
 8002de2:	af02      	add	r7, sp, #8
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d17c      	bne.n	8002ef8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_UART_Transmit+0x2c>
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e075      	b.n	8002efa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_UART_Transmit+0x3e>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e06e      	b.n	8002efa <HAL_UART_Transmit+0x11c>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2221      	movs	r2, #33	; 0x21
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e32:	f7fe fc7d 	bl	8001730 <HAL_GetTick>
 8002e36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	88fa      	ldrh	r2, [r7, #6]
 8002e3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4c:	d108      	bne.n	8002e60 <HAL_UART_Transmit+0x82>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d104      	bne.n	8002e60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	e003      	b.n	8002e68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e70:	e02a      	b.n	8002ec8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2180      	movs	r1, #128	; 0x80
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f8e2 	bl	8003046 <UART_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e036      	b.n	8002efa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ea0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	e007      	b.n	8002eba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1cf      	bne.n	8002e72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2140      	movs	r1, #64	; 0x40
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f8b2 	bl	8003046 <UART_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e006      	b.n	8002efa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b08a      	sub	sp, #40	; 0x28
 8002f06:	af02      	add	r7, sp, #8
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	f040 808c 	bne.w	800303c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_UART_Receive+0x2e>
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e084      	b.n	800303e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Receive+0x40>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e07d      	b.n	800303e <HAL_UART_Receive+0x13c>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2222      	movs	r2, #34	; 0x22
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5e:	f7fe fbe7 	bl	8001730 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f78:	d108      	bne.n	8002f8c <HAL_UART_Receive+0x8a>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	e003      	b.n	8002f94 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f9c:	e043      	b.n	8003026 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2120      	movs	r1, #32
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f84c 	bl	8003046 <UART_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e042      	b.n	800303e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e01f      	b.n	8003018 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d007      	beq.n	8002ff2 <HAL_UART_Receive+0xf0>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_UART_Receive+0xfe>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e008      	b.n	8003012 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800300c:	b2da      	uxtb	r2, r3
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1b6      	bne.n	8002f9e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	4613      	mov	r3, r2
 8003054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003056:	e02c      	b.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800305e:	d028      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <UART_WaitOnFlagUntilTimeout+0x30>
 8003066:	f7fe fb63 	bl	8001730 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	429a      	cmp	r2, r3
 8003074:	d21d      	bcs.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003084:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e00f      	b.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4013      	ands	r3, r2
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d0c3      	beq.n	8003058 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e0:	b0c0      	sub	sp, #256	; 0x100
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	68d9      	ldr	r1, [r3, #12]
 80030fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	ea40 0301 	orr.w	r3, r0, r1
 8003104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	431a      	orrs	r2, r3
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003134:	f021 010c 	bic.w	r1, r1, #12
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003142:	430b      	orrs	r3, r1
 8003144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	6999      	ldr	r1, [r3, #24]
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	ea40 0301 	orr.w	r3, r0, r1
 8003162:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b8f      	ldr	r3, [pc, #572]	; (80033a8 <UART_SetConfig+0x2cc>)
 800316c:	429a      	cmp	r2, r3
 800316e:	d005      	beq.n	800317c <UART_SetConfig+0xa0>
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b8d      	ldr	r3, [pc, #564]	; (80033ac <UART_SetConfig+0x2d0>)
 8003178:	429a      	cmp	r2, r3
 800317a:	d104      	bne.n	8003186 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800317c:	f7ff fdce 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 8003180:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003184:	e003      	b.n	800318e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003186:	f7ff fdb5 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 800318a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003198:	f040 810c 	bne.w	80033b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800319c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031ae:	4622      	mov	r2, r4
 80031b0:	462b      	mov	r3, r5
 80031b2:	1891      	adds	r1, r2, r2
 80031b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80031b6:	415b      	adcs	r3, r3
 80031b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031be:	4621      	mov	r1, r4
 80031c0:	eb12 0801 	adds.w	r8, r2, r1
 80031c4:	4629      	mov	r1, r5
 80031c6:	eb43 0901 	adc.w	r9, r3, r1
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031de:	4690      	mov	r8, r2
 80031e0:	4699      	mov	r9, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	eb18 0303 	adds.w	r3, r8, r3
 80031e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031ec:	462b      	mov	r3, r5
 80031ee:	eb49 0303 	adc.w	r3, r9, r3
 80031f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003202:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800320a:	460b      	mov	r3, r1
 800320c:	18db      	adds	r3, r3, r3
 800320e:	653b      	str	r3, [r7, #80]	; 0x50
 8003210:	4613      	mov	r3, r2
 8003212:	eb42 0303 	adc.w	r3, r2, r3
 8003216:	657b      	str	r3, [r7, #84]	; 0x54
 8003218:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800321c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003220:	f7fd fcf2 	bl	8000c08 <__aeabi_uldivmod>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4b61      	ldr	r3, [pc, #388]	; (80033b0 <UART_SetConfig+0x2d4>)
 800322a:	fba3 2302 	umull	r2, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	011c      	lsls	r4, r3, #4
 8003232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003236:	2200      	movs	r2, #0
 8003238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800323c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003240:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	1891      	adds	r1, r2, r2
 800324a:	64b9      	str	r1, [r7, #72]	; 0x48
 800324c:	415b      	adcs	r3, r3
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003254:	4641      	mov	r1, r8
 8003256:	eb12 0a01 	adds.w	sl, r2, r1
 800325a:	4649      	mov	r1, r9
 800325c:	eb43 0b01 	adc.w	fp, r3, r1
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800326c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003274:	4692      	mov	sl, r2
 8003276:	469b      	mov	fp, r3
 8003278:	4643      	mov	r3, r8
 800327a:	eb1a 0303 	adds.w	r3, sl, r3
 800327e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003282:	464b      	mov	r3, r9
 8003284:	eb4b 0303 	adc.w	r3, fp, r3
 8003288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003298:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800329c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032a0:	460b      	mov	r3, r1
 80032a2:	18db      	adds	r3, r3, r3
 80032a4:	643b      	str	r3, [r7, #64]	; 0x40
 80032a6:	4613      	mov	r3, r2
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	647b      	str	r3, [r7, #68]	; 0x44
 80032ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032b6:	f7fd fca7 	bl	8000c08 <__aeabi_uldivmod>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <UART_SetConfig+0x2d4>)
 80032c2:	fba3 2301 	umull	r2, r3, r3, r1
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2264      	movs	r2, #100	; 0x64
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	1acb      	subs	r3, r1, r3
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <UART_SetConfig+0x2d4>)
 80032d8:	fba3 2302 	umull	r2, r3, r3, r2
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032e4:	441c      	add	r4, r3
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	1891      	adds	r1, r2, r2
 80032fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003300:	415b      	adcs	r3, r3
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003308:	4641      	mov	r1, r8
 800330a:	1851      	adds	r1, r2, r1
 800330c:	6339      	str	r1, [r7, #48]	; 0x30
 800330e:	4649      	mov	r1, r9
 8003310:	414b      	adcs	r3, r1
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003320:	4659      	mov	r1, fp
 8003322:	00cb      	lsls	r3, r1, #3
 8003324:	4651      	mov	r1, sl
 8003326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332a:	4651      	mov	r1, sl
 800332c:	00ca      	lsls	r2, r1, #3
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	4603      	mov	r3, r0
 8003334:	4642      	mov	r2, r8
 8003336:	189b      	adds	r3, r3, r2
 8003338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800333c:	464b      	mov	r3, r9
 800333e:	460a      	mov	r2, r1
 8003340:	eb42 0303 	adc.w	r3, r2, r3
 8003344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003354:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800335c:	460b      	mov	r3, r1
 800335e:	18db      	adds	r3, r3, r3
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
 8003362:	4613      	mov	r3, r2
 8003364:	eb42 0303 	adc.w	r3, r2, r3
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800336e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003372:	f7fd fc49 	bl	8000c08 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <UART_SetConfig+0x2d4>)
 800337c:	fba3 1302 	umull	r1, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	3332      	adds	r3, #50	; 0x32
 800338e:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <UART_SetConfig+0x2d4>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	f003 0207 	and.w	r2, r3, #7
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4422      	add	r2, r4
 80033a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033a4:	e105      	b.n	80035b2 <UART_SetConfig+0x4d6>
 80033a6:	bf00      	nop
 80033a8:	40011000 	.word	0x40011000
 80033ac:	40011400 	.word	0x40011400
 80033b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033c6:	4642      	mov	r2, r8
 80033c8:	464b      	mov	r3, r9
 80033ca:	1891      	adds	r1, r2, r2
 80033cc:	6239      	str	r1, [r7, #32]
 80033ce:	415b      	adcs	r3, r3
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033d6:	4641      	mov	r1, r8
 80033d8:	1854      	adds	r4, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb43 0501 	adc.w	r5, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	00eb      	lsls	r3, r5, #3
 80033ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ee:	00e2      	lsls	r2, r4, #3
 80033f0:	4614      	mov	r4, r2
 80033f2:	461d      	mov	r5, r3
 80033f4:	4643      	mov	r3, r8
 80033f6:	18e3      	adds	r3, r4, r3
 80033f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033fc:	464b      	mov	r3, r9
 80033fe:	eb45 0303 	adc.w	r3, r5, r3
 8003402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003422:	4629      	mov	r1, r5
 8003424:	008b      	lsls	r3, r1, #2
 8003426:	4621      	mov	r1, r4
 8003428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342c:	4621      	mov	r1, r4
 800342e:	008a      	lsls	r2, r1, #2
 8003430:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003434:	f7fd fbe8 	bl	8000c08 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4b60      	ldr	r3, [pc, #384]	; (80035c0 <UART_SetConfig+0x4e4>)
 800343e:	fba3 2302 	umull	r2, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	011c      	lsls	r4, r3, #4
 8003446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800344a:	2200      	movs	r2, #0
 800344c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003450:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003454:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003458:	4642      	mov	r2, r8
 800345a:	464b      	mov	r3, r9
 800345c:	1891      	adds	r1, r2, r2
 800345e:	61b9      	str	r1, [r7, #24]
 8003460:	415b      	adcs	r3, r3
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003468:	4641      	mov	r1, r8
 800346a:	1851      	adds	r1, r2, r1
 800346c:	6139      	str	r1, [r7, #16]
 800346e:	4649      	mov	r1, r9
 8003470:	414b      	adcs	r3, r1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003480:	4659      	mov	r1, fp
 8003482:	00cb      	lsls	r3, r1, #3
 8003484:	4651      	mov	r1, sl
 8003486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800348a:	4651      	mov	r1, sl
 800348c:	00ca      	lsls	r2, r1, #3
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	4603      	mov	r3, r0
 8003494:	4642      	mov	r2, r8
 8003496:	189b      	adds	r3, r3, r2
 8003498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800349c:	464b      	mov	r3, r9
 800349e:	460a      	mov	r2, r1
 80034a0:	eb42 0303 	adc.w	r3, r2, r3
 80034a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034c0:	4649      	mov	r1, r9
 80034c2:	008b      	lsls	r3, r1, #2
 80034c4:	4641      	mov	r1, r8
 80034c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ca:	4641      	mov	r1, r8
 80034cc:	008a      	lsls	r2, r1, #2
 80034ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034d2:	f7fd fb99 	bl	8000c08 <__aeabi_uldivmod>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <UART_SetConfig+0x4e4>)
 80034dc:	fba3 1302 	umull	r1, r3, r3, r2
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	2164      	movs	r1, #100	; 0x64
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	3332      	adds	r3, #50	; 0x32
 80034ee:	4a34      	ldr	r2, [pc, #208]	; (80035c0 <UART_SetConfig+0x4e4>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034fa:	441c      	add	r4, r3
 80034fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003500:	2200      	movs	r2, #0
 8003502:	673b      	str	r3, [r7, #112]	; 0x70
 8003504:	677a      	str	r2, [r7, #116]	; 0x74
 8003506:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800350a:	4642      	mov	r2, r8
 800350c:	464b      	mov	r3, r9
 800350e:	1891      	adds	r1, r2, r2
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	415b      	adcs	r3, r3
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800351a:	4641      	mov	r1, r8
 800351c:	1851      	adds	r1, r2, r1
 800351e:	6039      	str	r1, [r7, #0]
 8003520:	4649      	mov	r1, r9
 8003522:	414b      	adcs	r3, r1
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003532:	4659      	mov	r1, fp
 8003534:	00cb      	lsls	r3, r1, #3
 8003536:	4651      	mov	r1, sl
 8003538:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800353c:	4651      	mov	r1, sl
 800353e:	00ca      	lsls	r2, r1, #3
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	4603      	mov	r3, r0
 8003546:	4642      	mov	r2, r8
 8003548:	189b      	adds	r3, r3, r2
 800354a:	66bb      	str	r3, [r7, #104]	; 0x68
 800354c:	464b      	mov	r3, r9
 800354e:	460a      	mov	r2, r1
 8003550:	eb42 0303 	adc.w	r3, r2, r3
 8003554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	663b      	str	r3, [r7, #96]	; 0x60
 8003560:	667a      	str	r2, [r7, #100]	; 0x64
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800356e:	4649      	mov	r1, r9
 8003570:	008b      	lsls	r3, r1, #2
 8003572:	4641      	mov	r1, r8
 8003574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003578:	4641      	mov	r1, r8
 800357a:	008a      	lsls	r2, r1, #2
 800357c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003580:	f7fd fb42 	bl	8000c08 <__aeabi_uldivmod>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <UART_SetConfig+0x4e4>)
 800358a:	fba3 1302 	umull	r1, r3, r3, r2
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2164      	movs	r1, #100	; 0x64
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	3332      	adds	r3, #50	; 0x32
 800359c:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <UART_SetConfig+0x4e4>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	f003 020f 	and.w	r2, r3, #15
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4422      	add	r2, r4
 80035b0:	609a      	str	r2, [r3, #8]
}
 80035b2:	bf00      	nop
 80035b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035be:	bf00      	nop
 80035c0:	51eb851f 	.word	0x51eb851f

080035c4 <__assert_func>:
 80035c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80035c6:	4614      	mov	r4, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <__assert_func+0x2c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4605      	mov	r5, r0
 80035d0:	68d8      	ldr	r0, [r3, #12]
 80035d2:	b14c      	cbz	r4, 80035e8 <__assert_func+0x24>
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <__assert_func+0x30>)
 80035d6:	9100      	str	r1, [sp, #0]
 80035d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80035dc:	4906      	ldr	r1, [pc, #24]	; (80035f8 <__assert_func+0x34>)
 80035de:	462b      	mov	r3, r5
 80035e0:	f000 f814 	bl	800360c <fiprintf>
 80035e4:	f001 f80c 	bl	8004600 <abort>
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <__assert_func+0x38>)
 80035ea:	461c      	mov	r4, r3
 80035ec:	e7f3      	b.n	80035d6 <__assert_func+0x12>
 80035ee:	bf00      	nop
 80035f0:	20000030 	.word	0x20000030
 80035f4:	08006e7c 	.word	0x08006e7c
 80035f8:	08006e89 	.word	0x08006e89
 80035fc:	08006eb7 	.word	0x08006eb7

08003600 <__errno>:
 8003600:	4b01      	ldr	r3, [pc, #4]	; (8003608 <__errno+0x8>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000030 	.word	0x20000030

0800360c <fiprintf>:
 800360c:	b40e      	push	{r1, r2, r3}
 800360e:	b503      	push	{r0, r1, lr}
 8003610:	4601      	mov	r1, r0
 8003612:	ab03      	add	r3, sp, #12
 8003614:	4805      	ldr	r0, [pc, #20]	; (800362c <fiprintf+0x20>)
 8003616:	f853 2b04 	ldr.w	r2, [r3], #4
 800361a:	6800      	ldr	r0, [r0, #0]
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	f000 fd79 	bl	8004114 <_vfiprintf_r>
 8003622:	b002      	add	sp, #8
 8003624:	f85d eb04 	ldr.w	lr, [sp], #4
 8003628:	b003      	add	sp, #12
 800362a:	4770      	bx	lr
 800362c:	20000030 	.word	0x20000030

08003630 <__libc_init_array>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	4d0d      	ldr	r5, [pc, #52]	; (8003668 <__libc_init_array+0x38>)
 8003634:	4c0d      	ldr	r4, [pc, #52]	; (800366c <__libc_init_array+0x3c>)
 8003636:	1b64      	subs	r4, r4, r5
 8003638:	10a4      	asrs	r4, r4, #2
 800363a:	2600      	movs	r6, #0
 800363c:	42a6      	cmp	r6, r4
 800363e:	d109      	bne.n	8003654 <__libc_init_array+0x24>
 8003640:	4d0b      	ldr	r5, [pc, #44]	; (8003670 <__libc_init_array+0x40>)
 8003642:	4c0c      	ldr	r4, [pc, #48]	; (8003674 <__libc_init_array+0x44>)
 8003644:	f003 fbe6 	bl	8006e14 <_init>
 8003648:	1b64      	subs	r4, r4, r5
 800364a:	10a4      	asrs	r4, r4, #2
 800364c:	2600      	movs	r6, #0
 800364e:	42a6      	cmp	r6, r4
 8003650:	d105      	bne.n	800365e <__libc_init_array+0x2e>
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	f855 3b04 	ldr.w	r3, [r5], #4
 8003658:	4798      	blx	r3
 800365a:	3601      	adds	r6, #1
 800365c:	e7ee      	b.n	800363c <__libc_init_array+0xc>
 800365e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003662:	4798      	blx	r3
 8003664:	3601      	adds	r6, #1
 8003666:	e7f2      	b.n	800364e <__libc_init_array+0x1e>
 8003668:	08007274 	.word	0x08007274
 800366c:	08007274 	.word	0x08007274
 8003670:	08007274 	.word	0x08007274
 8003674:	08007278 	.word	0x08007278

08003678 <__retarget_lock_init_recursive>:
 8003678:	4770      	bx	lr

0800367a <__retarget_lock_acquire_recursive>:
 800367a:	4770      	bx	lr

0800367c <__retarget_lock_release_recursive>:
 800367c:	4770      	bx	lr
	...

08003680 <malloc>:
 8003680:	4b02      	ldr	r3, [pc, #8]	; (800368c <malloc+0xc>)
 8003682:	4601      	mov	r1, r0
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	f000 b857 	b.w	8003738 <_malloc_r>
 800368a:	bf00      	nop
 800368c:	20000030 	.word	0x20000030

08003690 <memset>:
 8003690:	4402      	add	r2, r0
 8003692:	4603      	mov	r3, r0
 8003694:	4293      	cmp	r3, r2
 8003696:	d100      	bne.n	800369a <memset+0xa>
 8003698:	4770      	bx	lr
 800369a:	f803 1b01 	strb.w	r1, [r3], #1
 800369e:	e7f9      	b.n	8003694 <memset+0x4>

080036a0 <_free_r>:
 80036a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036a2:	2900      	cmp	r1, #0
 80036a4:	d044      	beq.n	8003730 <_free_r+0x90>
 80036a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036aa:	9001      	str	r0, [sp, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f1a1 0404 	sub.w	r4, r1, #4
 80036b2:	bfb8      	it	lt
 80036b4:	18e4      	addlt	r4, r4, r3
 80036b6:	f002 f867 	bl	8005788 <__malloc_lock>
 80036ba:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <_free_r+0x94>)
 80036bc:	9801      	ldr	r0, [sp, #4]
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	b933      	cbnz	r3, 80036d0 <_free_r+0x30>
 80036c2:	6063      	str	r3, [r4, #4]
 80036c4:	6014      	str	r4, [r2, #0]
 80036c6:	b003      	add	sp, #12
 80036c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036cc:	f002 b862 	b.w	8005794 <__malloc_unlock>
 80036d0:	42a3      	cmp	r3, r4
 80036d2:	d908      	bls.n	80036e6 <_free_r+0x46>
 80036d4:	6825      	ldr	r5, [r4, #0]
 80036d6:	1961      	adds	r1, r4, r5
 80036d8:	428b      	cmp	r3, r1
 80036da:	bf01      	itttt	eq
 80036dc:	6819      	ldreq	r1, [r3, #0]
 80036de:	685b      	ldreq	r3, [r3, #4]
 80036e0:	1949      	addeq	r1, r1, r5
 80036e2:	6021      	streq	r1, [r4, #0]
 80036e4:	e7ed      	b.n	80036c2 <_free_r+0x22>
 80036e6:	461a      	mov	r2, r3
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	b10b      	cbz	r3, 80036f0 <_free_r+0x50>
 80036ec:	42a3      	cmp	r3, r4
 80036ee:	d9fa      	bls.n	80036e6 <_free_r+0x46>
 80036f0:	6811      	ldr	r1, [r2, #0]
 80036f2:	1855      	adds	r5, r2, r1
 80036f4:	42a5      	cmp	r5, r4
 80036f6:	d10b      	bne.n	8003710 <_free_r+0x70>
 80036f8:	6824      	ldr	r4, [r4, #0]
 80036fa:	4421      	add	r1, r4
 80036fc:	1854      	adds	r4, r2, r1
 80036fe:	42a3      	cmp	r3, r4
 8003700:	6011      	str	r1, [r2, #0]
 8003702:	d1e0      	bne.n	80036c6 <_free_r+0x26>
 8003704:	681c      	ldr	r4, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	4421      	add	r1, r4
 800370c:	6011      	str	r1, [r2, #0]
 800370e:	e7da      	b.n	80036c6 <_free_r+0x26>
 8003710:	d902      	bls.n	8003718 <_free_r+0x78>
 8003712:	230c      	movs	r3, #12
 8003714:	6003      	str	r3, [r0, #0]
 8003716:	e7d6      	b.n	80036c6 <_free_r+0x26>
 8003718:	6825      	ldr	r5, [r4, #0]
 800371a:	1961      	adds	r1, r4, r5
 800371c:	428b      	cmp	r3, r1
 800371e:	bf04      	itt	eq
 8003720:	6819      	ldreq	r1, [r3, #0]
 8003722:	685b      	ldreq	r3, [r3, #4]
 8003724:	6063      	str	r3, [r4, #4]
 8003726:	bf04      	itt	eq
 8003728:	1949      	addeq	r1, r1, r5
 800372a:	6021      	streq	r1, [r4, #0]
 800372c:	6054      	str	r4, [r2, #4]
 800372e:	e7ca      	b.n	80036c6 <_free_r+0x26>
 8003730:	b003      	add	sp, #12
 8003732:	bd30      	pop	{r4, r5, pc}
 8003734:	200002b4 	.word	0x200002b4

08003738 <_malloc_r>:
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373a:	1ccd      	adds	r5, r1, #3
 800373c:	f025 0503 	bic.w	r5, r5, #3
 8003740:	3508      	adds	r5, #8
 8003742:	2d0c      	cmp	r5, #12
 8003744:	bf38      	it	cc
 8003746:	250c      	movcc	r5, #12
 8003748:	2d00      	cmp	r5, #0
 800374a:	4606      	mov	r6, r0
 800374c:	db01      	blt.n	8003752 <_malloc_r+0x1a>
 800374e:	42a9      	cmp	r1, r5
 8003750:	d903      	bls.n	800375a <_malloc_r+0x22>
 8003752:	230c      	movs	r3, #12
 8003754:	6033      	str	r3, [r6, #0]
 8003756:	2000      	movs	r0, #0
 8003758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800375a:	f002 f815 	bl	8005788 <__malloc_lock>
 800375e:	4921      	ldr	r1, [pc, #132]	; (80037e4 <_malloc_r+0xac>)
 8003760:	680a      	ldr	r2, [r1, #0]
 8003762:	4614      	mov	r4, r2
 8003764:	b99c      	cbnz	r4, 800378e <_malloc_r+0x56>
 8003766:	4f20      	ldr	r7, [pc, #128]	; (80037e8 <_malloc_r+0xb0>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b923      	cbnz	r3, 8003776 <_malloc_r+0x3e>
 800376c:	4621      	mov	r1, r4
 800376e:	4630      	mov	r0, r6
 8003770:	f000 fe76 	bl	8004460 <_sbrk_r>
 8003774:	6038      	str	r0, [r7, #0]
 8003776:	4629      	mov	r1, r5
 8003778:	4630      	mov	r0, r6
 800377a:	f000 fe71 	bl	8004460 <_sbrk_r>
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	d123      	bne.n	80037ca <_malloc_r+0x92>
 8003782:	230c      	movs	r3, #12
 8003784:	6033      	str	r3, [r6, #0]
 8003786:	4630      	mov	r0, r6
 8003788:	f002 f804 	bl	8005794 <__malloc_unlock>
 800378c:	e7e3      	b.n	8003756 <_malloc_r+0x1e>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	1b5b      	subs	r3, r3, r5
 8003792:	d417      	bmi.n	80037c4 <_malloc_r+0x8c>
 8003794:	2b0b      	cmp	r3, #11
 8003796:	d903      	bls.n	80037a0 <_malloc_r+0x68>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	441c      	add	r4, r3
 800379c:	6025      	str	r5, [r4, #0]
 800379e:	e004      	b.n	80037aa <_malloc_r+0x72>
 80037a0:	6863      	ldr	r3, [r4, #4]
 80037a2:	42a2      	cmp	r2, r4
 80037a4:	bf0c      	ite	eq
 80037a6:	600b      	streq	r3, [r1, #0]
 80037a8:	6053      	strne	r3, [r2, #4]
 80037aa:	4630      	mov	r0, r6
 80037ac:	f001 fff2 	bl	8005794 <__malloc_unlock>
 80037b0:	f104 000b 	add.w	r0, r4, #11
 80037b4:	1d23      	adds	r3, r4, #4
 80037b6:	f020 0007 	bic.w	r0, r0, #7
 80037ba:	1ac2      	subs	r2, r0, r3
 80037bc:	d0cc      	beq.n	8003758 <_malloc_r+0x20>
 80037be:	1a1b      	subs	r3, r3, r0
 80037c0:	50a3      	str	r3, [r4, r2]
 80037c2:	e7c9      	b.n	8003758 <_malloc_r+0x20>
 80037c4:	4622      	mov	r2, r4
 80037c6:	6864      	ldr	r4, [r4, #4]
 80037c8:	e7cc      	b.n	8003764 <_malloc_r+0x2c>
 80037ca:	1cc4      	adds	r4, r0, #3
 80037cc:	f024 0403 	bic.w	r4, r4, #3
 80037d0:	42a0      	cmp	r0, r4
 80037d2:	d0e3      	beq.n	800379c <_malloc_r+0x64>
 80037d4:	1a21      	subs	r1, r4, r0
 80037d6:	4630      	mov	r0, r6
 80037d8:	f000 fe42 	bl	8004460 <_sbrk_r>
 80037dc:	3001      	adds	r0, #1
 80037de:	d1dd      	bne.n	800379c <_malloc_r+0x64>
 80037e0:	e7cf      	b.n	8003782 <_malloc_r+0x4a>
 80037e2:	bf00      	nop
 80037e4:	200002b4 	.word	0x200002b4
 80037e8:	200002b8 	.word	0x200002b8

080037ec <__cvt>:
 80037ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037f0:	ec55 4b10 	vmov	r4, r5, d0
 80037f4:	2d00      	cmp	r5, #0
 80037f6:	460e      	mov	r6, r1
 80037f8:	4619      	mov	r1, r3
 80037fa:	462b      	mov	r3, r5
 80037fc:	bfbb      	ittet	lt
 80037fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003802:	461d      	movlt	r5, r3
 8003804:	2300      	movge	r3, #0
 8003806:	232d      	movlt	r3, #45	; 0x2d
 8003808:	700b      	strb	r3, [r1, #0]
 800380a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800380c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003810:	4691      	mov	r9, r2
 8003812:	f023 0820 	bic.w	r8, r3, #32
 8003816:	bfbc      	itt	lt
 8003818:	4622      	movlt	r2, r4
 800381a:	4614      	movlt	r4, r2
 800381c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003820:	d005      	beq.n	800382e <__cvt+0x42>
 8003822:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003826:	d100      	bne.n	800382a <__cvt+0x3e>
 8003828:	3601      	adds	r6, #1
 800382a:	2102      	movs	r1, #2
 800382c:	e000      	b.n	8003830 <__cvt+0x44>
 800382e:	2103      	movs	r1, #3
 8003830:	ab03      	add	r3, sp, #12
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	ab02      	add	r3, sp, #8
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	ec45 4b10 	vmov	d0, r4, r5
 800383c:	4653      	mov	r3, sl
 800383e:	4632      	mov	r2, r6
 8003840:	f000 ff72 	bl	8004728 <_dtoa_r>
 8003844:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003848:	4607      	mov	r7, r0
 800384a:	d102      	bne.n	8003852 <__cvt+0x66>
 800384c:	f019 0f01 	tst.w	r9, #1
 8003850:	d022      	beq.n	8003898 <__cvt+0xac>
 8003852:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003856:	eb07 0906 	add.w	r9, r7, r6
 800385a:	d110      	bne.n	800387e <__cvt+0x92>
 800385c:	783b      	ldrb	r3, [r7, #0]
 800385e:	2b30      	cmp	r3, #48	; 0x30
 8003860:	d10a      	bne.n	8003878 <__cvt+0x8c>
 8003862:	2200      	movs	r2, #0
 8003864:	2300      	movs	r3, #0
 8003866:	4620      	mov	r0, r4
 8003868:	4629      	mov	r1, r5
 800386a:	f7fd f90d 	bl	8000a88 <__aeabi_dcmpeq>
 800386e:	b918      	cbnz	r0, 8003878 <__cvt+0x8c>
 8003870:	f1c6 0601 	rsb	r6, r6, #1
 8003874:	f8ca 6000 	str.w	r6, [sl]
 8003878:	f8da 3000 	ldr.w	r3, [sl]
 800387c:	4499      	add	r9, r3
 800387e:	2200      	movs	r2, #0
 8003880:	2300      	movs	r3, #0
 8003882:	4620      	mov	r0, r4
 8003884:	4629      	mov	r1, r5
 8003886:	f7fd f8ff 	bl	8000a88 <__aeabi_dcmpeq>
 800388a:	b108      	cbz	r0, 8003890 <__cvt+0xa4>
 800388c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003890:	2230      	movs	r2, #48	; 0x30
 8003892:	9b03      	ldr	r3, [sp, #12]
 8003894:	454b      	cmp	r3, r9
 8003896:	d307      	bcc.n	80038a8 <__cvt+0xbc>
 8003898:	9b03      	ldr	r3, [sp, #12]
 800389a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800389c:	1bdb      	subs	r3, r3, r7
 800389e:	4638      	mov	r0, r7
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	b004      	add	sp, #16
 80038a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	9103      	str	r1, [sp, #12]
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e7f0      	b.n	8003892 <__cvt+0xa6>

080038b0 <__exponent>:
 80038b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038b2:	4603      	mov	r3, r0
 80038b4:	2900      	cmp	r1, #0
 80038b6:	bfb8      	it	lt
 80038b8:	4249      	neglt	r1, r1
 80038ba:	f803 2b02 	strb.w	r2, [r3], #2
 80038be:	bfb4      	ite	lt
 80038c0:	222d      	movlt	r2, #45	; 0x2d
 80038c2:	222b      	movge	r2, #43	; 0x2b
 80038c4:	2909      	cmp	r1, #9
 80038c6:	7042      	strb	r2, [r0, #1]
 80038c8:	dd2a      	ble.n	8003920 <__exponent+0x70>
 80038ca:	f10d 0407 	add.w	r4, sp, #7
 80038ce:	46a4      	mov	ip, r4
 80038d0:	270a      	movs	r7, #10
 80038d2:	46a6      	mov	lr, r4
 80038d4:	460a      	mov	r2, r1
 80038d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80038da:	fb07 1516 	mls	r5, r7, r6, r1
 80038de:	3530      	adds	r5, #48	; 0x30
 80038e0:	2a63      	cmp	r2, #99	; 0x63
 80038e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80038e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80038ea:	4631      	mov	r1, r6
 80038ec:	dcf1      	bgt.n	80038d2 <__exponent+0x22>
 80038ee:	3130      	adds	r1, #48	; 0x30
 80038f0:	f1ae 0502 	sub.w	r5, lr, #2
 80038f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80038f8:	1c44      	adds	r4, r0, #1
 80038fa:	4629      	mov	r1, r5
 80038fc:	4561      	cmp	r1, ip
 80038fe:	d30a      	bcc.n	8003916 <__exponent+0x66>
 8003900:	f10d 0209 	add.w	r2, sp, #9
 8003904:	eba2 020e 	sub.w	r2, r2, lr
 8003908:	4565      	cmp	r5, ip
 800390a:	bf88      	it	hi
 800390c:	2200      	movhi	r2, #0
 800390e:	4413      	add	r3, r2
 8003910:	1a18      	subs	r0, r3, r0
 8003912:	b003      	add	sp, #12
 8003914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800391a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800391e:	e7ed      	b.n	80038fc <__exponent+0x4c>
 8003920:	2330      	movs	r3, #48	; 0x30
 8003922:	3130      	adds	r1, #48	; 0x30
 8003924:	7083      	strb	r3, [r0, #2]
 8003926:	70c1      	strb	r1, [r0, #3]
 8003928:	1d03      	adds	r3, r0, #4
 800392a:	e7f1      	b.n	8003910 <__exponent+0x60>

0800392c <_printf_float>:
 800392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	ed2d 8b02 	vpush	{d8}
 8003934:	b08d      	sub	sp, #52	; 0x34
 8003936:	460c      	mov	r4, r1
 8003938:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800393c:	4616      	mov	r6, r2
 800393e:	461f      	mov	r7, r3
 8003940:	4605      	mov	r5, r0
 8003942:	f001 fe97 	bl	8005674 <_localeconv_r>
 8003946:	f8d0 a000 	ldr.w	sl, [r0]
 800394a:	4650      	mov	r0, sl
 800394c:	f7fc fc20 	bl	8000190 <strlen>
 8003950:	2300      	movs	r3, #0
 8003952:	930a      	str	r3, [sp, #40]	; 0x28
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	9305      	str	r3, [sp, #20]
 8003958:	f8d8 3000 	ldr.w	r3, [r8]
 800395c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003960:	3307      	adds	r3, #7
 8003962:	f023 0307 	bic.w	r3, r3, #7
 8003966:	f103 0208 	add.w	r2, r3, #8
 800396a:	f8c8 2000 	str.w	r2, [r8]
 800396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003972:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003976:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800397a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800397e:	9307      	str	r3, [sp, #28]
 8003980:	f8cd 8018 	str.w	r8, [sp, #24]
 8003984:	ee08 0a10 	vmov	s16, r0
 8003988:	4b9f      	ldr	r3, [pc, #636]	; (8003c08 <_printf_float+0x2dc>)
 800398a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800398e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003992:	f7fd f8ab 	bl	8000aec <__aeabi_dcmpun>
 8003996:	bb88      	cbnz	r0, 80039fc <_printf_float+0xd0>
 8003998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800399c:	4b9a      	ldr	r3, [pc, #616]	; (8003c08 <_printf_float+0x2dc>)
 800399e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039a2:	f7fd f885 	bl	8000ab0 <__aeabi_dcmple>
 80039a6:	bb48      	cbnz	r0, 80039fc <_printf_float+0xd0>
 80039a8:	2200      	movs	r2, #0
 80039aa:	2300      	movs	r3, #0
 80039ac:	4640      	mov	r0, r8
 80039ae:	4649      	mov	r1, r9
 80039b0:	f7fd f874 	bl	8000a9c <__aeabi_dcmplt>
 80039b4:	b110      	cbz	r0, 80039bc <_printf_float+0x90>
 80039b6:	232d      	movs	r3, #45	; 0x2d
 80039b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039bc:	4b93      	ldr	r3, [pc, #588]	; (8003c0c <_printf_float+0x2e0>)
 80039be:	4894      	ldr	r0, [pc, #592]	; (8003c10 <_printf_float+0x2e4>)
 80039c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80039c4:	bf94      	ite	ls
 80039c6:	4698      	movls	r8, r3
 80039c8:	4680      	movhi	r8, r0
 80039ca:	2303      	movs	r3, #3
 80039cc:	6123      	str	r3, [r4, #16]
 80039ce:	9b05      	ldr	r3, [sp, #20]
 80039d0:	f023 0204 	bic.w	r2, r3, #4
 80039d4:	6022      	str	r2, [r4, #0]
 80039d6:	f04f 0900 	mov.w	r9, #0
 80039da:	9700      	str	r7, [sp, #0]
 80039dc:	4633      	mov	r3, r6
 80039de:	aa0b      	add	r2, sp, #44	; 0x2c
 80039e0:	4621      	mov	r1, r4
 80039e2:	4628      	mov	r0, r5
 80039e4:	f000 f9d8 	bl	8003d98 <_printf_common>
 80039e8:	3001      	adds	r0, #1
 80039ea:	f040 8090 	bne.w	8003b0e <_printf_float+0x1e2>
 80039ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039f2:	b00d      	add	sp, #52	; 0x34
 80039f4:	ecbd 8b02 	vpop	{d8}
 80039f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	4640      	mov	r0, r8
 8003a02:	4649      	mov	r1, r9
 8003a04:	f7fd f872 	bl	8000aec <__aeabi_dcmpun>
 8003a08:	b140      	cbz	r0, 8003a1c <_printf_float+0xf0>
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bfbc      	itt	lt
 8003a10:	232d      	movlt	r3, #45	; 0x2d
 8003a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a16:	487f      	ldr	r0, [pc, #508]	; (8003c14 <_printf_float+0x2e8>)
 8003a18:	4b7f      	ldr	r3, [pc, #508]	; (8003c18 <_printf_float+0x2ec>)
 8003a1a:	e7d1      	b.n	80039c0 <_printf_float+0x94>
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003a22:	9206      	str	r2, [sp, #24]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	d13f      	bne.n	8003aa8 <_printf_float+0x17c>
 8003a28:	2306      	movs	r3, #6
 8003a2a:	6063      	str	r3, [r4, #4]
 8003a2c:	9b05      	ldr	r3, [sp, #20]
 8003a2e:	6861      	ldr	r1, [r4, #4]
 8003a30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a34:	2300      	movs	r3, #0
 8003a36:	9303      	str	r3, [sp, #12]
 8003a38:	ab0a      	add	r3, sp, #40	; 0x28
 8003a3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003a3e:	ab09      	add	r3, sp, #36	; 0x24
 8003a40:	ec49 8b10 	vmov	d0, r8, r9
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	6022      	str	r2, [r4, #0]
 8003a48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f7ff fecd 	bl	80037ec <__cvt>
 8003a52:	9b06      	ldr	r3, [sp, #24]
 8003a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a56:	2b47      	cmp	r3, #71	; 0x47
 8003a58:	4680      	mov	r8, r0
 8003a5a:	d108      	bne.n	8003a6e <_printf_float+0x142>
 8003a5c:	1cc8      	adds	r0, r1, #3
 8003a5e:	db02      	blt.n	8003a66 <_printf_float+0x13a>
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	4299      	cmp	r1, r3
 8003a64:	dd41      	ble.n	8003aea <_printf_float+0x1be>
 8003a66:	f1ab 0b02 	sub.w	fp, fp, #2
 8003a6a:	fa5f fb8b 	uxtb.w	fp, fp
 8003a6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a72:	d820      	bhi.n	8003ab6 <_printf_float+0x18a>
 8003a74:	3901      	subs	r1, #1
 8003a76:	465a      	mov	r2, fp
 8003a78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a7c:	9109      	str	r1, [sp, #36]	; 0x24
 8003a7e:	f7ff ff17 	bl	80038b0 <__exponent>
 8003a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a84:	1813      	adds	r3, r2, r0
 8003a86:	2a01      	cmp	r2, #1
 8003a88:	4681      	mov	r9, r0
 8003a8a:	6123      	str	r3, [r4, #16]
 8003a8c:	dc02      	bgt.n	8003a94 <_printf_float+0x168>
 8003a8e:	6822      	ldr	r2, [r4, #0]
 8003a90:	07d2      	lsls	r2, r2, #31
 8003a92:	d501      	bpl.n	8003a98 <_printf_float+0x16c>
 8003a94:	3301      	adds	r3, #1
 8003a96:	6123      	str	r3, [r4, #16]
 8003a98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d09c      	beq.n	80039da <_printf_float+0xae>
 8003aa0:	232d      	movs	r3, #45	; 0x2d
 8003aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa6:	e798      	b.n	80039da <_printf_float+0xae>
 8003aa8:	9a06      	ldr	r2, [sp, #24]
 8003aaa:	2a47      	cmp	r2, #71	; 0x47
 8003aac:	d1be      	bne.n	8003a2c <_printf_float+0x100>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1bc      	bne.n	8003a2c <_printf_float+0x100>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e7b9      	b.n	8003a2a <_printf_float+0xfe>
 8003ab6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003aba:	d118      	bne.n	8003aee <_printf_float+0x1c2>
 8003abc:	2900      	cmp	r1, #0
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	dd0b      	ble.n	8003ada <_printf_float+0x1ae>
 8003ac2:	6121      	str	r1, [r4, #16]
 8003ac4:	b913      	cbnz	r3, 8003acc <_printf_float+0x1a0>
 8003ac6:	6822      	ldr	r2, [r4, #0]
 8003ac8:	07d0      	lsls	r0, r2, #31
 8003aca:	d502      	bpl.n	8003ad2 <_printf_float+0x1a6>
 8003acc:	3301      	adds	r3, #1
 8003ace:	440b      	add	r3, r1
 8003ad0:	6123      	str	r3, [r4, #16]
 8003ad2:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ad4:	f04f 0900 	mov.w	r9, #0
 8003ad8:	e7de      	b.n	8003a98 <_printf_float+0x16c>
 8003ada:	b913      	cbnz	r3, 8003ae2 <_printf_float+0x1b6>
 8003adc:	6822      	ldr	r2, [r4, #0]
 8003ade:	07d2      	lsls	r2, r2, #31
 8003ae0:	d501      	bpl.n	8003ae6 <_printf_float+0x1ba>
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	e7f4      	b.n	8003ad0 <_printf_float+0x1a4>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e7f2      	b.n	8003ad0 <_printf_float+0x1a4>
 8003aea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003af0:	4299      	cmp	r1, r3
 8003af2:	db05      	blt.n	8003b00 <_printf_float+0x1d4>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	6121      	str	r1, [r4, #16]
 8003af8:	07d8      	lsls	r0, r3, #31
 8003afa:	d5ea      	bpl.n	8003ad2 <_printf_float+0x1a6>
 8003afc:	1c4b      	adds	r3, r1, #1
 8003afe:	e7e7      	b.n	8003ad0 <_printf_float+0x1a4>
 8003b00:	2900      	cmp	r1, #0
 8003b02:	bfd4      	ite	le
 8003b04:	f1c1 0202 	rsble	r2, r1, #2
 8003b08:	2201      	movgt	r2, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	e7e0      	b.n	8003ad0 <_printf_float+0x1a4>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	055a      	lsls	r2, r3, #21
 8003b12:	d407      	bmi.n	8003b24 <_printf_float+0x1f8>
 8003b14:	6923      	ldr	r3, [r4, #16]
 8003b16:	4642      	mov	r2, r8
 8003b18:	4631      	mov	r1, r6
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	47b8      	blx	r7
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d12c      	bne.n	8003b7c <_printf_float+0x250>
 8003b22:	e764      	b.n	80039ee <_printf_float+0xc2>
 8003b24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b28:	f240 80e0 	bls.w	8003cec <_printf_float+0x3c0>
 8003b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b30:	2200      	movs	r2, #0
 8003b32:	2300      	movs	r3, #0
 8003b34:	f7fc ffa8 	bl	8000a88 <__aeabi_dcmpeq>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d034      	beq.n	8003ba6 <_printf_float+0x27a>
 8003b3c:	4a37      	ldr	r2, [pc, #220]	; (8003c1c <_printf_float+0x2f0>)
 8003b3e:	2301      	movs	r3, #1
 8003b40:	4631      	mov	r1, r6
 8003b42:	4628      	mov	r0, r5
 8003b44:	47b8      	blx	r7
 8003b46:	3001      	adds	r0, #1
 8003b48:	f43f af51 	beq.w	80039ee <_printf_float+0xc2>
 8003b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b50:	429a      	cmp	r2, r3
 8003b52:	db02      	blt.n	8003b5a <_printf_float+0x22e>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	07d8      	lsls	r0, r3, #31
 8003b58:	d510      	bpl.n	8003b7c <_printf_float+0x250>
 8003b5a:	ee18 3a10 	vmov	r3, s16
 8003b5e:	4652      	mov	r2, sl
 8003b60:	4631      	mov	r1, r6
 8003b62:	4628      	mov	r0, r5
 8003b64:	47b8      	blx	r7
 8003b66:	3001      	adds	r0, #1
 8003b68:	f43f af41 	beq.w	80039ee <_printf_float+0xc2>
 8003b6c:	f04f 0800 	mov.w	r8, #0
 8003b70:	f104 091a 	add.w	r9, r4, #26
 8003b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b76:	3b01      	subs	r3, #1
 8003b78:	4543      	cmp	r3, r8
 8003b7a:	dc09      	bgt.n	8003b90 <_printf_float+0x264>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	079b      	lsls	r3, r3, #30
 8003b80:	f100 8105 	bmi.w	8003d8e <_printf_float+0x462>
 8003b84:	68e0      	ldr	r0, [r4, #12]
 8003b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b88:	4298      	cmp	r0, r3
 8003b8a:	bfb8      	it	lt
 8003b8c:	4618      	movlt	r0, r3
 8003b8e:	e730      	b.n	80039f2 <_printf_float+0xc6>
 8003b90:	2301      	movs	r3, #1
 8003b92:	464a      	mov	r2, r9
 8003b94:	4631      	mov	r1, r6
 8003b96:	4628      	mov	r0, r5
 8003b98:	47b8      	blx	r7
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	f43f af27 	beq.w	80039ee <_printf_float+0xc2>
 8003ba0:	f108 0801 	add.w	r8, r8, #1
 8003ba4:	e7e6      	b.n	8003b74 <_printf_float+0x248>
 8003ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	dc39      	bgt.n	8003c20 <_printf_float+0x2f4>
 8003bac:	4a1b      	ldr	r2, [pc, #108]	; (8003c1c <_printf_float+0x2f0>)
 8003bae:	2301      	movs	r3, #1
 8003bb0:	4631      	mov	r1, r6
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	47b8      	blx	r7
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	f43f af19 	beq.w	80039ee <_printf_float+0xc2>
 8003bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	d102      	bne.n	8003bca <_printf_float+0x29e>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	07d9      	lsls	r1, r3, #31
 8003bc8:	d5d8      	bpl.n	8003b7c <_printf_float+0x250>
 8003bca:	ee18 3a10 	vmov	r3, s16
 8003bce:	4652      	mov	r2, sl
 8003bd0:	4631      	mov	r1, r6
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	47b8      	blx	r7
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	f43f af09 	beq.w	80039ee <_printf_float+0xc2>
 8003bdc:	f04f 0900 	mov.w	r9, #0
 8003be0:	f104 0a1a 	add.w	sl, r4, #26
 8003be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be6:	425b      	negs	r3, r3
 8003be8:	454b      	cmp	r3, r9
 8003bea:	dc01      	bgt.n	8003bf0 <_printf_float+0x2c4>
 8003bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bee:	e792      	b.n	8003b16 <_printf_float+0x1ea>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4652      	mov	r2, sl
 8003bf4:	4631      	mov	r1, r6
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	47b8      	blx	r7
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	f43f aef7 	beq.w	80039ee <_printf_float+0xc2>
 8003c00:	f109 0901 	add.w	r9, r9, #1
 8003c04:	e7ee      	b.n	8003be4 <_printf_float+0x2b8>
 8003c06:	bf00      	nop
 8003c08:	7fefffff 	.word	0x7fefffff
 8003c0c:	08006ebc 	.word	0x08006ebc
 8003c10:	08006ec0 	.word	0x08006ec0
 8003c14:	08006ec8 	.word	0x08006ec8
 8003c18:	08006ec4 	.word	0x08006ec4
 8003c1c:	08006ecc 	.word	0x08006ecc
 8003c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c24:	429a      	cmp	r2, r3
 8003c26:	bfa8      	it	ge
 8003c28:	461a      	movge	r2, r3
 8003c2a:	2a00      	cmp	r2, #0
 8003c2c:	4691      	mov	r9, r2
 8003c2e:	dc37      	bgt.n	8003ca0 <_printf_float+0x374>
 8003c30:	f04f 0b00 	mov.w	fp, #0
 8003c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c38:	f104 021a 	add.w	r2, r4, #26
 8003c3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c3e:	9305      	str	r3, [sp, #20]
 8003c40:	eba3 0309 	sub.w	r3, r3, r9
 8003c44:	455b      	cmp	r3, fp
 8003c46:	dc33      	bgt.n	8003cb0 <_printf_float+0x384>
 8003c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	db3b      	blt.n	8003cc8 <_printf_float+0x39c>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	07da      	lsls	r2, r3, #31
 8003c54:	d438      	bmi.n	8003cc8 <_printf_float+0x39c>
 8003c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c58:	9a05      	ldr	r2, [sp, #20]
 8003c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c5c:	1a9a      	subs	r2, r3, r2
 8003c5e:	eba3 0901 	sub.w	r9, r3, r1
 8003c62:	4591      	cmp	r9, r2
 8003c64:	bfa8      	it	ge
 8003c66:	4691      	movge	r9, r2
 8003c68:	f1b9 0f00 	cmp.w	r9, #0
 8003c6c:	dc35      	bgt.n	8003cda <_printf_float+0x3ae>
 8003c6e:	f04f 0800 	mov.w	r8, #0
 8003c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c76:	f104 0a1a 	add.w	sl, r4, #26
 8003c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	eba3 0309 	sub.w	r3, r3, r9
 8003c84:	4543      	cmp	r3, r8
 8003c86:	f77f af79 	ble.w	8003b7c <_printf_float+0x250>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	4652      	mov	r2, sl
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4628      	mov	r0, r5
 8003c92:	47b8      	blx	r7
 8003c94:	3001      	adds	r0, #1
 8003c96:	f43f aeaa 	beq.w	80039ee <_printf_float+0xc2>
 8003c9a:	f108 0801 	add.w	r8, r8, #1
 8003c9e:	e7ec      	b.n	8003c7a <_printf_float+0x34e>
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	47b8      	blx	r7
 8003caa:	3001      	adds	r0, #1
 8003cac:	d1c0      	bne.n	8003c30 <_printf_float+0x304>
 8003cae:	e69e      	b.n	80039ee <_printf_float+0xc2>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	9205      	str	r2, [sp, #20]
 8003cb8:	47b8      	blx	r7
 8003cba:	3001      	adds	r0, #1
 8003cbc:	f43f ae97 	beq.w	80039ee <_printf_float+0xc2>
 8003cc0:	9a05      	ldr	r2, [sp, #20]
 8003cc2:	f10b 0b01 	add.w	fp, fp, #1
 8003cc6:	e7b9      	b.n	8003c3c <_printf_float+0x310>
 8003cc8:	ee18 3a10 	vmov	r3, s16
 8003ccc:	4652      	mov	r2, sl
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	47b8      	blx	r7
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d1be      	bne.n	8003c56 <_printf_float+0x32a>
 8003cd8:	e689      	b.n	80039ee <_printf_float+0xc2>
 8003cda:	9a05      	ldr	r2, [sp, #20]
 8003cdc:	464b      	mov	r3, r9
 8003cde:	4442      	add	r2, r8
 8003ce0:	4631      	mov	r1, r6
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	47b8      	blx	r7
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d1c1      	bne.n	8003c6e <_printf_float+0x342>
 8003cea:	e680      	b.n	80039ee <_printf_float+0xc2>
 8003cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cee:	2a01      	cmp	r2, #1
 8003cf0:	dc01      	bgt.n	8003cf6 <_printf_float+0x3ca>
 8003cf2:	07db      	lsls	r3, r3, #31
 8003cf4:	d538      	bpl.n	8003d68 <_printf_float+0x43c>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	4631      	mov	r1, r6
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	47b8      	blx	r7
 8003d00:	3001      	adds	r0, #1
 8003d02:	f43f ae74 	beq.w	80039ee <_printf_float+0xc2>
 8003d06:	ee18 3a10 	vmov	r3, s16
 8003d0a:	4652      	mov	r2, sl
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	4628      	mov	r0, r5
 8003d10:	47b8      	blx	r7
 8003d12:	3001      	adds	r0, #1
 8003d14:	f43f ae6b 	beq.w	80039ee <_printf_float+0xc2>
 8003d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f7fc feb2 	bl	8000a88 <__aeabi_dcmpeq>
 8003d24:	b9d8      	cbnz	r0, 8003d5e <_printf_float+0x432>
 8003d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d28:	f108 0201 	add.w	r2, r8, #1
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	4631      	mov	r1, r6
 8003d30:	4628      	mov	r0, r5
 8003d32:	47b8      	blx	r7
 8003d34:	3001      	adds	r0, #1
 8003d36:	d10e      	bne.n	8003d56 <_printf_float+0x42a>
 8003d38:	e659      	b.n	80039ee <_printf_float+0xc2>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	4652      	mov	r2, sl
 8003d3e:	4631      	mov	r1, r6
 8003d40:	4628      	mov	r0, r5
 8003d42:	47b8      	blx	r7
 8003d44:	3001      	adds	r0, #1
 8003d46:	f43f ae52 	beq.w	80039ee <_printf_float+0xc2>
 8003d4a:	f108 0801 	add.w	r8, r8, #1
 8003d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d50:	3b01      	subs	r3, #1
 8003d52:	4543      	cmp	r3, r8
 8003d54:	dcf1      	bgt.n	8003d3a <_printf_float+0x40e>
 8003d56:	464b      	mov	r3, r9
 8003d58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d5c:	e6dc      	b.n	8003b18 <_printf_float+0x1ec>
 8003d5e:	f04f 0800 	mov.w	r8, #0
 8003d62:	f104 0a1a 	add.w	sl, r4, #26
 8003d66:	e7f2      	b.n	8003d4e <_printf_float+0x422>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	4642      	mov	r2, r8
 8003d6c:	e7df      	b.n	8003d2e <_printf_float+0x402>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	464a      	mov	r2, r9
 8003d72:	4631      	mov	r1, r6
 8003d74:	4628      	mov	r0, r5
 8003d76:	47b8      	blx	r7
 8003d78:	3001      	adds	r0, #1
 8003d7a:	f43f ae38 	beq.w	80039ee <_printf_float+0xc2>
 8003d7e:	f108 0801 	add.w	r8, r8, #1
 8003d82:	68e3      	ldr	r3, [r4, #12]
 8003d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d86:	1a5b      	subs	r3, r3, r1
 8003d88:	4543      	cmp	r3, r8
 8003d8a:	dcf0      	bgt.n	8003d6e <_printf_float+0x442>
 8003d8c:	e6fa      	b.n	8003b84 <_printf_float+0x258>
 8003d8e:	f04f 0800 	mov.w	r8, #0
 8003d92:	f104 0919 	add.w	r9, r4, #25
 8003d96:	e7f4      	b.n	8003d82 <_printf_float+0x456>

08003d98 <_printf_common>:
 8003d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d9c:	4616      	mov	r6, r2
 8003d9e:	4699      	mov	r9, r3
 8003da0:	688a      	ldr	r2, [r1, #8]
 8003da2:	690b      	ldr	r3, [r1, #16]
 8003da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003da8:	4293      	cmp	r3, r2
 8003daa:	bfb8      	it	lt
 8003dac:	4613      	movlt	r3, r2
 8003dae:	6033      	str	r3, [r6, #0]
 8003db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003db4:	4607      	mov	r7, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	b10a      	cbz	r2, 8003dbe <_printf_common+0x26>
 8003dba:	3301      	adds	r3, #1
 8003dbc:	6033      	str	r3, [r6, #0]
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	0699      	lsls	r1, r3, #26
 8003dc2:	bf42      	ittt	mi
 8003dc4:	6833      	ldrmi	r3, [r6, #0]
 8003dc6:	3302      	addmi	r3, #2
 8003dc8:	6033      	strmi	r3, [r6, #0]
 8003dca:	6825      	ldr	r5, [r4, #0]
 8003dcc:	f015 0506 	ands.w	r5, r5, #6
 8003dd0:	d106      	bne.n	8003de0 <_printf_common+0x48>
 8003dd2:	f104 0a19 	add.w	sl, r4, #25
 8003dd6:	68e3      	ldr	r3, [r4, #12]
 8003dd8:	6832      	ldr	r2, [r6, #0]
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	42ab      	cmp	r3, r5
 8003dde:	dc26      	bgt.n	8003e2e <_printf_common+0x96>
 8003de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003de4:	1e13      	subs	r3, r2, #0
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	bf18      	it	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	0692      	lsls	r2, r2, #26
 8003dee:	d42b      	bmi.n	8003e48 <_printf_common+0xb0>
 8003df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df4:	4649      	mov	r1, r9
 8003df6:	4638      	mov	r0, r7
 8003df8:	47c0      	blx	r8
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	d01e      	beq.n	8003e3c <_printf_common+0xa4>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	68e5      	ldr	r5, [r4, #12]
 8003e02:	6832      	ldr	r2, [r6, #0]
 8003e04:	f003 0306 	and.w	r3, r3, #6
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	bf08      	it	eq
 8003e0c:	1aad      	subeq	r5, r5, r2
 8003e0e:	68a3      	ldr	r3, [r4, #8]
 8003e10:	6922      	ldr	r2, [r4, #16]
 8003e12:	bf0c      	ite	eq
 8003e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e18:	2500      	movne	r5, #0
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	bfc4      	itt	gt
 8003e1e:	1a9b      	subgt	r3, r3, r2
 8003e20:	18ed      	addgt	r5, r5, r3
 8003e22:	2600      	movs	r6, #0
 8003e24:	341a      	adds	r4, #26
 8003e26:	42b5      	cmp	r5, r6
 8003e28:	d11a      	bne.n	8003e60 <_printf_common+0xc8>
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	e008      	b.n	8003e40 <_printf_common+0xa8>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4652      	mov	r2, sl
 8003e32:	4649      	mov	r1, r9
 8003e34:	4638      	mov	r0, r7
 8003e36:	47c0      	blx	r8
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d103      	bne.n	8003e44 <_printf_common+0xac>
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e44:	3501      	adds	r5, #1
 8003e46:	e7c6      	b.n	8003dd6 <_printf_common+0x3e>
 8003e48:	18e1      	adds	r1, r4, r3
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	2030      	movs	r0, #48	; 0x30
 8003e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e52:	4422      	add	r2, r4
 8003e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	e7c7      	b.n	8003df0 <_printf_common+0x58>
 8003e60:	2301      	movs	r3, #1
 8003e62:	4622      	mov	r2, r4
 8003e64:	4649      	mov	r1, r9
 8003e66:	4638      	mov	r0, r7
 8003e68:	47c0      	blx	r8
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d0e6      	beq.n	8003e3c <_printf_common+0xa4>
 8003e6e:	3601      	adds	r6, #1
 8003e70:	e7d9      	b.n	8003e26 <_printf_common+0x8e>
	...

08003e74 <_printf_i>:
 8003e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e78:	7e0f      	ldrb	r7, [r1, #24]
 8003e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e7c:	2f78      	cmp	r7, #120	; 0x78
 8003e7e:	4691      	mov	r9, r2
 8003e80:	4680      	mov	r8, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	469a      	mov	sl, r3
 8003e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e8a:	d807      	bhi.n	8003e9c <_printf_i+0x28>
 8003e8c:	2f62      	cmp	r7, #98	; 0x62
 8003e8e:	d80a      	bhi.n	8003ea6 <_printf_i+0x32>
 8003e90:	2f00      	cmp	r7, #0
 8003e92:	f000 80d8 	beq.w	8004046 <_printf_i+0x1d2>
 8003e96:	2f58      	cmp	r7, #88	; 0x58
 8003e98:	f000 80a3 	beq.w	8003fe2 <_printf_i+0x16e>
 8003e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea4:	e03a      	b.n	8003f1c <_printf_i+0xa8>
 8003ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eaa:	2b15      	cmp	r3, #21
 8003eac:	d8f6      	bhi.n	8003e9c <_printf_i+0x28>
 8003eae:	a101      	add	r1, pc, #4	; (adr r1, 8003eb4 <_printf_i+0x40>)
 8003eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb4:	08003f0d 	.word	0x08003f0d
 8003eb8:	08003f21 	.word	0x08003f21
 8003ebc:	08003e9d 	.word	0x08003e9d
 8003ec0:	08003e9d 	.word	0x08003e9d
 8003ec4:	08003e9d 	.word	0x08003e9d
 8003ec8:	08003e9d 	.word	0x08003e9d
 8003ecc:	08003f21 	.word	0x08003f21
 8003ed0:	08003e9d 	.word	0x08003e9d
 8003ed4:	08003e9d 	.word	0x08003e9d
 8003ed8:	08003e9d 	.word	0x08003e9d
 8003edc:	08003e9d 	.word	0x08003e9d
 8003ee0:	0800402d 	.word	0x0800402d
 8003ee4:	08003f51 	.word	0x08003f51
 8003ee8:	0800400f 	.word	0x0800400f
 8003eec:	08003e9d 	.word	0x08003e9d
 8003ef0:	08003e9d 	.word	0x08003e9d
 8003ef4:	0800404f 	.word	0x0800404f
 8003ef8:	08003e9d 	.word	0x08003e9d
 8003efc:	08003f51 	.word	0x08003f51
 8003f00:	08003e9d 	.word	0x08003e9d
 8003f04:	08003e9d 	.word	0x08003e9d
 8003f08:	08004017 	.word	0x08004017
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	1d1a      	adds	r2, r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0a3      	b.n	8004068 <_printf_i+0x1f4>
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	6829      	ldr	r1, [r5, #0]
 8003f24:	0606      	lsls	r6, r0, #24
 8003f26:	f101 0304 	add.w	r3, r1, #4
 8003f2a:	d50a      	bpl.n	8003f42 <_printf_i+0xce>
 8003f2c:	680e      	ldr	r6, [r1, #0]
 8003f2e:	602b      	str	r3, [r5, #0]
 8003f30:	2e00      	cmp	r6, #0
 8003f32:	da03      	bge.n	8003f3c <_printf_i+0xc8>
 8003f34:	232d      	movs	r3, #45	; 0x2d
 8003f36:	4276      	negs	r6, r6
 8003f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f3c:	485e      	ldr	r0, [pc, #376]	; (80040b8 <_printf_i+0x244>)
 8003f3e:	230a      	movs	r3, #10
 8003f40:	e019      	b.n	8003f76 <_printf_i+0x102>
 8003f42:	680e      	ldr	r6, [r1, #0]
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f4a:	bf18      	it	ne
 8003f4c:	b236      	sxthne	r6, r6
 8003f4e:	e7ef      	b.n	8003f30 <_printf_i+0xbc>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	1d19      	adds	r1, r3, #4
 8003f56:	6029      	str	r1, [r5, #0]
 8003f58:	0601      	lsls	r1, r0, #24
 8003f5a:	d501      	bpl.n	8003f60 <_printf_i+0xec>
 8003f5c:	681e      	ldr	r6, [r3, #0]
 8003f5e:	e002      	b.n	8003f66 <_printf_i+0xf2>
 8003f60:	0646      	lsls	r6, r0, #25
 8003f62:	d5fb      	bpl.n	8003f5c <_printf_i+0xe8>
 8003f64:	881e      	ldrh	r6, [r3, #0]
 8003f66:	4854      	ldr	r0, [pc, #336]	; (80040b8 <_printf_i+0x244>)
 8003f68:	2f6f      	cmp	r7, #111	; 0x6f
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2308      	moveq	r3, #8
 8003f6e:	230a      	movne	r3, #10
 8003f70:	2100      	movs	r1, #0
 8003f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f76:	6865      	ldr	r5, [r4, #4]
 8003f78:	60a5      	str	r5, [r4, #8]
 8003f7a:	2d00      	cmp	r5, #0
 8003f7c:	bfa2      	ittt	ge
 8003f7e:	6821      	ldrge	r1, [r4, #0]
 8003f80:	f021 0104 	bicge.w	r1, r1, #4
 8003f84:	6021      	strge	r1, [r4, #0]
 8003f86:	b90e      	cbnz	r6, 8003f8c <_printf_i+0x118>
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	d04d      	beq.n	8004028 <_printf_i+0x1b4>
 8003f8c:	4615      	mov	r5, r2
 8003f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f92:	fb03 6711 	mls	r7, r3, r1, r6
 8003f96:	5dc7      	ldrb	r7, [r0, r7]
 8003f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f9c:	4637      	mov	r7, r6
 8003f9e:	42bb      	cmp	r3, r7
 8003fa0:	460e      	mov	r6, r1
 8003fa2:	d9f4      	bls.n	8003f8e <_printf_i+0x11a>
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d10b      	bne.n	8003fc0 <_printf_i+0x14c>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	07de      	lsls	r6, r3, #31
 8003fac:	d508      	bpl.n	8003fc0 <_printf_i+0x14c>
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	6861      	ldr	r1, [r4, #4]
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	bfde      	ittt	le
 8003fb6:	2330      	movle	r3, #48	; 0x30
 8003fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fbc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fc0:	1b52      	subs	r2, r2, r5
 8003fc2:	6122      	str	r2, [r4, #16]
 8003fc4:	f8cd a000 	str.w	sl, [sp]
 8003fc8:	464b      	mov	r3, r9
 8003fca:	aa03      	add	r2, sp, #12
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4640      	mov	r0, r8
 8003fd0:	f7ff fee2 	bl	8003d98 <_printf_common>
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d14c      	bne.n	8004072 <_printf_i+0x1fe>
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fdc:	b004      	add	sp, #16
 8003fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe2:	4835      	ldr	r0, [pc, #212]	; (80040b8 <_printf_i+0x244>)
 8003fe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fe8:	6829      	ldr	r1, [r5, #0]
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ff0:	6029      	str	r1, [r5, #0]
 8003ff2:	061d      	lsls	r5, r3, #24
 8003ff4:	d514      	bpl.n	8004020 <_printf_i+0x1ac>
 8003ff6:	07df      	lsls	r7, r3, #31
 8003ff8:	bf44      	itt	mi
 8003ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffe:	6023      	strmi	r3, [r4, #0]
 8004000:	b91e      	cbnz	r6, 800400a <_printf_i+0x196>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	f023 0320 	bic.w	r3, r3, #32
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	2310      	movs	r3, #16
 800400c:	e7b0      	b.n	8003f70 <_printf_i+0xfc>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	f043 0320 	orr.w	r3, r3, #32
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	2378      	movs	r3, #120	; 0x78
 8004018:	4828      	ldr	r0, [pc, #160]	; (80040bc <_printf_i+0x248>)
 800401a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800401e:	e7e3      	b.n	8003fe8 <_printf_i+0x174>
 8004020:	0659      	lsls	r1, r3, #25
 8004022:	bf48      	it	mi
 8004024:	b2b6      	uxthmi	r6, r6
 8004026:	e7e6      	b.n	8003ff6 <_printf_i+0x182>
 8004028:	4615      	mov	r5, r2
 800402a:	e7bb      	b.n	8003fa4 <_printf_i+0x130>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	6826      	ldr	r6, [r4, #0]
 8004030:	6961      	ldr	r1, [r4, #20]
 8004032:	1d18      	adds	r0, r3, #4
 8004034:	6028      	str	r0, [r5, #0]
 8004036:	0635      	lsls	r5, r6, #24
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	d501      	bpl.n	8004040 <_printf_i+0x1cc>
 800403c:	6019      	str	r1, [r3, #0]
 800403e:	e002      	b.n	8004046 <_printf_i+0x1d2>
 8004040:	0670      	lsls	r0, r6, #25
 8004042:	d5fb      	bpl.n	800403c <_printf_i+0x1c8>
 8004044:	8019      	strh	r1, [r3, #0]
 8004046:	2300      	movs	r3, #0
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	4615      	mov	r5, r2
 800404c:	e7ba      	b.n	8003fc4 <_printf_i+0x150>
 800404e:	682b      	ldr	r3, [r5, #0]
 8004050:	1d1a      	adds	r2, r3, #4
 8004052:	602a      	str	r2, [r5, #0]
 8004054:	681d      	ldr	r5, [r3, #0]
 8004056:	6862      	ldr	r2, [r4, #4]
 8004058:	2100      	movs	r1, #0
 800405a:	4628      	mov	r0, r5
 800405c:	f7fc f8a0 	bl	80001a0 <memchr>
 8004060:	b108      	cbz	r0, 8004066 <_printf_i+0x1f2>
 8004062:	1b40      	subs	r0, r0, r5
 8004064:	6060      	str	r0, [r4, #4]
 8004066:	6863      	ldr	r3, [r4, #4]
 8004068:	6123      	str	r3, [r4, #16]
 800406a:	2300      	movs	r3, #0
 800406c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004070:	e7a8      	b.n	8003fc4 <_printf_i+0x150>
 8004072:	6923      	ldr	r3, [r4, #16]
 8004074:	462a      	mov	r2, r5
 8004076:	4649      	mov	r1, r9
 8004078:	4640      	mov	r0, r8
 800407a:	47d0      	blx	sl
 800407c:	3001      	adds	r0, #1
 800407e:	d0ab      	beq.n	8003fd8 <_printf_i+0x164>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	079b      	lsls	r3, r3, #30
 8004084:	d413      	bmi.n	80040ae <_printf_i+0x23a>
 8004086:	68e0      	ldr	r0, [r4, #12]
 8004088:	9b03      	ldr	r3, [sp, #12]
 800408a:	4298      	cmp	r0, r3
 800408c:	bfb8      	it	lt
 800408e:	4618      	movlt	r0, r3
 8004090:	e7a4      	b.n	8003fdc <_printf_i+0x168>
 8004092:	2301      	movs	r3, #1
 8004094:	4632      	mov	r2, r6
 8004096:	4649      	mov	r1, r9
 8004098:	4640      	mov	r0, r8
 800409a:	47d0      	blx	sl
 800409c:	3001      	adds	r0, #1
 800409e:	d09b      	beq.n	8003fd8 <_printf_i+0x164>
 80040a0:	3501      	adds	r5, #1
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	9903      	ldr	r1, [sp, #12]
 80040a6:	1a5b      	subs	r3, r3, r1
 80040a8:	42ab      	cmp	r3, r5
 80040aa:	dcf2      	bgt.n	8004092 <_printf_i+0x21e>
 80040ac:	e7eb      	b.n	8004086 <_printf_i+0x212>
 80040ae:	2500      	movs	r5, #0
 80040b0:	f104 0619 	add.w	r6, r4, #25
 80040b4:	e7f5      	b.n	80040a2 <_printf_i+0x22e>
 80040b6:	bf00      	nop
 80040b8:	08006ece 	.word	0x08006ece
 80040bc:	08006edf 	.word	0x08006edf

080040c0 <__sfputc_r>:
 80040c0:	6893      	ldr	r3, [r2, #8]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	b410      	push	{r4}
 80040c8:	6093      	str	r3, [r2, #8]
 80040ca:	da08      	bge.n	80040de <__sfputc_r+0x1e>
 80040cc:	6994      	ldr	r4, [r2, #24]
 80040ce:	42a3      	cmp	r3, r4
 80040d0:	db01      	blt.n	80040d6 <__sfputc_r+0x16>
 80040d2:	290a      	cmp	r1, #10
 80040d4:	d103      	bne.n	80040de <__sfputc_r+0x1e>
 80040d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040da:	f000 b9d1 	b.w	8004480 <__swbuf_r>
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	1c58      	adds	r0, r3, #1
 80040e2:	6010      	str	r0, [r2, #0]
 80040e4:	7019      	strb	r1, [r3, #0]
 80040e6:	4608      	mov	r0, r1
 80040e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <__sfputs_r>:
 80040ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f0:	4606      	mov	r6, r0
 80040f2:	460f      	mov	r7, r1
 80040f4:	4614      	mov	r4, r2
 80040f6:	18d5      	adds	r5, r2, r3
 80040f8:	42ac      	cmp	r4, r5
 80040fa:	d101      	bne.n	8004100 <__sfputs_r+0x12>
 80040fc:	2000      	movs	r0, #0
 80040fe:	e007      	b.n	8004110 <__sfputs_r+0x22>
 8004100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004104:	463a      	mov	r2, r7
 8004106:	4630      	mov	r0, r6
 8004108:	f7ff ffda 	bl	80040c0 <__sfputc_r>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d1f3      	bne.n	80040f8 <__sfputs_r+0xa>
 8004110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004114 <_vfiprintf_r>:
 8004114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004118:	460d      	mov	r5, r1
 800411a:	b09d      	sub	sp, #116	; 0x74
 800411c:	4614      	mov	r4, r2
 800411e:	4698      	mov	r8, r3
 8004120:	4606      	mov	r6, r0
 8004122:	b118      	cbz	r0, 800412c <_vfiprintf_r+0x18>
 8004124:	6983      	ldr	r3, [r0, #24]
 8004126:	b90b      	cbnz	r3, 800412c <_vfiprintf_r+0x18>
 8004128:	f001 fa06 	bl	8005538 <__sinit>
 800412c:	4b89      	ldr	r3, [pc, #548]	; (8004354 <_vfiprintf_r+0x240>)
 800412e:	429d      	cmp	r5, r3
 8004130:	d11b      	bne.n	800416a <_vfiprintf_r+0x56>
 8004132:	6875      	ldr	r5, [r6, #4]
 8004134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004136:	07d9      	lsls	r1, r3, #31
 8004138:	d405      	bmi.n	8004146 <_vfiprintf_r+0x32>
 800413a:	89ab      	ldrh	r3, [r5, #12]
 800413c:	059a      	lsls	r2, r3, #22
 800413e:	d402      	bmi.n	8004146 <_vfiprintf_r+0x32>
 8004140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004142:	f7ff fa9a 	bl	800367a <__retarget_lock_acquire_recursive>
 8004146:	89ab      	ldrh	r3, [r5, #12]
 8004148:	071b      	lsls	r3, r3, #28
 800414a:	d501      	bpl.n	8004150 <_vfiprintf_r+0x3c>
 800414c:	692b      	ldr	r3, [r5, #16]
 800414e:	b9eb      	cbnz	r3, 800418c <_vfiprintf_r+0x78>
 8004150:	4629      	mov	r1, r5
 8004152:	4630      	mov	r0, r6
 8004154:	f000 f9e6 	bl	8004524 <__swsetup_r>
 8004158:	b1c0      	cbz	r0, 800418c <_vfiprintf_r+0x78>
 800415a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800415c:	07dc      	lsls	r4, r3, #31
 800415e:	d50e      	bpl.n	800417e <_vfiprintf_r+0x6a>
 8004160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004164:	b01d      	add	sp, #116	; 0x74
 8004166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416a:	4b7b      	ldr	r3, [pc, #492]	; (8004358 <_vfiprintf_r+0x244>)
 800416c:	429d      	cmp	r5, r3
 800416e:	d101      	bne.n	8004174 <_vfiprintf_r+0x60>
 8004170:	68b5      	ldr	r5, [r6, #8]
 8004172:	e7df      	b.n	8004134 <_vfiprintf_r+0x20>
 8004174:	4b79      	ldr	r3, [pc, #484]	; (800435c <_vfiprintf_r+0x248>)
 8004176:	429d      	cmp	r5, r3
 8004178:	bf08      	it	eq
 800417a:	68f5      	ldreq	r5, [r6, #12]
 800417c:	e7da      	b.n	8004134 <_vfiprintf_r+0x20>
 800417e:	89ab      	ldrh	r3, [r5, #12]
 8004180:	0598      	lsls	r0, r3, #22
 8004182:	d4ed      	bmi.n	8004160 <_vfiprintf_r+0x4c>
 8004184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004186:	f7ff fa79 	bl	800367c <__retarget_lock_release_recursive>
 800418a:	e7e9      	b.n	8004160 <_vfiprintf_r+0x4c>
 800418c:	2300      	movs	r3, #0
 800418e:	9309      	str	r3, [sp, #36]	; 0x24
 8004190:	2320      	movs	r3, #32
 8004192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004196:	f8cd 800c 	str.w	r8, [sp, #12]
 800419a:	2330      	movs	r3, #48	; 0x30
 800419c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004360 <_vfiprintf_r+0x24c>
 80041a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041a4:	f04f 0901 	mov.w	r9, #1
 80041a8:	4623      	mov	r3, r4
 80041aa:	469a      	mov	sl, r3
 80041ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041b0:	b10a      	cbz	r2, 80041b6 <_vfiprintf_r+0xa2>
 80041b2:	2a25      	cmp	r2, #37	; 0x25
 80041b4:	d1f9      	bne.n	80041aa <_vfiprintf_r+0x96>
 80041b6:	ebba 0b04 	subs.w	fp, sl, r4
 80041ba:	d00b      	beq.n	80041d4 <_vfiprintf_r+0xc0>
 80041bc:	465b      	mov	r3, fp
 80041be:	4622      	mov	r2, r4
 80041c0:	4629      	mov	r1, r5
 80041c2:	4630      	mov	r0, r6
 80041c4:	f7ff ff93 	bl	80040ee <__sfputs_r>
 80041c8:	3001      	adds	r0, #1
 80041ca:	f000 80aa 	beq.w	8004322 <_vfiprintf_r+0x20e>
 80041ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041d0:	445a      	add	r2, fp
 80041d2:	9209      	str	r2, [sp, #36]	; 0x24
 80041d4:	f89a 3000 	ldrb.w	r3, [sl]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80a2 	beq.w	8004322 <_vfiprintf_r+0x20e>
 80041de:	2300      	movs	r3, #0
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041e8:	f10a 0a01 	add.w	sl, sl, #1
 80041ec:	9304      	str	r3, [sp, #16]
 80041ee:	9307      	str	r3, [sp, #28]
 80041f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041f4:	931a      	str	r3, [sp, #104]	; 0x68
 80041f6:	4654      	mov	r4, sl
 80041f8:	2205      	movs	r2, #5
 80041fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041fe:	4858      	ldr	r0, [pc, #352]	; (8004360 <_vfiprintf_r+0x24c>)
 8004200:	f7fb ffce 	bl	80001a0 <memchr>
 8004204:	9a04      	ldr	r2, [sp, #16]
 8004206:	b9d8      	cbnz	r0, 8004240 <_vfiprintf_r+0x12c>
 8004208:	06d1      	lsls	r1, r2, #27
 800420a:	bf44      	itt	mi
 800420c:	2320      	movmi	r3, #32
 800420e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004212:	0713      	lsls	r3, r2, #28
 8004214:	bf44      	itt	mi
 8004216:	232b      	movmi	r3, #43	; 0x2b
 8004218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800421c:	f89a 3000 	ldrb.w	r3, [sl]
 8004220:	2b2a      	cmp	r3, #42	; 0x2a
 8004222:	d015      	beq.n	8004250 <_vfiprintf_r+0x13c>
 8004224:	9a07      	ldr	r2, [sp, #28]
 8004226:	4654      	mov	r4, sl
 8004228:	2000      	movs	r0, #0
 800422a:	f04f 0c0a 	mov.w	ip, #10
 800422e:	4621      	mov	r1, r4
 8004230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004234:	3b30      	subs	r3, #48	; 0x30
 8004236:	2b09      	cmp	r3, #9
 8004238:	d94e      	bls.n	80042d8 <_vfiprintf_r+0x1c4>
 800423a:	b1b0      	cbz	r0, 800426a <_vfiprintf_r+0x156>
 800423c:	9207      	str	r2, [sp, #28]
 800423e:	e014      	b.n	800426a <_vfiprintf_r+0x156>
 8004240:	eba0 0308 	sub.w	r3, r0, r8
 8004244:	fa09 f303 	lsl.w	r3, r9, r3
 8004248:	4313      	orrs	r3, r2
 800424a:	9304      	str	r3, [sp, #16]
 800424c:	46a2      	mov	sl, r4
 800424e:	e7d2      	b.n	80041f6 <_vfiprintf_r+0xe2>
 8004250:	9b03      	ldr	r3, [sp, #12]
 8004252:	1d19      	adds	r1, r3, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	9103      	str	r1, [sp, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	bfbb      	ittet	lt
 800425c:	425b      	neglt	r3, r3
 800425e:	f042 0202 	orrlt.w	r2, r2, #2
 8004262:	9307      	strge	r3, [sp, #28]
 8004264:	9307      	strlt	r3, [sp, #28]
 8004266:	bfb8      	it	lt
 8004268:	9204      	strlt	r2, [sp, #16]
 800426a:	7823      	ldrb	r3, [r4, #0]
 800426c:	2b2e      	cmp	r3, #46	; 0x2e
 800426e:	d10c      	bne.n	800428a <_vfiprintf_r+0x176>
 8004270:	7863      	ldrb	r3, [r4, #1]
 8004272:	2b2a      	cmp	r3, #42	; 0x2a
 8004274:	d135      	bne.n	80042e2 <_vfiprintf_r+0x1ce>
 8004276:	9b03      	ldr	r3, [sp, #12]
 8004278:	1d1a      	adds	r2, r3, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	9203      	str	r2, [sp, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	bfb8      	it	lt
 8004282:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004286:	3402      	adds	r4, #2
 8004288:	9305      	str	r3, [sp, #20]
 800428a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004370 <_vfiprintf_r+0x25c>
 800428e:	7821      	ldrb	r1, [r4, #0]
 8004290:	2203      	movs	r2, #3
 8004292:	4650      	mov	r0, sl
 8004294:	f7fb ff84 	bl	80001a0 <memchr>
 8004298:	b140      	cbz	r0, 80042ac <_vfiprintf_r+0x198>
 800429a:	2340      	movs	r3, #64	; 0x40
 800429c:	eba0 000a 	sub.w	r0, r0, sl
 80042a0:	fa03 f000 	lsl.w	r0, r3, r0
 80042a4:	9b04      	ldr	r3, [sp, #16]
 80042a6:	4303      	orrs	r3, r0
 80042a8:	3401      	adds	r4, #1
 80042aa:	9304      	str	r3, [sp, #16]
 80042ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b0:	482c      	ldr	r0, [pc, #176]	; (8004364 <_vfiprintf_r+0x250>)
 80042b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042b6:	2206      	movs	r2, #6
 80042b8:	f7fb ff72 	bl	80001a0 <memchr>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d03f      	beq.n	8004340 <_vfiprintf_r+0x22c>
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <_vfiprintf_r+0x254>)
 80042c2:	bb1b      	cbnz	r3, 800430c <_vfiprintf_r+0x1f8>
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	3307      	adds	r3, #7
 80042c8:	f023 0307 	bic.w	r3, r3, #7
 80042cc:	3308      	adds	r3, #8
 80042ce:	9303      	str	r3, [sp, #12]
 80042d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d2:	443b      	add	r3, r7
 80042d4:	9309      	str	r3, [sp, #36]	; 0x24
 80042d6:	e767      	b.n	80041a8 <_vfiprintf_r+0x94>
 80042d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042dc:	460c      	mov	r4, r1
 80042de:	2001      	movs	r0, #1
 80042e0:	e7a5      	b.n	800422e <_vfiprintf_r+0x11a>
 80042e2:	2300      	movs	r3, #0
 80042e4:	3401      	adds	r4, #1
 80042e6:	9305      	str	r3, [sp, #20]
 80042e8:	4619      	mov	r1, r3
 80042ea:	f04f 0c0a 	mov.w	ip, #10
 80042ee:	4620      	mov	r0, r4
 80042f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042f4:	3a30      	subs	r2, #48	; 0x30
 80042f6:	2a09      	cmp	r2, #9
 80042f8:	d903      	bls.n	8004302 <_vfiprintf_r+0x1ee>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0c5      	beq.n	800428a <_vfiprintf_r+0x176>
 80042fe:	9105      	str	r1, [sp, #20]
 8004300:	e7c3      	b.n	800428a <_vfiprintf_r+0x176>
 8004302:	fb0c 2101 	mla	r1, ip, r1, r2
 8004306:	4604      	mov	r4, r0
 8004308:	2301      	movs	r3, #1
 800430a:	e7f0      	b.n	80042ee <_vfiprintf_r+0x1da>
 800430c:	ab03      	add	r3, sp, #12
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	462a      	mov	r2, r5
 8004312:	4b16      	ldr	r3, [pc, #88]	; (800436c <_vfiprintf_r+0x258>)
 8004314:	a904      	add	r1, sp, #16
 8004316:	4630      	mov	r0, r6
 8004318:	f7ff fb08 	bl	800392c <_printf_float>
 800431c:	4607      	mov	r7, r0
 800431e:	1c78      	adds	r0, r7, #1
 8004320:	d1d6      	bne.n	80042d0 <_vfiprintf_r+0x1bc>
 8004322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004324:	07d9      	lsls	r1, r3, #31
 8004326:	d405      	bmi.n	8004334 <_vfiprintf_r+0x220>
 8004328:	89ab      	ldrh	r3, [r5, #12]
 800432a:	059a      	lsls	r2, r3, #22
 800432c:	d402      	bmi.n	8004334 <_vfiprintf_r+0x220>
 800432e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004330:	f7ff f9a4 	bl	800367c <__retarget_lock_release_recursive>
 8004334:	89ab      	ldrh	r3, [r5, #12]
 8004336:	065b      	lsls	r3, r3, #25
 8004338:	f53f af12 	bmi.w	8004160 <_vfiprintf_r+0x4c>
 800433c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800433e:	e711      	b.n	8004164 <_vfiprintf_r+0x50>
 8004340:	ab03      	add	r3, sp, #12
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	462a      	mov	r2, r5
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <_vfiprintf_r+0x258>)
 8004348:	a904      	add	r1, sp, #16
 800434a:	4630      	mov	r0, r6
 800434c:	f7ff fd92 	bl	8003e74 <_printf_i>
 8004350:	e7e4      	b.n	800431c <_vfiprintf_r+0x208>
 8004352:	bf00      	nop
 8004354:	08006f98 	.word	0x08006f98
 8004358:	08006fb8 	.word	0x08006fb8
 800435c:	08006f78 	.word	0x08006f78
 8004360:	08006ef0 	.word	0x08006ef0
 8004364:	08006efa 	.word	0x08006efa
 8004368:	0800392d 	.word	0x0800392d
 800436c:	080040ef 	.word	0x080040ef
 8004370:	08006ef6 	.word	0x08006ef6

08004374 <iprintf>:
 8004374:	b40f      	push	{r0, r1, r2, r3}
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <iprintf+0x2c>)
 8004378:	b513      	push	{r0, r1, r4, lr}
 800437a:	681c      	ldr	r4, [r3, #0]
 800437c:	b124      	cbz	r4, 8004388 <iprintf+0x14>
 800437e:	69a3      	ldr	r3, [r4, #24]
 8004380:	b913      	cbnz	r3, 8004388 <iprintf+0x14>
 8004382:	4620      	mov	r0, r4
 8004384:	f001 f8d8 	bl	8005538 <__sinit>
 8004388:	ab05      	add	r3, sp, #20
 800438a:	9a04      	ldr	r2, [sp, #16]
 800438c:	68a1      	ldr	r1, [r4, #8]
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	4620      	mov	r0, r4
 8004392:	f7ff febf 	bl	8004114 <_vfiprintf_r>
 8004396:	b002      	add	sp, #8
 8004398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800439c:	b004      	add	sp, #16
 800439e:	4770      	bx	lr
 80043a0:	20000030 	.word	0x20000030

080043a4 <putchar>:
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <putchar+0x28>)
 80043a6:	b513      	push	{r0, r1, r4, lr}
 80043a8:	681c      	ldr	r4, [r3, #0]
 80043aa:	4601      	mov	r1, r0
 80043ac:	b134      	cbz	r4, 80043bc <putchar+0x18>
 80043ae:	69a3      	ldr	r3, [r4, #24]
 80043b0:	b923      	cbnz	r3, 80043bc <putchar+0x18>
 80043b2:	9001      	str	r0, [sp, #4]
 80043b4:	4620      	mov	r0, r4
 80043b6:	f001 f8bf 	bl	8005538 <__sinit>
 80043ba:	9901      	ldr	r1, [sp, #4]
 80043bc:	68a2      	ldr	r2, [r4, #8]
 80043be:	4620      	mov	r0, r4
 80043c0:	b002      	add	sp, #8
 80043c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c6:	f000 b803 	b.w	80043d0 <_putc_r>
 80043ca:	bf00      	nop
 80043cc:	20000030 	.word	0x20000030

080043d0 <_putc_r>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	460d      	mov	r5, r1
 80043d4:	4614      	mov	r4, r2
 80043d6:	4606      	mov	r6, r0
 80043d8:	b118      	cbz	r0, 80043e2 <_putc_r+0x12>
 80043da:	6983      	ldr	r3, [r0, #24]
 80043dc:	b90b      	cbnz	r3, 80043e2 <_putc_r+0x12>
 80043de:	f001 f8ab 	bl	8005538 <__sinit>
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <_putc_r+0x84>)
 80043e4:	429c      	cmp	r4, r3
 80043e6:	d124      	bne.n	8004432 <_putc_r+0x62>
 80043e8:	6874      	ldr	r4, [r6, #4]
 80043ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043ec:	07d8      	lsls	r0, r3, #31
 80043ee:	d405      	bmi.n	80043fc <_putc_r+0x2c>
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	0599      	lsls	r1, r3, #22
 80043f4:	d402      	bmi.n	80043fc <_putc_r+0x2c>
 80043f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043f8:	f7ff f93f 	bl	800367a <__retarget_lock_acquire_recursive>
 80043fc:	68a3      	ldr	r3, [r4, #8]
 80043fe:	3b01      	subs	r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	60a3      	str	r3, [r4, #8]
 8004404:	da05      	bge.n	8004412 <_putc_r+0x42>
 8004406:	69a2      	ldr	r2, [r4, #24]
 8004408:	4293      	cmp	r3, r2
 800440a:	db1c      	blt.n	8004446 <_putc_r+0x76>
 800440c:	b2eb      	uxtb	r3, r5
 800440e:	2b0a      	cmp	r3, #10
 8004410:	d019      	beq.n	8004446 <_putc_r+0x76>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	6022      	str	r2, [r4, #0]
 8004418:	701d      	strb	r5, [r3, #0]
 800441a:	b2ed      	uxtb	r5, r5
 800441c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800441e:	07da      	lsls	r2, r3, #31
 8004420:	d405      	bmi.n	800442e <_putc_r+0x5e>
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	059b      	lsls	r3, r3, #22
 8004426:	d402      	bmi.n	800442e <_putc_r+0x5e>
 8004428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800442a:	f7ff f927 	bl	800367c <__retarget_lock_release_recursive>
 800442e:	4628      	mov	r0, r5
 8004430:	bd70      	pop	{r4, r5, r6, pc}
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <_putc_r+0x88>)
 8004434:	429c      	cmp	r4, r3
 8004436:	d101      	bne.n	800443c <_putc_r+0x6c>
 8004438:	68b4      	ldr	r4, [r6, #8]
 800443a:	e7d6      	b.n	80043ea <_putc_r+0x1a>
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <_putc_r+0x8c>)
 800443e:	429c      	cmp	r4, r3
 8004440:	bf08      	it	eq
 8004442:	68f4      	ldreq	r4, [r6, #12]
 8004444:	e7d1      	b.n	80043ea <_putc_r+0x1a>
 8004446:	4629      	mov	r1, r5
 8004448:	4622      	mov	r2, r4
 800444a:	4630      	mov	r0, r6
 800444c:	f000 f818 	bl	8004480 <__swbuf_r>
 8004450:	4605      	mov	r5, r0
 8004452:	e7e3      	b.n	800441c <_putc_r+0x4c>
 8004454:	08006f98 	.word	0x08006f98
 8004458:	08006fb8 	.word	0x08006fb8
 800445c:	08006f78 	.word	0x08006f78

08004460 <_sbrk_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4d06      	ldr	r5, [pc, #24]	; (800447c <_sbrk_r+0x1c>)
 8004464:	2300      	movs	r3, #0
 8004466:	4604      	mov	r4, r0
 8004468:	4608      	mov	r0, r1
 800446a:	602b      	str	r3, [r5, #0]
 800446c:	f7fd f884 	bl	8001578 <_sbrk>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	d102      	bne.n	800447a <_sbrk_r+0x1a>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	b103      	cbz	r3, 800447a <_sbrk_r+0x1a>
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	bd38      	pop	{r3, r4, r5, pc}
 800447c:	200002bc 	.word	0x200002bc

08004480 <__swbuf_r>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	460e      	mov	r6, r1
 8004484:	4614      	mov	r4, r2
 8004486:	4605      	mov	r5, r0
 8004488:	b118      	cbz	r0, 8004492 <__swbuf_r+0x12>
 800448a:	6983      	ldr	r3, [r0, #24]
 800448c:	b90b      	cbnz	r3, 8004492 <__swbuf_r+0x12>
 800448e:	f001 f853 	bl	8005538 <__sinit>
 8004492:	4b21      	ldr	r3, [pc, #132]	; (8004518 <__swbuf_r+0x98>)
 8004494:	429c      	cmp	r4, r3
 8004496:	d12b      	bne.n	80044f0 <__swbuf_r+0x70>
 8004498:	686c      	ldr	r4, [r5, #4]
 800449a:	69a3      	ldr	r3, [r4, #24]
 800449c:	60a3      	str	r3, [r4, #8]
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	071a      	lsls	r2, r3, #28
 80044a2:	d52f      	bpl.n	8004504 <__swbuf_r+0x84>
 80044a4:	6923      	ldr	r3, [r4, #16]
 80044a6:	b36b      	cbz	r3, 8004504 <__swbuf_r+0x84>
 80044a8:	6923      	ldr	r3, [r4, #16]
 80044aa:	6820      	ldr	r0, [r4, #0]
 80044ac:	1ac0      	subs	r0, r0, r3
 80044ae:	6963      	ldr	r3, [r4, #20]
 80044b0:	b2f6      	uxtb	r6, r6
 80044b2:	4283      	cmp	r3, r0
 80044b4:	4637      	mov	r7, r6
 80044b6:	dc04      	bgt.n	80044c2 <__swbuf_r+0x42>
 80044b8:	4621      	mov	r1, r4
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 ffa8 	bl	8005410 <_fflush_r>
 80044c0:	bb30      	cbnz	r0, 8004510 <__swbuf_r+0x90>
 80044c2:	68a3      	ldr	r3, [r4, #8]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	60a3      	str	r3, [r4, #8]
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	6022      	str	r2, [r4, #0]
 80044ce:	701e      	strb	r6, [r3, #0]
 80044d0:	6963      	ldr	r3, [r4, #20]
 80044d2:	3001      	adds	r0, #1
 80044d4:	4283      	cmp	r3, r0
 80044d6:	d004      	beq.n	80044e2 <__swbuf_r+0x62>
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	07db      	lsls	r3, r3, #31
 80044dc:	d506      	bpl.n	80044ec <__swbuf_r+0x6c>
 80044de:	2e0a      	cmp	r6, #10
 80044e0:	d104      	bne.n	80044ec <__swbuf_r+0x6c>
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 ff93 	bl	8005410 <_fflush_r>
 80044ea:	b988      	cbnz	r0, 8004510 <__swbuf_r+0x90>
 80044ec:	4638      	mov	r0, r7
 80044ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <__swbuf_r+0x9c>)
 80044f2:	429c      	cmp	r4, r3
 80044f4:	d101      	bne.n	80044fa <__swbuf_r+0x7a>
 80044f6:	68ac      	ldr	r4, [r5, #8]
 80044f8:	e7cf      	b.n	800449a <__swbuf_r+0x1a>
 80044fa:	4b09      	ldr	r3, [pc, #36]	; (8004520 <__swbuf_r+0xa0>)
 80044fc:	429c      	cmp	r4, r3
 80044fe:	bf08      	it	eq
 8004500:	68ec      	ldreq	r4, [r5, #12]
 8004502:	e7ca      	b.n	800449a <__swbuf_r+0x1a>
 8004504:	4621      	mov	r1, r4
 8004506:	4628      	mov	r0, r5
 8004508:	f000 f80c 	bl	8004524 <__swsetup_r>
 800450c:	2800      	cmp	r0, #0
 800450e:	d0cb      	beq.n	80044a8 <__swbuf_r+0x28>
 8004510:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004514:	e7ea      	b.n	80044ec <__swbuf_r+0x6c>
 8004516:	bf00      	nop
 8004518:	08006f98 	.word	0x08006f98
 800451c:	08006fb8 	.word	0x08006fb8
 8004520:	08006f78 	.word	0x08006f78

08004524 <__swsetup_r>:
 8004524:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <__swsetup_r+0xcc>)
 8004526:	b570      	push	{r4, r5, r6, lr}
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	4606      	mov	r6, r0
 800452c:	460c      	mov	r4, r1
 800452e:	b125      	cbz	r5, 800453a <__swsetup_r+0x16>
 8004530:	69ab      	ldr	r3, [r5, #24]
 8004532:	b913      	cbnz	r3, 800453a <__swsetup_r+0x16>
 8004534:	4628      	mov	r0, r5
 8004536:	f000 ffff 	bl	8005538 <__sinit>
 800453a:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <__swsetup_r+0xd0>)
 800453c:	429c      	cmp	r4, r3
 800453e:	d10f      	bne.n	8004560 <__swsetup_r+0x3c>
 8004540:	686c      	ldr	r4, [r5, #4]
 8004542:	89a3      	ldrh	r3, [r4, #12]
 8004544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004548:	0719      	lsls	r1, r3, #28
 800454a:	d42c      	bmi.n	80045a6 <__swsetup_r+0x82>
 800454c:	06dd      	lsls	r5, r3, #27
 800454e:	d411      	bmi.n	8004574 <__swsetup_r+0x50>
 8004550:	2309      	movs	r3, #9
 8004552:	6033      	str	r3, [r6, #0]
 8004554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800455e:	e03e      	b.n	80045de <__swsetup_r+0xba>
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <__swsetup_r+0xd4>)
 8004562:	429c      	cmp	r4, r3
 8004564:	d101      	bne.n	800456a <__swsetup_r+0x46>
 8004566:	68ac      	ldr	r4, [r5, #8]
 8004568:	e7eb      	b.n	8004542 <__swsetup_r+0x1e>
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <__swsetup_r+0xd8>)
 800456c:	429c      	cmp	r4, r3
 800456e:	bf08      	it	eq
 8004570:	68ec      	ldreq	r4, [r5, #12]
 8004572:	e7e6      	b.n	8004542 <__swsetup_r+0x1e>
 8004574:	0758      	lsls	r0, r3, #29
 8004576:	d512      	bpl.n	800459e <__swsetup_r+0x7a>
 8004578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800457a:	b141      	cbz	r1, 800458e <__swsetup_r+0x6a>
 800457c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004580:	4299      	cmp	r1, r3
 8004582:	d002      	beq.n	800458a <__swsetup_r+0x66>
 8004584:	4630      	mov	r0, r6
 8004586:	f7ff f88b 	bl	80036a0 <_free_r>
 800458a:	2300      	movs	r3, #0
 800458c:	6363      	str	r3, [r4, #52]	; 0x34
 800458e:	89a3      	ldrh	r3, [r4, #12]
 8004590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	2300      	movs	r3, #0
 8004598:	6063      	str	r3, [r4, #4]
 800459a:	6923      	ldr	r3, [r4, #16]
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	f043 0308 	orr.w	r3, r3, #8
 80045a4:	81a3      	strh	r3, [r4, #12]
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	b94b      	cbnz	r3, 80045be <__swsetup_r+0x9a>
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b4:	d003      	beq.n	80045be <__swsetup_r+0x9a>
 80045b6:	4621      	mov	r1, r4
 80045b8:	4630      	mov	r0, r6
 80045ba:	f001 f885 	bl	80056c8 <__smakebuf_r>
 80045be:	89a0      	ldrh	r0, [r4, #12]
 80045c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045c4:	f010 0301 	ands.w	r3, r0, #1
 80045c8:	d00a      	beq.n	80045e0 <__swsetup_r+0xbc>
 80045ca:	2300      	movs	r3, #0
 80045cc:	60a3      	str	r3, [r4, #8]
 80045ce:	6963      	ldr	r3, [r4, #20]
 80045d0:	425b      	negs	r3, r3
 80045d2:	61a3      	str	r3, [r4, #24]
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	b943      	cbnz	r3, 80045ea <__swsetup_r+0xc6>
 80045d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045dc:	d1ba      	bne.n	8004554 <__swsetup_r+0x30>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	0781      	lsls	r1, r0, #30
 80045e2:	bf58      	it	pl
 80045e4:	6963      	ldrpl	r3, [r4, #20]
 80045e6:	60a3      	str	r3, [r4, #8]
 80045e8:	e7f4      	b.n	80045d4 <__swsetup_r+0xb0>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e7f7      	b.n	80045de <__swsetup_r+0xba>
 80045ee:	bf00      	nop
 80045f0:	20000030 	.word	0x20000030
 80045f4:	08006f98 	.word	0x08006f98
 80045f8:	08006fb8 	.word	0x08006fb8
 80045fc:	08006f78 	.word	0x08006f78

08004600 <abort>:
 8004600:	b508      	push	{r3, lr}
 8004602:	2006      	movs	r0, #6
 8004604:	f001 fc8e 	bl	8005f24 <raise>
 8004608:	2001      	movs	r0, #1
 800460a:	f7fc ff77 	bl	80014fc <_exit>

0800460e <quorem>:
 800460e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004612:	6903      	ldr	r3, [r0, #16]
 8004614:	690c      	ldr	r4, [r1, #16]
 8004616:	42a3      	cmp	r3, r4
 8004618:	4607      	mov	r7, r0
 800461a:	f2c0 8081 	blt.w	8004720 <quorem+0x112>
 800461e:	3c01      	subs	r4, #1
 8004620:	f101 0814 	add.w	r8, r1, #20
 8004624:	f100 0514 	add.w	r5, r0, #20
 8004628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004636:	3301      	adds	r3, #1
 8004638:	429a      	cmp	r2, r3
 800463a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800463e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004642:	fbb2 f6f3 	udiv	r6, r2, r3
 8004646:	d331      	bcc.n	80046ac <quorem+0x9e>
 8004648:	f04f 0e00 	mov.w	lr, #0
 800464c:	4640      	mov	r0, r8
 800464e:	46ac      	mov	ip, r5
 8004650:	46f2      	mov	sl, lr
 8004652:	f850 2b04 	ldr.w	r2, [r0], #4
 8004656:	b293      	uxth	r3, r2
 8004658:	fb06 e303 	mla	r3, r6, r3, lr
 800465c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004660:	b29b      	uxth	r3, r3
 8004662:	ebaa 0303 	sub.w	r3, sl, r3
 8004666:	0c12      	lsrs	r2, r2, #16
 8004668:	f8dc a000 	ldr.w	sl, [ip]
 800466c:	fb06 e202 	mla	r2, r6, r2, lr
 8004670:	fa13 f38a 	uxtah	r3, r3, sl
 8004674:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004678:	fa1f fa82 	uxth.w	sl, r2
 800467c:	f8dc 2000 	ldr.w	r2, [ip]
 8004680:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004684:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004688:	b29b      	uxth	r3, r3
 800468a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800468e:	4581      	cmp	r9, r0
 8004690:	f84c 3b04 	str.w	r3, [ip], #4
 8004694:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004698:	d2db      	bcs.n	8004652 <quorem+0x44>
 800469a:	f855 300b 	ldr.w	r3, [r5, fp]
 800469e:	b92b      	cbnz	r3, 80046ac <quorem+0x9e>
 80046a0:	9b01      	ldr	r3, [sp, #4]
 80046a2:	3b04      	subs	r3, #4
 80046a4:	429d      	cmp	r5, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	d32e      	bcc.n	8004708 <quorem+0xfa>
 80046aa:	613c      	str	r4, [r7, #16]
 80046ac:	4638      	mov	r0, r7
 80046ae:	f001 faf9 	bl	8005ca4 <__mcmp>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	db24      	blt.n	8004700 <quorem+0xf2>
 80046b6:	3601      	adds	r6, #1
 80046b8:	4628      	mov	r0, r5
 80046ba:	f04f 0c00 	mov.w	ip, #0
 80046be:	f858 2b04 	ldr.w	r2, [r8], #4
 80046c2:	f8d0 e000 	ldr.w	lr, [r0]
 80046c6:	b293      	uxth	r3, r2
 80046c8:	ebac 0303 	sub.w	r3, ip, r3
 80046cc:	0c12      	lsrs	r2, r2, #16
 80046ce:	fa13 f38e 	uxtah	r3, r3, lr
 80046d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80046d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046da:	b29b      	uxth	r3, r3
 80046dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046e0:	45c1      	cmp	r9, r8
 80046e2:	f840 3b04 	str.w	r3, [r0], #4
 80046e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80046ea:	d2e8      	bcs.n	80046be <quorem+0xb0>
 80046ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046f4:	b922      	cbnz	r2, 8004700 <quorem+0xf2>
 80046f6:	3b04      	subs	r3, #4
 80046f8:	429d      	cmp	r5, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	d30a      	bcc.n	8004714 <quorem+0x106>
 80046fe:	613c      	str	r4, [r7, #16]
 8004700:	4630      	mov	r0, r6
 8004702:	b003      	add	sp, #12
 8004704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	3b04      	subs	r3, #4
 800470c:	2a00      	cmp	r2, #0
 800470e:	d1cc      	bne.n	80046aa <quorem+0x9c>
 8004710:	3c01      	subs	r4, #1
 8004712:	e7c7      	b.n	80046a4 <quorem+0x96>
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	3b04      	subs	r3, #4
 8004718:	2a00      	cmp	r2, #0
 800471a:	d1f0      	bne.n	80046fe <quorem+0xf0>
 800471c:	3c01      	subs	r4, #1
 800471e:	e7eb      	b.n	80046f8 <quorem+0xea>
 8004720:	2000      	movs	r0, #0
 8004722:	e7ee      	b.n	8004702 <quorem+0xf4>
 8004724:	0000      	movs	r0, r0
	...

08004728 <_dtoa_r>:
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	ed2d 8b04 	vpush	{d8-d9}
 8004730:	ec57 6b10 	vmov	r6, r7, d0
 8004734:	b093      	sub	sp, #76	; 0x4c
 8004736:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004738:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800473c:	9106      	str	r1, [sp, #24]
 800473e:	ee10 aa10 	vmov	sl, s0
 8004742:	4604      	mov	r4, r0
 8004744:	9209      	str	r2, [sp, #36]	; 0x24
 8004746:	930c      	str	r3, [sp, #48]	; 0x30
 8004748:	46bb      	mov	fp, r7
 800474a:	b975      	cbnz	r5, 800476a <_dtoa_r+0x42>
 800474c:	2010      	movs	r0, #16
 800474e:	f7fe ff97 	bl	8003680 <malloc>
 8004752:	4602      	mov	r2, r0
 8004754:	6260      	str	r0, [r4, #36]	; 0x24
 8004756:	b920      	cbnz	r0, 8004762 <_dtoa_r+0x3a>
 8004758:	4ba7      	ldr	r3, [pc, #668]	; (80049f8 <_dtoa_r+0x2d0>)
 800475a:	21ea      	movs	r1, #234	; 0xea
 800475c:	48a7      	ldr	r0, [pc, #668]	; (80049fc <_dtoa_r+0x2d4>)
 800475e:	f7fe ff31 	bl	80035c4 <__assert_func>
 8004762:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004766:	6005      	str	r5, [r0, #0]
 8004768:	60c5      	str	r5, [r0, #12]
 800476a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800476c:	6819      	ldr	r1, [r3, #0]
 800476e:	b151      	cbz	r1, 8004786 <_dtoa_r+0x5e>
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	604a      	str	r2, [r1, #4]
 8004774:	2301      	movs	r3, #1
 8004776:	4093      	lsls	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
 800477a:	4620      	mov	r0, r4
 800477c:	f001 f850 	bl	8005820 <_Bfree>
 8004780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	1e3b      	subs	r3, r7, #0
 8004788:	bfaa      	itet	ge
 800478a:	2300      	movge	r3, #0
 800478c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004790:	f8c8 3000 	strge.w	r3, [r8]
 8004794:	4b9a      	ldr	r3, [pc, #616]	; (8004a00 <_dtoa_r+0x2d8>)
 8004796:	bfbc      	itt	lt
 8004798:	2201      	movlt	r2, #1
 800479a:	f8c8 2000 	strlt.w	r2, [r8]
 800479e:	ea33 030b 	bics.w	r3, r3, fp
 80047a2:	d11b      	bne.n	80047dc <_dtoa_r+0xb4>
 80047a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80047b0:	4333      	orrs	r3, r6
 80047b2:	f000 8592 	beq.w	80052da <_dtoa_r+0xbb2>
 80047b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047b8:	b963      	cbnz	r3, 80047d4 <_dtoa_r+0xac>
 80047ba:	4b92      	ldr	r3, [pc, #584]	; (8004a04 <_dtoa_r+0x2dc>)
 80047bc:	e022      	b.n	8004804 <_dtoa_r+0xdc>
 80047be:	4b92      	ldr	r3, [pc, #584]	; (8004a08 <_dtoa_r+0x2e0>)
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	3308      	adds	r3, #8
 80047c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	9801      	ldr	r0, [sp, #4]
 80047ca:	b013      	add	sp, #76	; 0x4c
 80047cc:	ecbd 8b04 	vpop	{d8-d9}
 80047d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d4:	4b8b      	ldr	r3, [pc, #556]	; (8004a04 <_dtoa_r+0x2dc>)
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	3303      	adds	r3, #3
 80047da:	e7f3      	b.n	80047c4 <_dtoa_r+0x9c>
 80047dc:	2200      	movs	r2, #0
 80047de:	2300      	movs	r3, #0
 80047e0:	4650      	mov	r0, sl
 80047e2:	4659      	mov	r1, fp
 80047e4:	f7fc f950 	bl	8000a88 <__aeabi_dcmpeq>
 80047e8:	ec4b ab19 	vmov	d9, sl, fp
 80047ec:	4680      	mov	r8, r0
 80047ee:	b158      	cbz	r0, 8004808 <_dtoa_r+0xe0>
 80047f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047f2:	2301      	movs	r3, #1
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 856b 	beq.w	80052d4 <_dtoa_r+0xbac>
 80047fe:	4883      	ldr	r0, [pc, #524]	; (8004a0c <_dtoa_r+0x2e4>)
 8004800:	6018      	str	r0, [r3, #0]
 8004802:	1e43      	subs	r3, r0, #1
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	e7df      	b.n	80047c8 <_dtoa_r+0xa0>
 8004808:	ec4b ab10 	vmov	d0, sl, fp
 800480c:	aa10      	add	r2, sp, #64	; 0x40
 800480e:	a911      	add	r1, sp, #68	; 0x44
 8004810:	4620      	mov	r0, r4
 8004812:	f001 faed 	bl	8005df0 <__d2b>
 8004816:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800481a:	ee08 0a10 	vmov	s16, r0
 800481e:	2d00      	cmp	r5, #0
 8004820:	f000 8084 	beq.w	800492c <_dtoa_r+0x204>
 8004824:	ee19 3a90 	vmov	r3, s19
 8004828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800482c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004830:	4656      	mov	r6, sl
 8004832:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004836:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800483a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800483e:	4b74      	ldr	r3, [pc, #464]	; (8004a10 <_dtoa_r+0x2e8>)
 8004840:	2200      	movs	r2, #0
 8004842:	4630      	mov	r0, r6
 8004844:	4639      	mov	r1, r7
 8004846:	f7fb fcff 	bl	8000248 <__aeabi_dsub>
 800484a:	a365      	add	r3, pc, #404	; (adr r3, 80049e0 <_dtoa_r+0x2b8>)
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f7fb feb2 	bl	80005b8 <__aeabi_dmul>
 8004854:	a364      	add	r3, pc, #400	; (adr r3, 80049e8 <_dtoa_r+0x2c0>)
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	f7fb fcf7 	bl	800024c <__adddf3>
 800485e:	4606      	mov	r6, r0
 8004860:	4628      	mov	r0, r5
 8004862:	460f      	mov	r7, r1
 8004864:	f7fb fe3e 	bl	80004e4 <__aeabi_i2d>
 8004868:	a361      	add	r3, pc, #388	; (adr r3, 80049f0 <_dtoa_r+0x2c8>)
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	f7fb fea3 	bl	80005b8 <__aeabi_dmul>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4630      	mov	r0, r6
 8004878:	4639      	mov	r1, r7
 800487a:	f7fb fce7 	bl	800024c <__adddf3>
 800487e:	4606      	mov	r6, r0
 8004880:	460f      	mov	r7, r1
 8004882:	f7fc f949 	bl	8000b18 <__aeabi_d2iz>
 8004886:	2200      	movs	r2, #0
 8004888:	9000      	str	r0, [sp, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	4630      	mov	r0, r6
 800488e:	4639      	mov	r1, r7
 8004890:	f7fc f904 	bl	8000a9c <__aeabi_dcmplt>
 8004894:	b150      	cbz	r0, 80048ac <_dtoa_r+0x184>
 8004896:	9800      	ldr	r0, [sp, #0]
 8004898:	f7fb fe24 	bl	80004e4 <__aeabi_i2d>
 800489c:	4632      	mov	r2, r6
 800489e:	463b      	mov	r3, r7
 80048a0:	f7fc f8f2 	bl	8000a88 <__aeabi_dcmpeq>
 80048a4:	b910      	cbnz	r0, 80048ac <_dtoa_r+0x184>
 80048a6:	9b00      	ldr	r3, [sp, #0]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	9b00      	ldr	r3, [sp, #0]
 80048ae:	2b16      	cmp	r3, #22
 80048b0:	d85a      	bhi.n	8004968 <_dtoa_r+0x240>
 80048b2:	9a00      	ldr	r2, [sp, #0]
 80048b4:	4b57      	ldr	r3, [pc, #348]	; (8004a14 <_dtoa_r+0x2ec>)
 80048b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	ec51 0b19 	vmov	r0, r1, d9
 80048c2:	f7fc f8eb 	bl	8000a9c <__aeabi_dcmplt>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d050      	beq.n	800496c <_dtoa_r+0x244>
 80048ca:	9b00      	ldr	r3, [sp, #0]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	2300      	movs	r3, #0
 80048d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80048d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80048d6:	1b5d      	subs	r5, r3, r5
 80048d8:	1e6b      	subs	r3, r5, #1
 80048da:	9305      	str	r3, [sp, #20]
 80048dc:	bf45      	ittet	mi
 80048de:	f1c5 0301 	rsbmi	r3, r5, #1
 80048e2:	9304      	strmi	r3, [sp, #16]
 80048e4:	2300      	movpl	r3, #0
 80048e6:	2300      	movmi	r3, #0
 80048e8:	bf4c      	ite	mi
 80048ea:	9305      	strmi	r3, [sp, #20]
 80048ec:	9304      	strpl	r3, [sp, #16]
 80048ee:	9b00      	ldr	r3, [sp, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db3d      	blt.n	8004970 <_dtoa_r+0x248>
 80048f4:	9b05      	ldr	r3, [sp, #20]
 80048f6:	9a00      	ldr	r2, [sp, #0]
 80048f8:	920a      	str	r2, [sp, #40]	; 0x28
 80048fa:	4413      	add	r3, r2
 80048fc:	9305      	str	r3, [sp, #20]
 80048fe:	2300      	movs	r3, #0
 8004900:	9307      	str	r3, [sp, #28]
 8004902:	9b06      	ldr	r3, [sp, #24]
 8004904:	2b09      	cmp	r3, #9
 8004906:	f200 8089 	bhi.w	8004a1c <_dtoa_r+0x2f4>
 800490a:	2b05      	cmp	r3, #5
 800490c:	bfc4      	itt	gt
 800490e:	3b04      	subgt	r3, #4
 8004910:	9306      	strgt	r3, [sp, #24]
 8004912:	9b06      	ldr	r3, [sp, #24]
 8004914:	f1a3 0302 	sub.w	r3, r3, #2
 8004918:	bfcc      	ite	gt
 800491a:	2500      	movgt	r5, #0
 800491c:	2501      	movle	r5, #1
 800491e:	2b03      	cmp	r3, #3
 8004920:	f200 8087 	bhi.w	8004a32 <_dtoa_r+0x30a>
 8004924:	e8df f003 	tbb	[pc, r3]
 8004928:	59383a2d 	.word	0x59383a2d
 800492c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004930:	441d      	add	r5, r3
 8004932:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004936:	2b20      	cmp	r3, #32
 8004938:	bfc1      	itttt	gt
 800493a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800493e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004942:	fa0b f303 	lslgt.w	r3, fp, r3
 8004946:	fa26 f000 	lsrgt.w	r0, r6, r0
 800494a:	bfda      	itte	le
 800494c:	f1c3 0320 	rsble	r3, r3, #32
 8004950:	fa06 f003 	lslle.w	r0, r6, r3
 8004954:	4318      	orrgt	r0, r3
 8004956:	f7fb fdb5 	bl	80004c4 <__aeabi_ui2d>
 800495a:	2301      	movs	r3, #1
 800495c:	4606      	mov	r6, r0
 800495e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004962:	3d01      	subs	r5, #1
 8004964:	930e      	str	r3, [sp, #56]	; 0x38
 8004966:	e76a      	b.n	800483e <_dtoa_r+0x116>
 8004968:	2301      	movs	r3, #1
 800496a:	e7b2      	b.n	80048d2 <_dtoa_r+0x1aa>
 800496c:	900b      	str	r0, [sp, #44]	; 0x2c
 800496e:	e7b1      	b.n	80048d4 <_dtoa_r+0x1ac>
 8004970:	9b04      	ldr	r3, [sp, #16]
 8004972:	9a00      	ldr	r2, [sp, #0]
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	9304      	str	r3, [sp, #16]
 8004978:	4253      	negs	r3, r2
 800497a:	9307      	str	r3, [sp, #28]
 800497c:	2300      	movs	r3, #0
 800497e:	930a      	str	r3, [sp, #40]	; 0x28
 8004980:	e7bf      	b.n	8004902 <_dtoa_r+0x1da>
 8004982:	2300      	movs	r3, #0
 8004984:	9308      	str	r3, [sp, #32]
 8004986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	dc55      	bgt.n	8004a38 <_dtoa_r+0x310>
 800498c:	2301      	movs	r3, #1
 800498e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004992:	461a      	mov	r2, r3
 8004994:	9209      	str	r2, [sp, #36]	; 0x24
 8004996:	e00c      	b.n	80049b2 <_dtoa_r+0x28a>
 8004998:	2301      	movs	r3, #1
 800499a:	e7f3      	b.n	8004984 <_dtoa_r+0x25c>
 800499c:	2300      	movs	r3, #0
 800499e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049a0:	9308      	str	r3, [sp, #32]
 80049a2:	9b00      	ldr	r3, [sp, #0]
 80049a4:	4413      	add	r3, r2
 80049a6:	9302      	str	r3, [sp, #8]
 80049a8:	3301      	adds	r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	9303      	str	r3, [sp, #12]
 80049ae:	bfb8      	it	lt
 80049b0:	2301      	movlt	r3, #1
 80049b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80049b4:	2200      	movs	r2, #0
 80049b6:	6042      	str	r2, [r0, #4]
 80049b8:	2204      	movs	r2, #4
 80049ba:	f102 0614 	add.w	r6, r2, #20
 80049be:	429e      	cmp	r6, r3
 80049c0:	6841      	ldr	r1, [r0, #4]
 80049c2:	d93d      	bls.n	8004a40 <_dtoa_r+0x318>
 80049c4:	4620      	mov	r0, r4
 80049c6:	f000 feeb 	bl	80057a0 <_Balloc>
 80049ca:	9001      	str	r0, [sp, #4]
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d13b      	bne.n	8004a48 <_dtoa_r+0x320>
 80049d0:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <_dtoa_r+0x2f0>)
 80049d2:	4602      	mov	r2, r0
 80049d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80049d8:	e6c0      	b.n	800475c <_dtoa_r+0x34>
 80049da:	2301      	movs	r3, #1
 80049dc:	e7df      	b.n	800499e <_dtoa_r+0x276>
 80049de:	bf00      	nop
 80049e0:	636f4361 	.word	0x636f4361
 80049e4:	3fd287a7 	.word	0x3fd287a7
 80049e8:	8b60c8b3 	.word	0x8b60c8b3
 80049ec:	3fc68a28 	.word	0x3fc68a28
 80049f0:	509f79fb 	.word	0x509f79fb
 80049f4:	3fd34413 	.word	0x3fd34413
 80049f8:	08006f0e 	.word	0x08006f0e
 80049fc:	08006f25 	.word	0x08006f25
 8004a00:	7ff00000 	.word	0x7ff00000
 8004a04:	08006f0a 	.word	0x08006f0a
 8004a08:	08006f01 	.word	0x08006f01
 8004a0c:	08006ecd 	.word	0x08006ecd
 8004a10:	3ff80000 	.word	0x3ff80000
 8004a14:	08007050 	.word	0x08007050
 8004a18:	08006f64 	.word	0x08006f64
 8004a1c:	2501      	movs	r5, #1
 8004a1e:	2300      	movs	r3, #0
 8004a20:	9306      	str	r3, [sp, #24]
 8004a22:	9508      	str	r5, [sp, #32]
 8004a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2312      	movs	r3, #18
 8004a30:	e7b0      	b.n	8004994 <_dtoa_r+0x26c>
 8004a32:	2301      	movs	r3, #1
 8004a34:	9308      	str	r3, [sp, #32]
 8004a36:	e7f5      	b.n	8004a24 <_dtoa_r+0x2fc>
 8004a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004a3e:	e7b8      	b.n	80049b2 <_dtoa_r+0x28a>
 8004a40:	3101      	adds	r1, #1
 8004a42:	6041      	str	r1, [r0, #4]
 8004a44:	0052      	lsls	r2, r2, #1
 8004a46:	e7b8      	b.n	80049ba <_dtoa_r+0x292>
 8004a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a4a:	9a01      	ldr	r2, [sp, #4]
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	9b03      	ldr	r3, [sp, #12]
 8004a50:	2b0e      	cmp	r3, #14
 8004a52:	f200 809d 	bhi.w	8004b90 <_dtoa_r+0x468>
 8004a56:	2d00      	cmp	r5, #0
 8004a58:	f000 809a 	beq.w	8004b90 <_dtoa_r+0x468>
 8004a5c:	9b00      	ldr	r3, [sp, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	dd32      	ble.n	8004ac8 <_dtoa_r+0x3a0>
 8004a62:	4ab7      	ldr	r2, [pc, #732]	; (8004d40 <_dtoa_r+0x618>)
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004a6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a70:	9b00      	ldr	r3, [sp, #0]
 8004a72:	05d8      	lsls	r0, r3, #23
 8004a74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004a78:	d516      	bpl.n	8004aa8 <_dtoa_r+0x380>
 8004a7a:	4bb2      	ldr	r3, [pc, #712]	; (8004d44 <_dtoa_r+0x61c>)
 8004a7c:	ec51 0b19 	vmov	r0, r1, d9
 8004a80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a84:	f7fb fec2 	bl	800080c <__aeabi_ddiv>
 8004a88:	f007 070f 	and.w	r7, r7, #15
 8004a8c:	4682      	mov	sl, r0
 8004a8e:	468b      	mov	fp, r1
 8004a90:	2503      	movs	r5, #3
 8004a92:	4eac      	ldr	r6, [pc, #688]	; (8004d44 <_dtoa_r+0x61c>)
 8004a94:	b957      	cbnz	r7, 8004aac <_dtoa_r+0x384>
 8004a96:	4642      	mov	r2, r8
 8004a98:	464b      	mov	r3, r9
 8004a9a:	4650      	mov	r0, sl
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	f7fb feb5 	bl	800080c <__aeabi_ddiv>
 8004aa2:	4682      	mov	sl, r0
 8004aa4:	468b      	mov	fp, r1
 8004aa6:	e028      	b.n	8004afa <_dtoa_r+0x3d2>
 8004aa8:	2502      	movs	r5, #2
 8004aaa:	e7f2      	b.n	8004a92 <_dtoa_r+0x36a>
 8004aac:	07f9      	lsls	r1, r7, #31
 8004aae:	d508      	bpl.n	8004ac2 <_dtoa_r+0x39a>
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ab8:	f7fb fd7e 	bl	80005b8 <__aeabi_dmul>
 8004abc:	3501      	adds	r5, #1
 8004abe:	4680      	mov	r8, r0
 8004ac0:	4689      	mov	r9, r1
 8004ac2:	107f      	asrs	r7, r7, #1
 8004ac4:	3608      	adds	r6, #8
 8004ac6:	e7e5      	b.n	8004a94 <_dtoa_r+0x36c>
 8004ac8:	f000 809b 	beq.w	8004c02 <_dtoa_r+0x4da>
 8004acc:	9b00      	ldr	r3, [sp, #0]
 8004ace:	4f9d      	ldr	r7, [pc, #628]	; (8004d44 <_dtoa_r+0x61c>)
 8004ad0:	425e      	negs	r6, r3
 8004ad2:	4b9b      	ldr	r3, [pc, #620]	; (8004d40 <_dtoa_r+0x618>)
 8004ad4:	f006 020f 	and.w	r2, r6, #15
 8004ad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	ec51 0b19 	vmov	r0, r1, d9
 8004ae4:	f7fb fd68 	bl	80005b8 <__aeabi_dmul>
 8004ae8:	1136      	asrs	r6, r6, #4
 8004aea:	4682      	mov	sl, r0
 8004aec:	468b      	mov	fp, r1
 8004aee:	2300      	movs	r3, #0
 8004af0:	2502      	movs	r5, #2
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	d17a      	bne.n	8004bec <_dtoa_r+0x4c4>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1d3      	bne.n	8004aa2 <_dtoa_r+0x37a>
 8004afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8082 	beq.w	8004c06 <_dtoa_r+0x4de>
 8004b02:	4b91      	ldr	r3, [pc, #580]	; (8004d48 <_dtoa_r+0x620>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	4650      	mov	r0, sl
 8004b08:	4659      	mov	r1, fp
 8004b0a:	f7fb ffc7 	bl	8000a9c <__aeabi_dcmplt>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d079      	beq.n	8004c06 <_dtoa_r+0x4de>
 8004b12:	9b03      	ldr	r3, [sp, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d076      	beq.n	8004c06 <_dtoa_r+0x4de>
 8004b18:	9b02      	ldr	r3, [sp, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	dd36      	ble.n	8004b8c <_dtoa_r+0x464>
 8004b1e:	9b00      	ldr	r3, [sp, #0]
 8004b20:	4650      	mov	r0, sl
 8004b22:	4659      	mov	r1, fp
 8004b24:	1e5f      	subs	r7, r3, #1
 8004b26:	2200      	movs	r2, #0
 8004b28:	4b88      	ldr	r3, [pc, #544]	; (8004d4c <_dtoa_r+0x624>)
 8004b2a:	f7fb fd45 	bl	80005b8 <__aeabi_dmul>
 8004b2e:	9e02      	ldr	r6, [sp, #8]
 8004b30:	4682      	mov	sl, r0
 8004b32:	468b      	mov	fp, r1
 8004b34:	3501      	adds	r5, #1
 8004b36:	4628      	mov	r0, r5
 8004b38:	f7fb fcd4 	bl	80004e4 <__aeabi_i2d>
 8004b3c:	4652      	mov	r2, sl
 8004b3e:	465b      	mov	r3, fp
 8004b40:	f7fb fd3a 	bl	80005b8 <__aeabi_dmul>
 8004b44:	4b82      	ldr	r3, [pc, #520]	; (8004d50 <_dtoa_r+0x628>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	f7fb fb80 	bl	800024c <__adddf3>
 8004b4c:	46d0      	mov	r8, sl
 8004b4e:	46d9      	mov	r9, fp
 8004b50:	4682      	mov	sl, r0
 8004b52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004b56:	2e00      	cmp	r6, #0
 8004b58:	d158      	bne.n	8004c0c <_dtoa_r+0x4e4>
 8004b5a:	4b7e      	ldr	r3, [pc, #504]	; (8004d54 <_dtoa_r+0x62c>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4640      	mov	r0, r8
 8004b60:	4649      	mov	r1, r9
 8004b62:	f7fb fb71 	bl	8000248 <__aeabi_dsub>
 8004b66:	4652      	mov	r2, sl
 8004b68:	465b      	mov	r3, fp
 8004b6a:	4680      	mov	r8, r0
 8004b6c:	4689      	mov	r9, r1
 8004b6e:	f7fb ffb3 	bl	8000ad8 <__aeabi_dcmpgt>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	f040 8295 	bne.w	80050a2 <_dtoa_r+0x97a>
 8004b78:	4652      	mov	r2, sl
 8004b7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004b7e:	4640      	mov	r0, r8
 8004b80:	4649      	mov	r1, r9
 8004b82:	f7fb ff8b 	bl	8000a9c <__aeabi_dcmplt>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	f040 8289 	bne.w	800509e <_dtoa_r+0x976>
 8004b8c:	ec5b ab19 	vmov	sl, fp, d9
 8004b90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f2c0 8148 	blt.w	8004e28 <_dtoa_r+0x700>
 8004b98:	9a00      	ldr	r2, [sp, #0]
 8004b9a:	2a0e      	cmp	r2, #14
 8004b9c:	f300 8144 	bgt.w	8004e28 <_dtoa_r+0x700>
 8004ba0:	4b67      	ldr	r3, [pc, #412]	; (8004d40 <_dtoa_r+0x618>)
 8004ba2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ba6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f280 80d5 	bge.w	8004d5c <_dtoa_r+0x634>
 8004bb2:	9b03      	ldr	r3, [sp, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f300 80d1 	bgt.w	8004d5c <_dtoa_r+0x634>
 8004bba:	f040 826f 	bne.w	800509c <_dtoa_r+0x974>
 8004bbe:	4b65      	ldr	r3, [pc, #404]	; (8004d54 <_dtoa_r+0x62c>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	f7fb fcf7 	bl	80005b8 <__aeabi_dmul>
 8004bca:	4652      	mov	r2, sl
 8004bcc:	465b      	mov	r3, fp
 8004bce:	f7fb ff79 	bl	8000ac4 <__aeabi_dcmpge>
 8004bd2:	9e03      	ldr	r6, [sp, #12]
 8004bd4:	4637      	mov	r7, r6
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	f040 8245 	bne.w	8005066 <_dtoa_r+0x93e>
 8004bdc:	9d01      	ldr	r5, [sp, #4]
 8004bde:	2331      	movs	r3, #49	; 0x31
 8004be0:	f805 3b01 	strb.w	r3, [r5], #1
 8004be4:	9b00      	ldr	r3, [sp, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	e240      	b.n	800506e <_dtoa_r+0x946>
 8004bec:	07f2      	lsls	r2, r6, #31
 8004bee:	d505      	bpl.n	8004bfc <_dtoa_r+0x4d4>
 8004bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bf4:	f7fb fce0 	bl	80005b8 <__aeabi_dmul>
 8004bf8:	3501      	adds	r5, #1
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	1076      	asrs	r6, r6, #1
 8004bfe:	3708      	adds	r7, #8
 8004c00:	e777      	b.n	8004af2 <_dtoa_r+0x3ca>
 8004c02:	2502      	movs	r5, #2
 8004c04:	e779      	b.n	8004afa <_dtoa_r+0x3d2>
 8004c06:	9f00      	ldr	r7, [sp, #0]
 8004c08:	9e03      	ldr	r6, [sp, #12]
 8004c0a:	e794      	b.n	8004b36 <_dtoa_r+0x40e>
 8004c0c:	9901      	ldr	r1, [sp, #4]
 8004c0e:	4b4c      	ldr	r3, [pc, #304]	; (8004d40 <_dtoa_r+0x618>)
 8004c10:	4431      	add	r1, r6
 8004c12:	910d      	str	r1, [sp, #52]	; 0x34
 8004c14:	9908      	ldr	r1, [sp, #32]
 8004c16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004c1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c1e:	2900      	cmp	r1, #0
 8004c20:	d043      	beq.n	8004caa <_dtoa_r+0x582>
 8004c22:	494d      	ldr	r1, [pc, #308]	; (8004d58 <_dtoa_r+0x630>)
 8004c24:	2000      	movs	r0, #0
 8004c26:	f7fb fdf1 	bl	800080c <__aeabi_ddiv>
 8004c2a:	4652      	mov	r2, sl
 8004c2c:	465b      	mov	r3, fp
 8004c2e:	f7fb fb0b 	bl	8000248 <__aeabi_dsub>
 8004c32:	9d01      	ldr	r5, [sp, #4]
 8004c34:	4682      	mov	sl, r0
 8004c36:	468b      	mov	fp, r1
 8004c38:	4649      	mov	r1, r9
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	f7fb ff6c 	bl	8000b18 <__aeabi_d2iz>
 8004c40:	4606      	mov	r6, r0
 8004c42:	f7fb fc4f 	bl	80004e4 <__aeabi_i2d>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4640      	mov	r0, r8
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	f7fb fafb 	bl	8000248 <__aeabi_dsub>
 8004c52:	3630      	adds	r6, #48	; 0x30
 8004c54:	f805 6b01 	strb.w	r6, [r5], #1
 8004c58:	4652      	mov	r2, sl
 8004c5a:	465b      	mov	r3, fp
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	4689      	mov	r9, r1
 8004c60:	f7fb ff1c 	bl	8000a9c <__aeabi_dcmplt>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d163      	bne.n	8004d30 <_dtoa_r+0x608>
 8004c68:	4642      	mov	r2, r8
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	4936      	ldr	r1, [pc, #216]	; (8004d48 <_dtoa_r+0x620>)
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f7fb faea 	bl	8000248 <__aeabi_dsub>
 8004c74:	4652      	mov	r2, sl
 8004c76:	465b      	mov	r3, fp
 8004c78:	f7fb ff10 	bl	8000a9c <__aeabi_dcmplt>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	f040 80b5 	bne.w	8004dec <_dtoa_r+0x6c4>
 8004c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c84:	429d      	cmp	r5, r3
 8004c86:	d081      	beq.n	8004b8c <_dtoa_r+0x464>
 8004c88:	4b30      	ldr	r3, [pc, #192]	; (8004d4c <_dtoa_r+0x624>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	4650      	mov	r0, sl
 8004c8e:	4659      	mov	r1, fp
 8004c90:	f7fb fc92 	bl	80005b8 <__aeabi_dmul>
 8004c94:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <_dtoa_r+0x624>)
 8004c96:	4682      	mov	sl, r0
 8004c98:	468b      	mov	fp, r1
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f7fb fc8a 	bl	80005b8 <__aeabi_dmul>
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	4689      	mov	r9, r1
 8004ca8:	e7c6      	b.n	8004c38 <_dtoa_r+0x510>
 8004caa:	4650      	mov	r0, sl
 8004cac:	4659      	mov	r1, fp
 8004cae:	f7fb fc83 	bl	80005b8 <__aeabi_dmul>
 8004cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb4:	9d01      	ldr	r5, [sp, #4]
 8004cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cb8:	4682      	mov	sl, r0
 8004cba:	468b      	mov	fp, r1
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	f7fb ff2a 	bl	8000b18 <__aeabi_d2iz>
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	f7fb fc0d 	bl	80004e4 <__aeabi_i2d>
 8004cca:	3630      	adds	r6, #48	; 0x30
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4640      	mov	r0, r8
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	f7fb fab8 	bl	8000248 <__aeabi_dsub>
 8004cd8:	f805 6b01 	strb.w	r6, [r5], #1
 8004cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cde:	429d      	cmp	r5, r3
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	4689      	mov	r9, r1
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	d124      	bne.n	8004d34 <_dtoa_r+0x60c>
 8004cea:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <_dtoa_r+0x630>)
 8004cec:	4650      	mov	r0, sl
 8004cee:	4659      	mov	r1, fp
 8004cf0:	f7fb faac 	bl	800024c <__adddf3>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	f7fb feec 	bl	8000ad8 <__aeabi_dcmpgt>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d173      	bne.n	8004dec <_dtoa_r+0x6c4>
 8004d04:	4652      	mov	r2, sl
 8004d06:	465b      	mov	r3, fp
 8004d08:	4913      	ldr	r1, [pc, #76]	; (8004d58 <_dtoa_r+0x630>)
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f7fb fa9c 	bl	8000248 <__aeabi_dsub>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb fec0 	bl	8000a9c <__aeabi_dcmplt>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	f43f af35 	beq.w	8004b8c <_dtoa_r+0x464>
 8004d22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004d24:	1e6b      	subs	r3, r5, #1
 8004d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d2c:	2b30      	cmp	r3, #48	; 0x30
 8004d2e:	d0f8      	beq.n	8004d22 <_dtoa_r+0x5fa>
 8004d30:	9700      	str	r7, [sp, #0]
 8004d32:	e049      	b.n	8004dc8 <_dtoa_r+0x6a0>
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <_dtoa_r+0x624>)
 8004d36:	f7fb fc3f 	bl	80005b8 <__aeabi_dmul>
 8004d3a:	4680      	mov	r8, r0
 8004d3c:	4689      	mov	r9, r1
 8004d3e:	e7bd      	b.n	8004cbc <_dtoa_r+0x594>
 8004d40:	08007050 	.word	0x08007050
 8004d44:	08007028 	.word	0x08007028
 8004d48:	3ff00000 	.word	0x3ff00000
 8004d4c:	40240000 	.word	0x40240000
 8004d50:	401c0000 	.word	0x401c0000
 8004d54:	40140000 	.word	0x40140000
 8004d58:	3fe00000 	.word	0x3fe00000
 8004d5c:	9d01      	ldr	r5, [sp, #4]
 8004d5e:	4656      	mov	r6, sl
 8004d60:	465f      	mov	r7, fp
 8004d62:	4642      	mov	r2, r8
 8004d64:	464b      	mov	r3, r9
 8004d66:	4630      	mov	r0, r6
 8004d68:	4639      	mov	r1, r7
 8004d6a:	f7fb fd4f 	bl	800080c <__aeabi_ddiv>
 8004d6e:	f7fb fed3 	bl	8000b18 <__aeabi_d2iz>
 8004d72:	4682      	mov	sl, r0
 8004d74:	f7fb fbb6 	bl	80004e4 <__aeabi_i2d>
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	f7fb fc1c 	bl	80005b8 <__aeabi_dmul>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4630      	mov	r0, r6
 8004d86:	4639      	mov	r1, r7
 8004d88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004d8c:	f7fb fa5c 	bl	8000248 <__aeabi_dsub>
 8004d90:	f805 6b01 	strb.w	r6, [r5], #1
 8004d94:	9e01      	ldr	r6, [sp, #4]
 8004d96:	9f03      	ldr	r7, [sp, #12]
 8004d98:	1bae      	subs	r6, r5, r6
 8004d9a:	42b7      	cmp	r7, r6
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	d135      	bne.n	8004e0e <_dtoa_r+0x6e6>
 8004da2:	f7fb fa53 	bl	800024c <__adddf3>
 8004da6:	4642      	mov	r2, r8
 8004da8:	464b      	mov	r3, r9
 8004daa:	4606      	mov	r6, r0
 8004dac:	460f      	mov	r7, r1
 8004dae:	f7fb fe93 	bl	8000ad8 <__aeabi_dcmpgt>
 8004db2:	b9d0      	cbnz	r0, 8004dea <_dtoa_r+0x6c2>
 8004db4:	4642      	mov	r2, r8
 8004db6:	464b      	mov	r3, r9
 8004db8:	4630      	mov	r0, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fb fe64 	bl	8000a88 <__aeabi_dcmpeq>
 8004dc0:	b110      	cbz	r0, 8004dc8 <_dtoa_r+0x6a0>
 8004dc2:	f01a 0f01 	tst.w	sl, #1
 8004dc6:	d110      	bne.n	8004dea <_dtoa_r+0x6c2>
 8004dc8:	4620      	mov	r0, r4
 8004dca:	ee18 1a10 	vmov	r1, s16
 8004dce:	f000 fd27 	bl	8005820 <_Bfree>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9800      	ldr	r0, [sp, #0]
 8004dd6:	702b      	strb	r3, [r5, #0]
 8004dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dda:	3001      	adds	r0, #1
 8004ddc:	6018      	str	r0, [r3, #0]
 8004dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f43f acf1 	beq.w	80047c8 <_dtoa_r+0xa0>
 8004de6:	601d      	str	r5, [r3, #0]
 8004de8:	e4ee      	b.n	80047c8 <_dtoa_r+0xa0>
 8004dea:	9f00      	ldr	r7, [sp, #0]
 8004dec:	462b      	mov	r3, r5
 8004dee:	461d      	mov	r5, r3
 8004df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004df4:	2a39      	cmp	r2, #57	; 0x39
 8004df6:	d106      	bne.n	8004e06 <_dtoa_r+0x6de>
 8004df8:	9a01      	ldr	r2, [sp, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d1f7      	bne.n	8004dee <_dtoa_r+0x6c6>
 8004dfe:	9901      	ldr	r1, [sp, #4]
 8004e00:	2230      	movs	r2, #48	; 0x30
 8004e02:	3701      	adds	r7, #1
 8004e04:	700a      	strb	r2, [r1, #0]
 8004e06:	781a      	ldrb	r2, [r3, #0]
 8004e08:	3201      	adds	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	e790      	b.n	8004d30 <_dtoa_r+0x608>
 8004e0e:	4ba6      	ldr	r3, [pc, #664]	; (80050a8 <_dtoa_r+0x980>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	f7fb fbd1 	bl	80005b8 <__aeabi_dmul>
 8004e16:	2200      	movs	r2, #0
 8004e18:	2300      	movs	r3, #0
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	460f      	mov	r7, r1
 8004e1e:	f7fb fe33 	bl	8000a88 <__aeabi_dcmpeq>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d09d      	beq.n	8004d62 <_dtoa_r+0x63a>
 8004e26:	e7cf      	b.n	8004dc8 <_dtoa_r+0x6a0>
 8004e28:	9a08      	ldr	r2, [sp, #32]
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	f000 80d7 	beq.w	8004fde <_dtoa_r+0x8b6>
 8004e30:	9a06      	ldr	r2, [sp, #24]
 8004e32:	2a01      	cmp	r2, #1
 8004e34:	f300 80ba 	bgt.w	8004fac <_dtoa_r+0x884>
 8004e38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e3a:	2a00      	cmp	r2, #0
 8004e3c:	f000 80b2 	beq.w	8004fa4 <_dtoa_r+0x87c>
 8004e40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e44:	9e07      	ldr	r6, [sp, #28]
 8004e46:	9d04      	ldr	r5, [sp, #16]
 8004e48:	9a04      	ldr	r2, [sp, #16]
 8004e4a:	441a      	add	r2, r3
 8004e4c:	9204      	str	r2, [sp, #16]
 8004e4e:	9a05      	ldr	r2, [sp, #20]
 8004e50:	2101      	movs	r1, #1
 8004e52:	441a      	add	r2, r3
 8004e54:	4620      	mov	r0, r4
 8004e56:	9205      	str	r2, [sp, #20]
 8004e58:	f000 fd9a 	bl	8005990 <__i2b>
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	2d00      	cmp	r5, #0
 8004e60:	dd0c      	ble.n	8004e7c <_dtoa_r+0x754>
 8004e62:	9b05      	ldr	r3, [sp, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dd09      	ble.n	8004e7c <_dtoa_r+0x754>
 8004e68:	42ab      	cmp	r3, r5
 8004e6a:	9a04      	ldr	r2, [sp, #16]
 8004e6c:	bfa8      	it	ge
 8004e6e:	462b      	movge	r3, r5
 8004e70:	1ad2      	subs	r2, r2, r3
 8004e72:	9204      	str	r2, [sp, #16]
 8004e74:	9a05      	ldr	r2, [sp, #20]
 8004e76:	1aed      	subs	r5, r5, r3
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	9305      	str	r3, [sp, #20]
 8004e7c:	9b07      	ldr	r3, [sp, #28]
 8004e7e:	b31b      	cbz	r3, 8004ec8 <_dtoa_r+0x7a0>
 8004e80:	9b08      	ldr	r3, [sp, #32]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80af 	beq.w	8004fe6 <_dtoa_r+0x8be>
 8004e88:	2e00      	cmp	r6, #0
 8004e8a:	dd13      	ble.n	8004eb4 <_dtoa_r+0x78c>
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	4632      	mov	r2, r6
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 fe3d 	bl	8005b10 <__pow5mult>
 8004e96:	ee18 2a10 	vmov	r2, s16
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f000 fd8c 	bl	80059bc <__multiply>
 8004ea4:	ee18 1a10 	vmov	r1, s16
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f000 fcb8 	bl	8005820 <_Bfree>
 8004eb0:	ee08 8a10 	vmov	s16, r8
 8004eb4:	9b07      	ldr	r3, [sp, #28]
 8004eb6:	1b9a      	subs	r2, r3, r6
 8004eb8:	d006      	beq.n	8004ec8 <_dtoa_r+0x7a0>
 8004eba:	ee18 1a10 	vmov	r1, s16
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f000 fe26 	bl	8005b10 <__pow5mult>
 8004ec4:	ee08 0a10 	vmov	s16, r0
 8004ec8:	2101      	movs	r1, #1
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f000 fd60 	bl	8005990 <__i2b>
 8004ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	4606      	mov	r6, r0
 8004ed6:	f340 8088 	ble.w	8004fea <_dtoa_r+0x8c2>
 8004eda:	461a      	mov	r2, r3
 8004edc:	4601      	mov	r1, r0
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f000 fe16 	bl	8005b10 <__pow5mult>
 8004ee4:	9b06      	ldr	r3, [sp, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	4606      	mov	r6, r0
 8004eea:	f340 8081 	ble.w	8004ff0 <_dtoa_r+0x8c8>
 8004eee:	f04f 0800 	mov.w	r8, #0
 8004ef2:	6933      	ldr	r3, [r6, #16]
 8004ef4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ef8:	6918      	ldr	r0, [r3, #16]
 8004efa:	f000 fcf9 	bl	80058f0 <__hi0bits>
 8004efe:	f1c0 0020 	rsb	r0, r0, #32
 8004f02:	9b05      	ldr	r3, [sp, #20]
 8004f04:	4418      	add	r0, r3
 8004f06:	f010 001f 	ands.w	r0, r0, #31
 8004f0a:	f000 8092 	beq.w	8005032 <_dtoa_r+0x90a>
 8004f0e:	f1c0 0320 	rsb	r3, r0, #32
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	f340 808a 	ble.w	800502c <_dtoa_r+0x904>
 8004f18:	f1c0 001c 	rsb	r0, r0, #28
 8004f1c:	9b04      	ldr	r3, [sp, #16]
 8004f1e:	4403      	add	r3, r0
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	9b05      	ldr	r3, [sp, #20]
 8004f24:	4403      	add	r3, r0
 8004f26:	4405      	add	r5, r0
 8004f28:	9305      	str	r3, [sp, #20]
 8004f2a:	9b04      	ldr	r3, [sp, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	dd07      	ble.n	8004f40 <_dtoa_r+0x818>
 8004f30:	ee18 1a10 	vmov	r1, s16
 8004f34:	461a      	mov	r2, r3
 8004f36:	4620      	mov	r0, r4
 8004f38:	f000 fe44 	bl	8005bc4 <__lshift>
 8004f3c:	ee08 0a10 	vmov	s16, r0
 8004f40:	9b05      	ldr	r3, [sp, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	dd05      	ble.n	8004f52 <_dtoa_r+0x82a>
 8004f46:	4631      	mov	r1, r6
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 fe3a 	bl	8005bc4 <__lshift>
 8004f50:	4606      	mov	r6, r0
 8004f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d06e      	beq.n	8005036 <_dtoa_r+0x90e>
 8004f58:	ee18 0a10 	vmov	r0, s16
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	f000 fea1 	bl	8005ca4 <__mcmp>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	da67      	bge.n	8005036 <_dtoa_r+0x90e>
 8004f66:	9b00      	ldr	r3, [sp, #0]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	ee18 1a10 	vmov	r1, s16
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	220a      	movs	r2, #10
 8004f72:	2300      	movs	r3, #0
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 fc75 	bl	8005864 <__multadd>
 8004f7a:	9b08      	ldr	r3, [sp, #32]
 8004f7c:	ee08 0a10 	vmov	s16, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 81b1 	beq.w	80052e8 <_dtoa_r+0xbc0>
 8004f86:	2300      	movs	r3, #0
 8004f88:	4639      	mov	r1, r7
 8004f8a:	220a      	movs	r2, #10
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f000 fc69 	bl	8005864 <__multadd>
 8004f92:	9b02      	ldr	r3, [sp, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	4607      	mov	r7, r0
 8004f98:	f300 808e 	bgt.w	80050b8 <_dtoa_r+0x990>
 8004f9c:	9b06      	ldr	r3, [sp, #24]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	dc51      	bgt.n	8005046 <_dtoa_r+0x91e>
 8004fa2:	e089      	b.n	80050b8 <_dtoa_r+0x990>
 8004fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004faa:	e74b      	b.n	8004e44 <_dtoa_r+0x71c>
 8004fac:	9b03      	ldr	r3, [sp, #12]
 8004fae:	1e5e      	subs	r6, r3, #1
 8004fb0:	9b07      	ldr	r3, [sp, #28]
 8004fb2:	42b3      	cmp	r3, r6
 8004fb4:	bfbf      	itttt	lt
 8004fb6:	9b07      	ldrlt	r3, [sp, #28]
 8004fb8:	9607      	strlt	r6, [sp, #28]
 8004fba:	1af2      	sublt	r2, r6, r3
 8004fbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004fbe:	bfb6      	itet	lt
 8004fc0:	189b      	addlt	r3, r3, r2
 8004fc2:	1b9e      	subge	r6, r3, r6
 8004fc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004fc6:	9b03      	ldr	r3, [sp, #12]
 8004fc8:	bfb8      	it	lt
 8004fca:	2600      	movlt	r6, #0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bfb7      	itett	lt
 8004fd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004fd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004fd8:	1a9d      	sublt	r5, r3, r2
 8004fda:	2300      	movlt	r3, #0
 8004fdc:	e734      	b.n	8004e48 <_dtoa_r+0x720>
 8004fde:	9e07      	ldr	r6, [sp, #28]
 8004fe0:	9d04      	ldr	r5, [sp, #16]
 8004fe2:	9f08      	ldr	r7, [sp, #32]
 8004fe4:	e73b      	b.n	8004e5e <_dtoa_r+0x736>
 8004fe6:	9a07      	ldr	r2, [sp, #28]
 8004fe8:	e767      	b.n	8004eba <_dtoa_r+0x792>
 8004fea:	9b06      	ldr	r3, [sp, #24]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	dc18      	bgt.n	8005022 <_dtoa_r+0x8fa>
 8004ff0:	f1ba 0f00 	cmp.w	sl, #0
 8004ff4:	d115      	bne.n	8005022 <_dtoa_r+0x8fa>
 8004ff6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ffa:	b993      	cbnz	r3, 8005022 <_dtoa_r+0x8fa>
 8004ffc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005000:	0d1b      	lsrs	r3, r3, #20
 8005002:	051b      	lsls	r3, r3, #20
 8005004:	b183      	cbz	r3, 8005028 <_dtoa_r+0x900>
 8005006:	9b04      	ldr	r3, [sp, #16]
 8005008:	3301      	adds	r3, #1
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	9b05      	ldr	r3, [sp, #20]
 800500e:	3301      	adds	r3, #1
 8005010:	9305      	str	r3, [sp, #20]
 8005012:	f04f 0801 	mov.w	r8, #1
 8005016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005018:	2b00      	cmp	r3, #0
 800501a:	f47f af6a 	bne.w	8004ef2 <_dtoa_r+0x7ca>
 800501e:	2001      	movs	r0, #1
 8005020:	e76f      	b.n	8004f02 <_dtoa_r+0x7da>
 8005022:	f04f 0800 	mov.w	r8, #0
 8005026:	e7f6      	b.n	8005016 <_dtoa_r+0x8ee>
 8005028:	4698      	mov	r8, r3
 800502a:	e7f4      	b.n	8005016 <_dtoa_r+0x8ee>
 800502c:	f43f af7d 	beq.w	8004f2a <_dtoa_r+0x802>
 8005030:	4618      	mov	r0, r3
 8005032:	301c      	adds	r0, #28
 8005034:	e772      	b.n	8004f1c <_dtoa_r+0x7f4>
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	dc37      	bgt.n	80050ac <_dtoa_r+0x984>
 800503c:	9b06      	ldr	r3, [sp, #24]
 800503e:	2b02      	cmp	r3, #2
 8005040:	dd34      	ble.n	80050ac <_dtoa_r+0x984>
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	9302      	str	r3, [sp, #8]
 8005046:	9b02      	ldr	r3, [sp, #8]
 8005048:	b96b      	cbnz	r3, 8005066 <_dtoa_r+0x93e>
 800504a:	4631      	mov	r1, r6
 800504c:	2205      	movs	r2, #5
 800504e:	4620      	mov	r0, r4
 8005050:	f000 fc08 	bl	8005864 <__multadd>
 8005054:	4601      	mov	r1, r0
 8005056:	4606      	mov	r6, r0
 8005058:	ee18 0a10 	vmov	r0, s16
 800505c:	f000 fe22 	bl	8005ca4 <__mcmp>
 8005060:	2800      	cmp	r0, #0
 8005062:	f73f adbb 	bgt.w	8004bdc <_dtoa_r+0x4b4>
 8005066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005068:	9d01      	ldr	r5, [sp, #4]
 800506a:	43db      	mvns	r3, r3
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	f04f 0800 	mov.w	r8, #0
 8005072:	4631      	mov	r1, r6
 8005074:	4620      	mov	r0, r4
 8005076:	f000 fbd3 	bl	8005820 <_Bfree>
 800507a:	2f00      	cmp	r7, #0
 800507c:	f43f aea4 	beq.w	8004dc8 <_dtoa_r+0x6a0>
 8005080:	f1b8 0f00 	cmp.w	r8, #0
 8005084:	d005      	beq.n	8005092 <_dtoa_r+0x96a>
 8005086:	45b8      	cmp	r8, r7
 8005088:	d003      	beq.n	8005092 <_dtoa_r+0x96a>
 800508a:	4641      	mov	r1, r8
 800508c:	4620      	mov	r0, r4
 800508e:	f000 fbc7 	bl	8005820 <_Bfree>
 8005092:	4639      	mov	r1, r7
 8005094:	4620      	mov	r0, r4
 8005096:	f000 fbc3 	bl	8005820 <_Bfree>
 800509a:	e695      	b.n	8004dc8 <_dtoa_r+0x6a0>
 800509c:	2600      	movs	r6, #0
 800509e:	4637      	mov	r7, r6
 80050a0:	e7e1      	b.n	8005066 <_dtoa_r+0x93e>
 80050a2:	9700      	str	r7, [sp, #0]
 80050a4:	4637      	mov	r7, r6
 80050a6:	e599      	b.n	8004bdc <_dtoa_r+0x4b4>
 80050a8:	40240000 	.word	0x40240000
 80050ac:	9b08      	ldr	r3, [sp, #32]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80ca 	beq.w	8005248 <_dtoa_r+0xb20>
 80050b4:	9b03      	ldr	r3, [sp, #12]
 80050b6:	9302      	str	r3, [sp, #8]
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	dd05      	ble.n	80050c8 <_dtoa_r+0x9a0>
 80050bc:	4639      	mov	r1, r7
 80050be:	462a      	mov	r2, r5
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 fd7f 	bl	8005bc4 <__lshift>
 80050c6:	4607      	mov	r7, r0
 80050c8:	f1b8 0f00 	cmp.w	r8, #0
 80050cc:	d05b      	beq.n	8005186 <_dtoa_r+0xa5e>
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4620      	mov	r0, r4
 80050d2:	f000 fb65 	bl	80057a0 <_Balloc>
 80050d6:	4605      	mov	r5, r0
 80050d8:	b928      	cbnz	r0, 80050e6 <_dtoa_r+0x9be>
 80050da:	4b87      	ldr	r3, [pc, #540]	; (80052f8 <_dtoa_r+0xbd0>)
 80050dc:	4602      	mov	r2, r0
 80050de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80050e2:	f7ff bb3b 	b.w	800475c <_dtoa_r+0x34>
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	3202      	adds	r2, #2
 80050ea:	0092      	lsls	r2, r2, #2
 80050ec:	f107 010c 	add.w	r1, r7, #12
 80050f0:	300c      	adds	r0, #12
 80050f2:	f000 fb3b 	bl	800576c <memcpy>
 80050f6:	2201      	movs	r2, #1
 80050f8:	4629      	mov	r1, r5
 80050fa:	4620      	mov	r0, r4
 80050fc:	f000 fd62 	bl	8005bc4 <__lshift>
 8005100:	9b01      	ldr	r3, [sp, #4]
 8005102:	f103 0901 	add.w	r9, r3, #1
 8005106:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800510a:	4413      	add	r3, r2
 800510c:	9305      	str	r3, [sp, #20]
 800510e:	f00a 0301 	and.w	r3, sl, #1
 8005112:	46b8      	mov	r8, r7
 8005114:	9304      	str	r3, [sp, #16]
 8005116:	4607      	mov	r7, r0
 8005118:	4631      	mov	r1, r6
 800511a:	ee18 0a10 	vmov	r0, s16
 800511e:	f7ff fa76 	bl	800460e <quorem>
 8005122:	4641      	mov	r1, r8
 8005124:	9002      	str	r0, [sp, #8]
 8005126:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800512a:	ee18 0a10 	vmov	r0, s16
 800512e:	f000 fdb9 	bl	8005ca4 <__mcmp>
 8005132:	463a      	mov	r2, r7
 8005134:	9003      	str	r0, [sp, #12]
 8005136:	4631      	mov	r1, r6
 8005138:	4620      	mov	r0, r4
 800513a:	f000 fdcf 	bl	8005cdc <__mdiff>
 800513e:	68c2      	ldr	r2, [r0, #12]
 8005140:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005144:	4605      	mov	r5, r0
 8005146:	bb02      	cbnz	r2, 800518a <_dtoa_r+0xa62>
 8005148:	4601      	mov	r1, r0
 800514a:	ee18 0a10 	vmov	r0, s16
 800514e:	f000 fda9 	bl	8005ca4 <__mcmp>
 8005152:	4602      	mov	r2, r0
 8005154:	4629      	mov	r1, r5
 8005156:	4620      	mov	r0, r4
 8005158:	9207      	str	r2, [sp, #28]
 800515a:	f000 fb61 	bl	8005820 <_Bfree>
 800515e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005162:	ea43 0102 	orr.w	r1, r3, r2
 8005166:	9b04      	ldr	r3, [sp, #16]
 8005168:	430b      	orrs	r3, r1
 800516a:	464d      	mov	r5, r9
 800516c:	d10f      	bne.n	800518e <_dtoa_r+0xa66>
 800516e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005172:	d02a      	beq.n	80051ca <_dtoa_r+0xaa2>
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	dd02      	ble.n	8005180 <_dtoa_r+0xa58>
 800517a:	9b02      	ldr	r3, [sp, #8]
 800517c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005180:	f88b a000 	strb.w	sl, [fp]
 8005184:	e775      	b.n	8005072 <_dtoa_r+0x94a>
 8005186:	4638      	mov	r0, r7
 8005188:	e7ba      	b.n	8005100 <_dtoa_r+0x9d8>
 800518a:	2201      	movs	r2, #1
 800518c:	e7e2      	b.n	8005154 <_dtoa_r+0xa2c>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	db04      	blt.n	800519e <_dtoa_r+0xa76>
 8005194:	9906      	ldr	r1, [sp, #24]
 8005196:	430b      	orrs	r3, r1
 8005198:	9904      	ldr	r1, [sp, #16]
 800519a:	430b      	orrs	r3, r1
 800519c:	d122      	bne.n	80051e4 <_dtoa_r+0xabc>
 800519e:	2a00      	cmp	r2, #0
 80051a0:	ddee      	ble.n	8005180 <_dtoa_r+0xa58>
 80051a2:	ee18 1a10 	vmov	r1, s16
 80051a6:	2201      	movs	r2, #1
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 fd0b 	bl	8005bc4 <__lshift>
 80051ae:	4631      	mov	r1, r6
 80051b0:	ee08 0a10 	vmov	s16, r0
 80051b4:	f000 fd76 	bl	8005ca4 <__mcmp>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	dc03      	bgt.n	80051c4 <_dtoa_r+0xa9c>
 80051bc:	d1e0      	bne.n	8005180 <_dtoa_r+0xa58>
 80051be:	f01a 0f01 	tst.w	sl, #1
 80051c2:	d0dd      	beq.n	8005180 <_dtoa_r+0xa58>
 80051c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80051c8:	d1d7      	bne.n	800517a <_dtoa_r+0xa52>
 80051ca:	2339      	movs	r3, #57	; 0x39
 80051cc:	f88b 3000 	strb.w	r3, [fp]
 80051d0:	462b      	mov	r3, r5
 80051d2:	461d      	mov	r5, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80051da:	2a39      	cmp	r2, #57	; 0x39
 80051dc:	d071      	beq.n	80052c2 <_dtoa_r+0xb9a>
 80051de:	3201      	adds	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e746      	b.n	8005072 <_dtoa_r+0x94a>
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	dd07      	ble.n	80051f8 <_dtoa_r+0xad0>
 80051e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80051ec:	d0ed      	beq.n	80051ca <_dtoa_r+0xaa2>
 80051ee:	f10a 0301 	add.w	r3, sl, #1
 80051f2:	f88b 3000 	strb.w	r3, [fp]
 80051f6:	e73c      	b.n	8005072 <_dtoa_r+0x94a>
 80051f8:	9b05      	ldr	r3, [sp, #20]
 80051fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80051fe:	4599      	cmp	r9, r3
 8005200:	d047      	beq.n	8005292 <_dtoa_r+0xb6a>
 8005202:	ee18 1a10 	vmov	r1, s16
 8005206:	2300      	movs	r3, #0
 8005208:	220a      	movs	r2, #10
 800520a:	4620      	mov	r0, r4
 800520c:	f000 fb2a 	bl	8005864 <__multadd>
 8005210:	45b8      	cmp	r8, r7
 8005212:	ee08 0a10 	vmov	s16, r0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	f04f 020a 	mov.w	r2, #10
 800521e:	4641      	mov	r1, r8
 8005220:	4620      	mov	r0, r4
 8005222:	d106      	bne.n	8005232 <_dtoa_r+0xb0a>
 8005224:	f000 fb1e 	bl	8005864 <__multadd>
 8005228:	4680      	mov	r8, r0
 800522a:	4607      	mov	r7, r0
 800522c:	f109 0901 	add.w	r9, r9, #1
 8005230:	e772      	b.n	8005118 <_dtoa_r+0x9f0>
 8005232:	f000 fb17 	bl	8005864 <__multadd>
 8005236:	4639      	mov	r1, r7
 8005238:	4680      	mov	r8, r0
 800523a:	2300      	movs	r3, #0
 800523c:	220a      	movs	r2, #10
 800523e:	4620      	mov	r0, r4
 8005240:	f000 fb10 	bl	8005864 <__multadd>
 8005244:	4607      	mov	r7, r0
 8005246:	e7f1      	b.n	800522c <_dtoa_r+0xb04>
 8005248:	9b03      	ldr	r3, [sp, #12]
 800524a:	9302      	str	r3, [sp, #8]
 800524c:	9d01      	ldr	r5, [sp, #4]
 800524e:	ee18 0a10 	vmov	r0, s16
 8005252:	4631      	mov	r1, r6
 8005254:	f7ff f9db 	bl	800460e <quorem>
 8005258:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800525c:	9b01      	ldr	r3, [sp, #4]
 800525e:	f805 ab01 	strb.w	sl, [r5], #1
 8005262:	1aea      	subs	r2, r5, r3
 8005264:	9b02      	ldr	r3, [sp, #8]
 8005266:	4293      	cmp	r3, r2
 8005268:	dd09      	ble.n	800527e <_dtoa_r+0xb56>
 800526a:	ee18 1a10 	vmov	r1, s16
 800526e:	2300      	movs	r3, #0
 8005270:	220a      	movs	r2, #10
 8005272:	4620      	mov	r0, r4
 8005274:	f000 faf6 	bl	8005864 <__multadd>
 8005278:	ee08 0a10 	vmov	s16, r0
 800527c:	e7e7      	b.n	800524e <_dtoa_r+0xb26>
 800527e:	9b02      	ldr	r3, [sp, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	bfc8      	it	gt
 8005284:	461d      	movgt	r5, r3
 8005286:	9b01      	ldr	r3, [sp, #4]
 8005288:	bfd8      	it	le
 800528a:	2501      	movle	r5, #1
 800528c:	441d      	add	r5, r3
 800528e:	f04f 0800 	mov.w	r8, #0
 8005292:	ee18 1a10 	vmov	r1, s16
 8005296:	2201      	movs	r2, #1
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fc93 	bl	8005bc4 <__lshift>
 800529e:	4631      	mov	r1, r6
 80052a0:	ee08 0a10 	vmov	s16, r0
 80052a4:	f000 fcfe 	bl	8005ca4 <__mcmp>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	dc91      	bgt.n	80051d0 <_dtoa_r+0xaa8>
 80052ac:	d102      	bne.n	80052b4 <_dtoa_r+0xb8c>
 80052ae:	f01a 0f01 	tst.w	sl, #1
 80052b2:	d18d      	bne.n	80051d0 <_dtoa_r+0xaa8>
 80052b4:	462b      	mov	r3, r5
 80052b6:	461d      	mov	r5, r3
 80052b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052bc:	2a30      	cmp	r2, #48	; 0x30
 80052be:	d0fa      	beq.n	80052b6 <_dtoa_r+0xb8e>
 80052c0:	e6d7      	b.n	8005072 <_dtoa_r+0x94a>
 80052c2:	9a01      	ldr	r2, [sp, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d184      	bne.n	80051d2 <_dtoa_r+0xaaa>
 80052c8:	9b00      	ldr	r3, [sp, #0]
 80052ca:	3301      	adds	r3, #1
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	2331      	movs	r3, #49	; 0x31
 80052d0:	7013      	strb	r3, [r2, #0]
 80052d2:	e6ce      	b.n	8005072 <_dtoa_r+0x94a>
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <_dtoa_r+0xbd4>)
 80052d6:	f7ff ba95 	b.w	8004804 <_dtoa_r+0xdc>
 80052da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f47f aa6e 	bne.w	80047be <_dtoa_r+0x96>
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <_dtoa_r+0xbd8>)
 80052e4:	f7ff ba8e 	b.w	8004804 <_dtoa_r+0xdc>
 80052e8:	9b02      	ldr	r3, [sp, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dcae      	bgt.n	800524c <_dtoa_r+0xb24>
 80052ee:	9b06      	ldr	r3, [sp, #24]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	f73f aea8 	bgt.w	8005046 <_dtoa_r+0x91e>
 80052f6:	e7a9      	b.n	800524c <_dtoa_r+0xb24>
 80052f8:	08006f64 	.word	0x08006f64
 80052fc:	08006ecc 	.word	0x08006ecc
 8005300:	08006f01 	.word	0x08006f01

08005304 <__sflush_r>:
 8005304:	898a      	ldrh	r2, [r1, #12]
 8005306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530a:	4605      	mov	r5, r0
 800530c:	0710      	lsls	r0, r2, #28
 800530e:	460c      	mov	r4, r1
 8005310:	d458      	bmi.n	80053c4 <__sflush_r+0xc0>
 8005312:	684b      	ldr	r3, [r1, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	dc05      	bgt.n	8005324 <__sflush_r+0x20>
 8005318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	dc02      	bgt.n	8005324 <__sflush_r+0x20>
 800531e:	2000      	movs	r0, #0
 8005320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005326:	2e00      	cmp	r6, #0
 8005328:	d0f9      	beq.n	800531e <__sflush_r+0x1a>
 800532a:	2300      	movs	r3, #0
 800532c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005330:	682f      	ldr	r7, [r5, #0]
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	d032      	beq.n	800539c <__sflush_r+0x98>
 8005336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	075a      	lsls	r2, r3, #29
 800533c:	d505      	bpl.n	800534a <__sflush_r+0x46>
 800533e:	6863      	ldr	r3, [r4, #4]
 8005340:	1ac0      	subs	r0, r0, r3
 8005342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005344:	b10b      	cbz	r3, 800534a <__sflush_r+0x46>
 8005346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005348:	1ac0      	subs	r0, r0, r3
 800534a:	2300      	movs	r3, #0
 800534c:	4602      	mov	r2, r0
 800534e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005350:	6a21      	ldr	r1, [r4, #32]
 8005352:	4628      	mov	r0, r5
 8005354:	47b0      	blx	r6
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	d106      	bne.n	800536a <__sflush_r+0x66>
 800535c:	6829      	ldr	r1, [r5, #0]
 800535e:	291d      	cmp	r1, #29
 8005360:	d82c      	bhi.n	80053bc <__sflush_r+0xb8>
 8005362:	4a2a      	ldr	r2, [pc, #168]	; (800540c <__sflush_r+0x108>)
 8005364:	40ca      	lsrs	r2, r1
 8005366:	07d6      	lsls	r6, r2, #31
 8005368:	d528      	bpl.n	80053bc <__sflush_r+0xb8>
 800536a:	2200      	movs	r2, #0
 800536c:	6062      	str	r2, [r4, #4]
 800536e:	04d9      	lsls	r1, r3, #19
 8005370:	6922      	ldr	r2, [r4, #16]
 8005372:	6022      	str	r2, [r4, #0]
 8005374:	d504      	bpl.n	8005380 <__sflush_r+0x7c>
 8005376:	1c42      	adds	r2, r0, #1
 8005378:	d101      	bne.n	800537e <__sflush_r+0x7a>
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	b903      	cbnz	r3, 8005380 <__sflush_r+0x7c>
 800537e:	6560      	str	r0, [r4, #84]	; 0x54
 8005380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005382:	602f      	str	r7, [r5, #0]
 8005384:	2900      	cmp	r1, #0
 8005386:	d0ca      	beq.n	800531e <__sflush_r+0x1a>
 8005388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800538c:	4299      	cmp	r1, r3
 800538e:	d002      	beq.n	8005396 <__sflush_r+0x92>
 8005390:	4628      	mov	r0, r5
 8005392:	f7fe f985 	bl	80036a0 <_free_r>
 8005396:	2000      	movs	r0, #0
 8005398:	6360      	str	r0, [r4, #52]	; 0x34
 800539a:	e7c1      	b.n	8005320 <__sflush_r+0x1c>
 800539c:	6a21      	ldr	r1, [r4, #32]
 800539e:	2301      	movs	r3, #1
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b0      	blx	r6
 80053a4:	1c41      	adds	r1, r0, #1
 80053a6:	d1c7      	bne.n	8005338 <__sflush_r+0x34>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0c4      	beq.n	8005338 <__sflush_r+0x34>
 80053ae:	2b1d      	cmp	r3, #29
 80053b0:	d001      	beq.n	80053b6 <__sflush_r+0xb2>
 80053b2:	2b16      	cmp	r3, #22
 80053b4:	d101      	bne.n	80053ba <__sflush_r+0xb6>
 80053b6:	602f      	str	r7, [r5, #0]
 80053b8:	e7b1      	b.n	800531e <__sflush_r+0x1a>
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	e7ad      	b.n	8005320 <__sflush_r+0x1c>
 80053c4:	690f      	ldr	r7, [r1, #16]
 80053c6:	2f00      	cmp	r7, #0
 80053c8:	d0a9      	beq.n	800531e <__sflush_r+0x1a>
 80053ca:	0793      	lsls	r3, r2, #30
 80053cc:	680e      	ldr	r6, [r1, #0]
 80053ce:	bf08      	it	eq
 80053d0:	694b      	ldreq	r3, [r1, #20]
 80053d2:	600f      	str	r7, [r1, #0]
 80053d4:	bf18      	it	ne
 80053d6:	2300      	movne	r3, #0
 80053d8:	eba6 0807 	sub.w	r8, r6, r7
 80053dc:	608b      	str	r3, [r1, #8]
 80053de:	f1b8 0f00 	cmp.w	r8, #0
 80053e2:	dd9c      	ble.n	800531e <__sflush_r+0x1a>
 80053e4:	6a21      	ldr	r1, [r4, #32]
 80053e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053e8:	4643      	mov	r3, r8
 80053ea:	463a      	mov	r2, r7
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b0      	blx	r6
 80053f0:	2800      	cmp	r0, #0
 80053f2:	dc06      	bgt.n	8005402 <__sflush_r+0xfe>
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053fa:	81a3      	strh	r3, [r4, #12]
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005400:	e78e      	b.n	8005320 <__sflush_r+0x1c>
 8005402:	4407      	add	r7, r0
 8005404:	eba8 0800 	sub.w	r8, r8, r0
 8005408:	e7e9      	b.n	80053de <__sflush_r+0xda>
 800540a:	bf00      	nop
 800540c:	20400001 	.word	0x20400001

08005410 <_fflush_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	690b      	ldr	r3, [r1, #16]
 8005414:	4605      	mov	r5, r0
 8005416:	460c      	mov	r4, r1
 8005418:	b913      	cbnz	r3, 8005420 <_fflush_r+0x10>
 800541a:	2500      	movs	r5, #0
 800541c:	4628      	mov	r0, r5
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	b118      	cbz	r0, 800542a <_fflush_r+0x1a>
 8005422:	6983      	ldr	r3, [r0, #24]
 8005424:	b90b      	cbnz	r3, 800542a <_fflush_r+0x1a>
 8005426:	f000 f887 	bl	8005538 <__sinit>
 800542a:	4b14      	ldr	r3, [pc, #80]	; (800547c <_fflush_r+0x6c>)
 800542c:	429c      	cmp	r4, r3
 800542e:	d11b      	bne.n	8005468 <_fflush_r+0x58>
 8005430:	686c      	ldr	r4, [r5, #4]
 8005432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0ef      	beq.n	800541a <_fflush_r+0xa>
 800543a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800543c:	07d0      	lsls	r0, r2, #31
 800543e:	d404      	bmi.n	800544a <_fflush_r+0x3a>
 8005440:	0599      	lsls	r1, r3, #22
 8005442:	d402      	bmi.n	800544a <_fflush_r+0x3a>
 8005444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005446:	f7fe f918 	bl	800367a <__retarget_lock_acquire_recursive>
 800544a:	4628      	mov	r0, r5
 800544c:	4621      	mov	r1, r4
 800544e:	f7ff ff59 	bl	8005304 <__sflush_r>
 8005452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005454:	07da      	lsls	r2, r3, #31
 8005456:	4605      	mov	r5, r0
 8005458:	d4e0      	bmi.n	800541c <_fflush_r+0xc>
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	059b      	lsls	r3, r3, #22
 800545e:	d4dd      	bmi.n	800541c <_fflush_r+0xc>
 8005460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005462:	f7fe f90b 	bl	800367c <__retarget_lock_release_recursive>
 8005466:	e7d9      	b.n	800541c <_fflush_r+0xc>
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <_fflush_r+0x70>)
 800546a:	429c      	cmp	r4, r3
 800546c:	d101      	bne.n	8005472 <_fflush_r+0x62>
 800546e:	68ac      	ldr	r4, [r5, #8]
 8005470:	e7df      	b.n	8005432 <_fflush_r+0x22>
 8005472:	4b04      	ldr	r3, [pc, #16]	; (8005484 <_fflush_r+0x74>)
 8005474:	429c      	cmp	r4, r3
 8005476:	bf08      	it	eq
 8005478:	68ec      	ldreq	r4, [r5, #12]
 800547a:	e7da      	b.n	8005432 <_fflush_r+0x22>
 800547c:	08006f98 	.word	0x08006f98
 8005480:	08006fb8 	.word	0x08006fb8
 8005484:	08006f78 	.word	0x08006f78

08005488 <std>:
 8005488:	2300      	movs	r3, #0
 800548a:	b510      	push	{r4, lr}
 800548c:	4604      	mov	r4, r0
 800548e:	e9c0 3300 	strd	r3, r3, [r0]
 8005492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005496:	6083      	str	r3, [r0, #8]
 8005498:	8181      	strh	r1, [r0, #12]
 800549a:	6643      	str	r3, [r0, #100]	; 0x64
 800549c:	81c2      	strh	r2, [r0, #14]
 800549e:	6183      	str	r3, [r0, #24]
 80054a0:	4619      	mov	r1, r3
 80054a2:	2208      	movs	r2, #8
 80054a4:	305c      	adds	r0, #92	; 0x5c
 80054a6:	f7fe f8f3 	bl	8003690 <memset>
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <std+0x38>)
 80054ac:	6263      	str	r3, [r4, #36]	; 0x24
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <std+0x3c>)
 80054b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <std+0x40>)
 80054b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <std+0x44>)
 80054b8:	6224      	str	r4, [r4, #32]
 80054ba:	6323      	str	r3, [r4, #48]	; 0x30
 80054bc:	bd10      	pop	{r4, pc}
 80054be:	bf00      	nop
 80054c0:	08005f5d 	.word	0x08005f5d
 80054c4:	08005f7f 	.word	0x08005f7f
 80054c8:	08005fb7 	.word	0x08005fb7
 80054cc:	08005fdb 	.word	0x08005fdb

080054d0 <_cleanup_r>:
 80054d0:	4901      	ldr	r1, [pc, #4]	; (80054d8 <_cleanup_r+0x8>)
 80054d2:	f000 b8af 	b.w	8005634 <_fwalk_reent>
 80054d6:	bf00      	nop
 80054d8:	08005411 	.word	0x08005411

080054dc <__sfmoreglue>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	2268      	movs	r2, #104	; 0x68
 80054e0:	1e4d      	subs	r5, r1, #1
 80054e2:	4355      	muls	r5, r2
 80054e4:	460e      	mov	r6, r1
 80054e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054ea:	f7fe f925 	bl	8003738 <_malloc_r>
 80054ee:	4604      	mov	r4, r0
 80054f0:	b140      	cbz	r0, 8005504 <__sfmoreglue+0x28>
 80054f2:	2100      	movs	r1, #0
 80054f4:	e9c0 1600 	strd	r1, r6, [r0]
 80054f8:	300c      	adds	r0, #12
 80054fa:	60a0      	str	r0, [r4, #8]
 80054fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005500:	f7fe f8c6 	bl	8003690 <memset>
 8005504:	4620      	mov	r0, r4
 8005506:	bd70      	pop	{r4, r5, r6, pc}

08005508 <__sfp_lock_acquire>:
 8005508:	4801      	ldr	r0, [pc, #4]	; (8005510 <__sfp_lock_acquire+0x8>)
 800550a:	f7fe b8b6 	b.w	800367a <__retarget_lock_acquire_recursive>
 800550e:	bf00      	nop
 8005510:	200002b1 	.word	0x200002b1

08005514 <__sfp_lock_release>:
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <__sfp_lock_release+0x8>)
 8005516:	f7fe b8b1 	b.w	800367c <__retarget_lock_release_recursive>
 800551a:	bf00      	nop
 800551c:	200002b1 	.word	0x200002b1

08005520 <__sinit_lock_acquire>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__sinit_lock_acquire+0x8>)
 8005522:	f7fe b8aa 	b.w	800367a <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	200002b2 	.word	0x200002b2

0800552c <__sinit_lock_release>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__sinit_lock_release+0x8>)
 800552e:	f7fe b8a5 	b.w	800367c <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	200002b2 	.word	0x200002b2

08005538 <__sinit>:
 8005538:	b510      	push	{r4, lr}
 800553a:	4604      	mov	r4, r0
 800553c:	f7ff fff0 	bl	8005520 <__sinit_lock_acquire>
 8005540:	69a3      	ldr	r3, [r4, #24]
 8005542:	b11b      	cbz	r3, 800554c <__sinit+0x14>
 8005544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005548:	f7ff bff0 	b.w	800552c <__sinit_lock_release>
 800554c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005550:	6523      	str	r3, [r4, #80]	; 0x50
 8005552:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <__sinit+0x68>)
 8005554:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <__sinit+0x6c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	62a2      	str	r2, [r4, #40]	; 0x28
 800555a:	42a3      	cmp	r3, r4
 800555c:	bf04      	itt	eq
 800555e:	2301      	moveq	r3, #1
 8005560:	61a3      	streq	r3, [r4, #24]
 8005562:	4620      	mov	r0, r4
 8005564:	f000 f820 	bl	80055a8 <__sfp>
 8005568:	6060      	str	r0, [r4, #4]
 800556a:	4620      	mov	r0, r4
 800556c:	f000 f81c 	bl	80055a8 <__sfp>
 8005570:	60a0      	str	r0, [r4, #8]
 8005572:	4620      	mov	r0, r4
 8005574:	f000 f818 	bl	80055a8 <__sfp>
 8005578:	2200      	movs	r2, #0
 800557a:	60e0      	str	r0, [r4, #12]
 800557c:	2104      	movs	r1, #4
 800557e:	6860      	ldr	r0, [r4, #4]
 8005580:	f7ff ff82 	bl	8005488 <std>
 8005584:	68a0      	ldr	r0, [r4, #8]
 8005586:	2201      	movs	r2, #1
 8005588:	2109      	movs	r1, #9
 800558a:	f7ff ff7d 	bl	8005488 <std>
 800558e:	68e0      	ldr	r0, [r4, #12]
 8005590:	2202      	movs	r2, #2
 8005592:	2112      	movs	r1, #18
 8005594:	f7ff ff78 	bl	8005488 <std>
 8005598:	2301      	movs	r3, #1
 800559a:	61a3      	str	r3, [r4, #24]
 800559c:	e7d2      	b.n	8005544 <__sinit+0xc>
 800559e:	bf00      	nop
 80055a0:	08006eb8 	.word	0x08006eb8
 80055a4:	080054d1 	.word	0x080054d1

080055a8 <__sfp>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	4607      	mov	r7, r0
 80055ac:	f7ff ffac 	bl	8005508 <__sfp_lock_acquire>
 80055b0:	4b1e      	ldr	r3, [pc, #120]	; (800562c <__sfp+0x84>)
 80055b2:	681e      	ldr	r6, [r3, #0]
 80055b4:	69b3      	ldr	r3, [r6, #24]
 80055b6:	b913      	cbnz	r3, 80055be <__sfp+0x16>
 80055b8:	4630      	mov	r0, r6
 80055ba:	f7ff ffbd 	bl	8005538 <__sinit>
 80055be:	3648      	adds	r6, #72	; 0x48
 80055c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	d503      	bpl.n	80055d0 <__sfp+0x28>
 80055c8:	6833      	ldr	r3, [r6, #0]
 80055ca:	b30b      	cbz	r3, 8005610 <__sfp+0x68>
 80055cc:	6836      	ldr	r6, [r6, #0]
 80055ce:	e7f7      	b.n	80055c0 <__sfp+0x18>
 80055d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055d4:	b9d5      	cbnz	r5, 800560c <__sfp+0x64>
 80055d6:	4b16      	ldr	r3, [pc, #88]	; (8005630 <__sfp+0x88>)
 80055d8:	60e3      	str	r3, [r4, #12]
 80055da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055de:	6665      	str	r5, [r4, #100]	; 0x64
 80055e0:	f7fe f84a 	bl	8003678 <__retarget_lock_init_recursive>
 80055e4:	f7ff ff96 	bl	8005514 <__sfp_lock_release>
 80055e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80055ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80055f0:	6025      	str	r5, [r4, #0]
 80055f2:	61a5      	str	r5, [r4, #24]
 80055f4:	2208      	movs	r2, #8
 80055f6:	4629      	mov	r1, r5
 80055f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055fc:	f7fe f848 	bl	8003690 <memset>
 8005600:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005604:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005608:	4620      	mov	r0, r4
 800560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800560c:	3468      	adds	r4, #104	; 0x68
 800560e:	e7d9      	b.n	80055c4 <__sfp+0x1c>
 8005610:	2104      	movs	r1, #4
 8005612:	4638      	mov	r0, r7
 8005614:	f7ff ff62 	bl	80054dc <__sfmoreglue>
 8005618:	4604      	mov	r4, r0
 800561a:	6030      	str	r0, [r6, #0]
 800561c:	2800      	cmp	r0, #0
 800561e:	d1d5      	bne.n	80055cc <__sfp+0x24>
 8005620:	f7ff ff78 	bl	8005514 <__sfp_lock_release>
 8005624:	230c      	movs	r3, #12
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	e7ee      	b.n	8005608 <__sfp+0x60>
 800562a:	bf00      	nop
 800562c:	08006eb8 	.word	0x08006eb8
 8005630:	ffff0001 	.word	0xffff0001

08005634 <_fwalk_reent>:
 8005634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005638:	4606      	mov	r6, r0
 800563a:	4688      	mov	r8, r1
 800563c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005640:	2700      	movs	r7, #0
 8005642:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005646:	f1b9 0901 	subs.w	r9, r9, #1
 800564a:	d505      	bpl.n	8005658 <_fwalk_reent+0x24>
 800564c:	6824      	ldr	r4, [r4, #0]
 800564e:	2c00      	cmp	r4, #0
 8005650:	d1f7      	bne.n	8005642 <_fwalk_reent+0xe>
 8005652:	4638      	mov	r0, r7
 8005654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005658:	89ab      	ldrh	r3, [r5, #12]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d907      	bls.n	800566e <_fwalk_reent+0x3a>
 800565e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005662:	3301      	adds	r3, #1
 8005664:	d003      	beq.n	800566e <_fwalk_reent+0x3a>
 8005666:	4629      	mov	r1, r5
 8005668:	4630      	mov	r0, r6
 800566a:	47c0      	blx	r8
 800566c:	4307      	orrs	r7, r0
 800566e:	3568      	adds	r5, #104	; 0x68
 8005670:	e7e9      	b.n	8005646 <_fwalk_reent+0x12>
	...

08005674 <_localeconv_r>:
 8005674:	4800      	ldr	r0, [pc, #0]	; (8005678 <_localeconv_r+0x4>)
 8005676:	4770      	bx	lr
 8005678:	20000184 	.word	0x20000184

0800567c <__swhatbuf_r>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	460e      	mov	r6, r1
 8005680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005684:	2900      	cmp	r1, #0
 8005686:	b096      	sub	sp, #88	; 0x58
 8005688:	4614      	mov	r4, r2
 800568a:	461d      	mov	r5, r3
 800568c:	da08      	bge.n	80056a0 <__swhatbuf_r+0x24>
 800568e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	602a      	str	r2, [r5, #0]
 8005696:	061a      	lsls	r2, r3, #24
 8005698:	d410      	bmi.n	80056bc <__swhatbuf_r+0x40>
 800569a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800569e:	e00e      	b.n	80056be <__swhatbuf_r+0x42>
 80056a0:	466a      	mov	r2, sp
 80056a2:	f000 fccd 	bl	8006040 <_fstat_r>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	dbf1      	blt.n	800568e <__swhatbuf_r+0x12>
 80056aa:	9a01      	ldr	r2, [sp, #4]
 80056ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056b4:	425a      	negs	r2, r3
 80056b6:	415a      	adcs	r2, r3
 80056b8:	602a      	str	r2, [r5, #0]
 80056ba:	e7ee      	b.n	800569a <__swhatbuf_r+0x1e>
 80056bc:	2340      	movs	r3, #64	; 0x40
 80056be:	2000      	movs	r0, #0
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	b016      	add	sp, #88	; 0x58
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080056c8 <__smakebuf_r>:
 80056c8:	898b      	ldrh	r3, [r1, #12]
 80056ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056cc:	079d      	lsls	r5, r3, #30
 80056ce:	4606      	mov	r6, r0
 80056d0:	460c      	mov	r4, r1
 80056d2:	d507      	bpl.n	80056e4 <__smakebuf_r+0x1c>
 80056d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	2301      	movs	r3, #1
 80056de:	6163      	str	r3, [r4, #20]
 80056e0:	b002      	add	sp, #8
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	ab01      	add	r3, sp, #4
 80056e6:	466a      	mov	r2, sp
 80056e8:	f7ff ffc8 	bl	800567c <__swhatbuf_r>
 80056ec:	9900      	ldr	r1, [sp, #0]
 80056ee:	4605      	mov	r5, r0
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7fe f821 	bl	8003738 <_malloc_r>
 80056f6:	b948      	cbnz	r0, 800570c <__smakebuf_r+0x44>
 80056f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fc:	059a      	lsls	r2, r3, #22
 80056fe:	d4ef      	bmi.n	80056e0 <__smakebuf_r+0x18>
 8005700:	f023 0303 	bic.w	r3, r3, #3
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	81a3      	strh	r3, [r4, #12]
 800570a:	e7e3      	b.n	80056d4 <__smakebuf_r+0xc>
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <__smakebuf_r+0x7c>)
 800570e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	6020      	str	r0, [r4, #0]
 8005714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	9b00      	ldr	r3, [sp, #0]
 800571c:	6163      	str	r3, [r4, #20]
 800571e:	9b01      	ldr	r3, [sp, #4]
 8005720:	6120      	str	r0, [r4, #16]
 8005722:	b15b      	cbz	r3, 800573c <__smakebuf_r+0x74>
 8005724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005728:	4630      	mov	r0, r6
 800572a:	f000 fc9b 	bl	8006064 <_isatty_r>
 800572e:	b128      	cbz	r0, 800573c <__smakebuf_r+0x74>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	81a3      	strh	r3, [r4, #12]
 800573c:	89a0      	ldrh	r0, [r4, #12]
 800573e:	4305      	orrs	r5, r0
 8005740:	81a5      	strh	r5, [r4, #12]
 8005742:	e7cd      	b.n	80056e0 <__smakebuf_r+0x18>
 8005744:	080054d1 	.word	0x080054d1

08005748 <__ascii_mbtowc>:
 8005748:	b082      	sub	sp, #8
 800574a:	b901      	cbnz	r1, 800574e <__ascii_mbtowc+0x6>
 800574c:	a901      	add	r1, sp, #4
 800574e:	b142      	cbz	r2, 8005762 <__ascii_mbtowc+0x1a>
 8005750:	b14b      	cbz	r3, 8005766 <__ascii_mbtowc+0x1e>
 8005752:	7813      	ldrb	r3, [r2, #0]
 8005754:	600b      	str	r3, [r1, #0]
 8005756:	7812      	ldrb	r2, [r2, #0]
 8005758:	1e10      	subs	r0, r2, #0
 800575a:	bf18      	it	ne
 800575c:	2001      	movne	r0, #1
 800575e:	b002      	add	sp, #8
 8005760:	4770      	bx	lr
 8005762:	4610      	mov	r0, r2
 8005764:	e7fb      	b.n	800575e <__ascii_mbtowc+0x16>
 8005766:	f06f 0001 	mvn.w	r0, #1
 800576a:	e7f8      	b.n	800575e <__ascii_mbtowc+0x16>

0800576c <memcpy>:
 800576c:	440a      	add	r2, r1
 800576e:	4291      	cmp	r1, r2
 8005770:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005774:	d100      	bne.n	8005778 <memcpy+0xc>
 8005776:	4770      	bx	lr
 8005778:	b510      	push	{r4, lr}
 800577a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800577e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005782:	4291      	cmp	r1, r2
 8005784:	d1f9      	bne.n	800577a <memcpy+0xe>
 8005786:	bd10      	pop	{r4, pc}

08005788 <__malloc_lock>:
 8005788:	4801      	ldr	r0, [pc, #4]	; (8005790 <__malloc_lock+0x8>)
 800578a:	f7fd bf76 	b.w	800367a <__retarget_lock_acquire_recursive>
 800578e:	bf00      	nop
 8005790:	200002b0 	.word	0x200002b0

08005794 <__malloc_unlock>:
 8005794:	4801      	ldr	r0, [pc, #4]	; (800579c <__malloc_unlock+0x8>)
 8005796:	f7fd bf71 	b.w	800367c <__retarget_lock_release_recursive>
 800579a:	bf00      	nop
 800579c:	200002b0 	.word	0x200002b0

080057a0 <_Balloc>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057a4:	4604      	mov	r4, r0
 80057a6:	460d      	mov	r5, r1
 80057a8:	b976      	cbnz	r6, 80057c8 <_Balloc+0x28>
 80057aa:	2010      	movs	r0, #16
 80057ac:	f7fd ff68 	bl	8003680 <malloc>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6260      	str	r0, [r4, #36]	; 0x24
 80057b4:	b920      	cbnz	r0, 80057c0 <_Balloc+0x20>
 80057b6:	4b18      	ldr	r3, [pc, #96]	; (8005818 <_Balloc+0x78>)
 80057b8:	4818      	ldr	r0, [pc, #96]	; (800581c <_Balloc+0x7c>)
 80057ba:	2166      	movs	r1, #102	; 0x66
 80057bc:	f7fd ff02 	bl	80035c4 <__assert_func>
 80057c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057c4:	6006      	str	r6, [r0, #0]
 80057c6:	60c6      	str	r6, [r0, #12]
 80057c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057ca:	68f3      	ldr	r3, [r6, #12]
 80057cc:	b183      	cbz	r3, 80057f0 <_Balloc+0x50>
 80057ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80057d6:	b9b8      	cbnz	r0, 8005808 <_Balloc+0x68>
 80057d8:	2101      	movs	r1, #1
 80057da:	fa01 f605 	lsl.w	r6, r1, r5
 80057de:	1d72      	adds	r2, r6, #5
 80057e0:	0092      	lsls	r2, r2, #2
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 fb60 	bl	8005ea8 <_calloc_r>
 80057e8:	b160      	cbz	r0, 8005804 <_Balloc+0x64>
 80057ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057ee:	e00e      	b.n	800580e <_Balloc+0x6e>
 80057f0:	2221      	movs	r2, #33	; 0x21
 80057f2:	2104      	movs	r1, #4
 80057f4:	4620      	mov	r0, r4
 80057f6:	f000 fb57 	bl	8005ea8 <_calloc_r>
 80057fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057fc:	60f0      	str	r0, [r6, #12]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e4      	bne.n	80057ce <_Balloc+0x2e>
 8005804:	2000      	movs	r0, #0
 8005806:	bd70      	pop	{r4, r5, r6, pc}
 8005808:	6802      	ldr	r2, [r0, #0]
 800580a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800580e:	2300      	movs	r3, #0
 8005810:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005814:	e7f7      	b.n	8005806 <_Balloc+0x66>
 8005816:	bf00      	nop
 8005818:	08006f0e 	.word	0x08006f0e
 800581c:	08006fe2 	.word	0x08006fe2

08005820 <_Bfree>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005824:	4605      	mov	r5, r0
 8005826:	460c      	mov	r4, r1
 8005828:	b976      	cbnz	r6, 8005848 <_Bfree+0x28>
 800582a:	2010      	movs	r0, #16
 800582c:	f7fd ff28 	bl	8003680 <malloc>
 8005830:	4602      	mov	r2, r0
 8005832:	6268      	str	r0, [r5, #36]	; 0x24
 8005834:	b920      	cbnz	r0, 8005840 <_Bfree+0x20>
 8005836:	4b09      	ldr	r3, [pc, #36]	; (800585c <_Bfree+0x3c>)
 8005838:	4809      	ldr	r0, [pc, #36]	; (8005860 <_Bfree+0x40>)
 800583a:	218a      	movs	r1, #138	; 0x8a
 800583c:	f7fd fec2 	bl	80035c4 <__assert_func>
 8005840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005844:	6006      	str	r6, [r0, #0]
 8005846:	60c6      	str	r6, [r0, #12]
 8005848:	b13c      	cbz	r4, 800585a <_Bfree+0x3a>
 800584a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800584c:	6862      	ldr	r2, [r4, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005854:	6021      	str	r1, [r4, #0]
 8005856:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	08006f0e 	.word	0x08006f0e
 8005860:	08006fe2 	.word	0x08006fe2

08005864 <__multadd>:
 8005864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005868:	690d      	ldr	r5, [r1, #16]
 800586a:	4607      	mov	r7, r0
 800586c:	460c      	mov	r4, r1
 800586e:	461e      	mov	r6, r3
 8005870:	f101 0c14 	add.w	ip, r1, #20
 8005874:	2000      	movs	r0, #0
 8005876:	f8dc 3000 	ldr.w	r3, [ip]
 800587a:	b299      	uxth	r1, r3
 800587c:	fb02 6101 	mla	r1, r2, r1, r6
 8005880:	0c1e      	lsrs	r6, r3, #16
 8005882:	0c0b      	lsrs	r3, r1, #16
 8005884:	fb02 3306 	mla	r3, r2, r6, r3
 8005888:	b289      	uxth	r1, r1
 800588a:	3001      	adds	r0, #1
 800588c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005890:	4285      	cmp	r5, r0
 8005892:	f84c 1b04 	str.w	r1, [ip], #4
 8005896:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800589a:	dcec      	bgt.n	8005876 <__multadd+0x12>
 800589c:	b30e      	cbz	r6, 80058e2 <__multadd+0x7e>
 800589e:	68a3      	ldr	r3, [r4, #8]
 80058a0:	42ab      	cmp	r3, r5
 80058a2:	dc19      	bgt.n	80058d8 <__multadd+0x74>
 80058a4:	6861      	ldr	r1, [r4, #4]
 80058a6:	4638      	mov	r0, r7
 80058a8:	3101      	adds	r1, #1
 80058aa:	f7ff ff79 	bl	80057a0 <_Balloc>
 80058ae:	4680      	mov	r8, r0
 80058b0:	b928      	cbnz	r0, 80058be <__multadd+0x5a>
 80058b2:	4602      	mov	r2, r0
 80058b4:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <__multadd+0x84>)
 80058b6:	480d      	ldr	r0, [pc, #52]	; (80058ec <__multadd+0x88>)
 80058b8:	21b5      	movs	r1, #181	; 0xb5
 80058ba:	f7fd fe83 	bl	80035c4 <__assert_func>
 80058be:	6922      	ldr	r2, [r4, #16]
 80058c0:	3202      	adds	r2, #2
 80058c2:	f104 010c 	add.w	r1, r4, #12
 80058c6:	0092      	lsls	r2, r2, #2
 80058c8:	300c      	adds	r0, #12
 80058ca:	f7ff ff4f 	bl	800576c <memcpy>
 80058ce:	4621      	mov	r1, r4
 80058d0:	4638      	mov	r0, r7
 80058d2:	f7ff ffa5 	bl	8005820 <_Bfree>
 80058d6:	4644      	mov	r4, r8
 80058d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058dc:	3501      	adds	r5, #1
 80058de:	615e      	str	r6, [r3, #20]
 80058e0:	6125      	str	r5, [r4, #16]
 80058e2:	4620      	mov	r0, r4
 80058e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e8:	08006f64 	.word	0x08006f64
 80058ec:	08006fe2 	.word	0x08006fe2

080058f0 <__hi0bits>:
 80058f0:	0c03      	lsrs	r3, r0, #16
 80058f2:	041b      	lsls	r3, r3, #16
 80058f4:	b9d3      	cbnz	r3, 800592c <__hi0bits+0x3c>
 80058f6:	0400      	lsls	r0, r0, #16
 80058f8:	2310      	movs	r3, #16
 80058fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80058fe:	bf04      	itt	eq
 8005900:	0200      	lsleq	r0, r0, #8
 8005902:	3308      	addeq	r3, #8
 8005904:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005908:	bf04      	itt	eq
 800590a:	0100      	lsleq	r0, r0, #4
 800590c:	3304      	addeq	r3, #4
 800590e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005912:	bf04      	itt	eq
 8005914:	0080      	lsleq	r0, r0, #2
 8005916:	3302      	addeq	r3, #2
 8005918:	2800      	cmp	r0, #0
 800591a:	db05      	blt.n	8005928 <__hi0bits+0x38>
 800591c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005920:	f103 0301 	add.w	r3, r3, #1
 8005924:	bf08      	it	eq
 8005926:	2320      	moveq	r3, #32
 8005928:	4618      	mov	r0, r3
 800592a:	4770      	bx	lr
 800592c:	2300      	movs	r3, #0
 800592e:	e7e4      	b.n	80058fa <__hi0bits+0xa>

08005930 <__lo0bits>:
 8005930:	6803      	ldr	r3, [r0, #0]
 8005932:	f013 0207 	ands.w	r2, r3, #7
 8005936:	4601      	mov	r1, r0
 8005938:	d00b      	beq.n	8005952 <__lo0bits+0x22>
 800593a:	07da      	lsls	r2, r3, #31
 800593c:	d423      	bmi.n	8005986 <__lo0bits+0x56>
 800593e:	0798      	lsls	r0, r3, #30
 8005940:	bf49      	itett	mi
 8005942:	085b      	lsrmi	r3, r3, #1
 8005944:	089b      	lsrpl	r3, r3, #2
 8005946:	2001      	movmi	r0, #1
 8005948:	600b      	strmi	r3, [r1, #0]
 800594a:	bf5c      	itt	pl
 800594c:	600b      	strpl	r3, [r1, #0]
 800594e:	2002      	movpl	r0, #2
 8005950:	4770      	bx	lr
 8005952:	b298      	uxth	r0, r3
 8005954:	b9a8      	cbnz	r0, 8005982 <__lo0bits+0x52>
 8005956:	0c1b      	lsrs	r3, r3, #16
 8005958:	2010      	movs	r0, #16
 800595a:	b2da      	uxtb	r2, r3
 800595c:	b90a      	cbnz	r2, 8005962 <__lo0bits+0x32>
 800595e:	3008      	adds	r0, #8
 8005960:	0a1b      	lsrs	r3, r3, #8
 8005962:	071a      	lsls	r2, r3, #28
 8005964:	bf04      	itt	eq
 8005966:	091b      	lsreq	r3, r3, #4
 8005968:	3004      	addeq	r0, #4
 800596a:	079a      	lsls	r2, r3, #30
 800596c:	bf04      	itt	eq
 800596e:	089b      	lsreq	r3, r3, #2
 8005970:	3002      	addeq	r0, #2
 8005972:	07da      	lsls	r2, r3, #31
 8005974:	d403      	bmi.n	800597e <__lo0bits+0x4e>
 8005976:	085b      	lsrs	r3, r3, #1
 8005978:	f100 0001 	add.w	r0, r0, #1
 800597c:	d005      	beq.n	800598a <__lo0bits+0x5a>
 800597e:	600b      	str	r3, [r1, #0]
 8005980:	4770      	bx	lr
 8005982:	4610      	mov	r0, r2
 8005984:	e7e9      	b.n	800595a <__lo0bits+0x2a>
 8005986:	2000      	movs	r0, #0
 8005988:	4770      	bx	lr
 800598a:	2020      	movs	r0, #32
 800598c:	4770      	bx	lr
	...

08005990 <__i2b>:
 8005990:	b510      	push	{r4, lr}
 8005992:	460c      	mov	r4, r1
 8005994:	2101      	movs	r1, #1
 8005996:	f7ff ff03 	bl	80057a0 <_Balloc>
 800599a:	4602      	mov	r2, r0
 800599c:	b928      	cbnz	r0, 80059aa <__i2b+0x1a>
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <__i2b+0x24>)
 80059a0:	4805      	ldr	r0, [pc, #20]	; (80059b8 <__i2b+0x28>)
 80059a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80059a6:	f7fd fe0d 	bl	80035c4 <__assert_func>
 80059aa:	2301      	movs	r3, #1
 80059ac:	6144      	str	r4, [r0, #20]
 80059ae:	6103      	str	r3, [r0, #16]
 80059b0:	bd10      	pop	{r4, pc}
 80059b2:	bf00      	nop
 80059b4:	08006f64 	.word	0x08006f64
 80059b8:	08006fe2 	.word	0x08006fe2

080059bc <__multiply>:
 80059bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	4691      	mov	r9, r2
 80059c2:	690a      	ldr	r2, [r1, #16]
 80059c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	bfb8      	it	lt
 80059cc:	460b      	movlt	r3, r1
 80059ce:	460c      	mov	r4, r1
 80059d0:	bfbc      	itt	lt
 80059d2:	464c      	movlt	r4, r9
 80059d4:	4699      	movlt	r9, r3
 80059d6:	6927      	ldr	r7, [r4, #16]
 80059d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80059dc:	68a3      	ldr	r3, [r4, #8]
 80059de:	6861      	ldr	r1, [r4, #4]
 80059e0:	eb07 060a 	add.w	r6, r7, sl
 80059e4:	42b3      	cmp	r3, r6
 80059e6:	b085      	sub	sp, #20
 80059e8:	bfb8      	it	lt
 80059ea:	3101      	addlt	r1, #1
 80059ec:	f7ff fed8 	bl	80057a0 <_Balloc>
 80059f0:	b930      	cbnz	r0, 8005a00 <__multiply+0x44>
 80059f2:	4602      	mov	r2, r0
 80059f4:	4b44      	ldr	r3, [pc, #272]	; (8005b08 <__multiply+0x14c>)
 80059f6:	4845      	ldr	r0, [pc, #276]	; (8005b0c <__multiply+0x150>)
 80059f8:	f240 115d 	movw	r1, #349	; 0x15d
 80059fc:	f7fd fde2 	bl	80035c4 <__assert_func>
 8005a00:	f100 0514 	add.w	r5, r0, #20
 8005a04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a08:	462b      	mov	r3, r5
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	4543      	cmp	r3, r8
 8005a0e:	d321      	bcc.n	8005a54 <__multiply+0x98>
 8005a10:	f104 0314 	add.w	r3, r4, #20
 8005a14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005a18:	f109 0314 	add.w	r3, r9, #20
 8005a1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005a20:	9202      	str	r2, [sp, #8]
 8005a22:	1b3a      	subs	r2, r7, r4
 8005a24:	3a15      	subs	r2, #21
 8005a26:	f022 0203 	bic.w	r2, r2, #3
 8005a2a:	3204      	adds	r2, #4
 8005a2c:	f104 0115 	add.w	r1, r4, #21
 8005a30:	428f      	cmp	r7, r1
 8005a32:	bf38      	it	cc
 8005a34:	2204      	movcc	r2, #4
 8005a36:	9201      	str	r2, [sp, #4]
 8005a38:	9a02      	ldr	r2, [sp, #8]
 8005a3a:	9303      	str	r3, [sp, #12]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d80c      	bhi.n	8005a5a <__multiply+0x9e>
 8005a40:	2e00      	cmp	r6, #0
 8005a42:	dd03      	ble.n	8005a4c <__multiply+0x90>
 8005a44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d05a      	beq.n	8005b02 <__multiply+0x146>
 8005a4c:	6106      	str	r6, [r0, #16]
 8005a4e:	b005      	add	sp, #20
 8005a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a54:	f843 2b04 	str.w	r2, [r3], #4
 8005a58:	e7d8      	b.n	8005a0c <__multiply+0x50>
 8005a5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005a5e:	f1ba 0f00 	cmp.w	sl, #0
 8005a62:	d024      	beq.n	8005aae <__multiply+0xf2>
 8005a64:	f104 0e14 	add.w	lr, r4, #20
 8005a68:	46a9      	mov	r9, r5
 8005a6a:	f04f 0c00 	mov.w	ip, #0
 8005a6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005a72:	f8d9 1000 	ldr.w	r1, [r9]
 8005a76:	fa1f fb82 	uxth.w	fp, r2
 8005a7a:	b289      	uxth	r1, r1
 8005a7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005a80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005a84:	f8d9 2000 	ldr.w	r2, [r9]
 8005a88:	4461      	add	r1, ip
 8005a8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005a92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005a96:	b289      	uxth	r1, r1
 8005a98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a9c:	4577      	cmp	r7, lr
 8005a9e:	f849 1b04 	str.w	r1, [r9], #4
 8005aa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005aa6:	d8e2      	bhi.n	8005a6e <__multiply+0xb2>
 8005aa8:	9a01      	ldr	r2, [sp, #4]
 8005aaa:	f845 c002 	str.w	ip, [r5, r2]
 8005aae:	9a03      	ldr	r2, [sp, #12]
 8005ab0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	f1b9 0f00 	cmp.w	r9, #0
 8005aba:	d020      	beq.n	8005afe <__multiply+0x142>
 8005abc:	6829      	ldr	r1, [r5, #0]
 8005abe:	f104 0c14 	add.w	ip, r4, #20
 8005ac2:	46ae      	mov	lr, r5
 8005ac4:	f04f 0a00 	mov.w	sl, #0
 8005ac8:	f8bc b000 	ldrh.w	fp, [ip]
 8005acc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ad0:	fb09 220b 	mla	r2, r9, fp, r2
 8005ad4:	4492      	add	sl, r2
 8005ad6:	b289      	uxth	r1, r1
 8005ad8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005adc:	f84e 1b04 	str.w	r1, [lr], #4
 8005ae0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005ae4:	f8be 1000 	ldrh.w	r1, [lr]
 8005ae8:	0c12      	lsrs	r2, r2, #16
 8005aea:	fb09 1102 	mla	r1, r9, r2, r1
 8005aee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005af2:	4567      	cmp	r7, ip
 8005af4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005af8:	d8e6      	bhi.n	8005ac8 <__multiply+0x10c>
 8005afa:	9a01      	ldr	r2, [sp, #4]
 8005afc:	50a9      	str	r1, [r5, r2]
 8005afe:	3504      	adds	r5, #4
 8005b00:	e79a      	b.n	8005a38 <__multiply+0x7c>
 8005b02:	3e01      	subs	r6, #1
 8005b04:	e79c      	b.n	8005a40 <__multiply+0x84>
 8005b06:	bf00      	nop
 8005b08:	08006f64 	.word	0x08006f64
 8005b0c:	08006fe2 	.word	0x08006fe2

08005b10 <__pow5mult>:
 8005b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b14:	4615      	mov	r5, r2
 8005b16:	f012 0203 	ands.w	r2, r2, #3
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	460f      	mov	r7, r1
 8005b1e:	d007      	beq.n	8005b30 <__pow5mult+0x20>
 8005b20:	4c25      	ldr	r4, [pc, #148]	; (8005bb8 <__pow5mult+0xa8>)
 8005b22:	3a01      	subs	r2, #1
 8005b24:	2300      	movs	r3, #0
 8005b26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b2a:	f7ff fe9b 	bl	8005864 <__multadd>
 8005b2e:	4607      	mov	r7, r0
 8005b30:	10ad      	asrs	r5, r5, #2
 8005b32:	d03d      	beq.n	8005bb0 <__pow5mult+0xa0>
 8005b34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005b36:	b97c      	cbnz	r4, 8005b58 <__pow5mult+0x48>
 8005b38:	2010      	movs	r0, #16
 8005b3a:	f7fd fda1 	bl	8003680 <malloc>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6270      	str	r0, [r6, #36]	; 0x24
 8005b42:	b928      	cbnz	r0, 8005b50 <__pow5mult+0x40>
 8005b44:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <__pow5mult+0xac>)
 8005b46:	481e      	ldr	r0, [pc, #120]	; (8005bc0 <__pow5mult+0xb0>)
 8005b48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005b4c:	f7fd fd3a 	bl	80035c4 <__assert_func>
 8005b50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b54:	6004      	str	r4, [r0, #0]
 8005b56:	60c4      	str	r4, [r0, #12]
 8005b58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b60:	b94c      	cbnz	r4, 8005b76 <__pow5mult+0x66>
 8005b62:	f240 2171 	movw	r1, #625	; 0x271
 8005b66:	4630      	mov	r0, r6
 8005b68:	f7ff ff12 	bl	8005990 <__i2b>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b72:	4604      	mov	r4, r0
 8005b74:	6003      	str	r3, [r0, #0]
 8005b76:	f04f 0900 	mov.w	r9, #0
 8005b7a:	07eb      	lsls	r3, r5, #31
 8005b7c:	d50a      	bpl.n	8005b94 <__pow5mult+0x84>
 8005b7e:	4639      	mov	r1, r7
 8005b80:	4622      	mov	r2, r4
 8005b82:	4630      	mov	r0, r6
 8005b84:	f7ff ff1a 	bl	80059bc <__multiply>
 8005b88:	4639      	mov	r1, r7
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f7ff fe47 	bl	8005820 <_Bfree>
 8005b92:	4647      	mov	r7, r8
 8005b94:	106d      	asrs	r5, r5, #1
 8005b96:	d00b      	beq.n	8005bb0 <__pow5mult+0xa0>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	b938      	cbnz	r0, 8005bac <__pow5mult+0x9c>
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7ff ff0b 	bl	80059bc <__multiply>
 8005ba6:	6020      	str	r0, [r4, #0]
 8005ba8:	f8c0 9000 	str.w	r9, [r0]
 8005bac:	4604      	mov	r4, r0
 8005bae:	e7e4      	b.n	8005b7a <__pow5mult+0x6a>
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08007118 	.word	0x08007118
 8005bbc:	08006f0e 	.word	0x08006f0e
 8005bc0:	08006fe2 	.word	0x08006fe2

08005bc4 <__lshift>:
 8005bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc8:	460c      	mov	r4, r1
 8005bca:	6849      	ldr	r1, [r1, #4]
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005bd2:	68a3      	ldr	r3, [r4, #8]
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	4691      	mov	r9, r2
 8005bd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005bdc:	f108 0601 	add.w	r6, r8, #1
 8005be0:	42b3      	cmp	r3, r6
 8005be2:	db0b      	blt.n	8005bfc <__lshift+0x38>
 8005be4:	4638      	mov	r0, r7
 8005be6:	f7ff fddb 	bl	80057a0 <_Balloc>
 8005bea:	4605      	mov	r5, r0
 8005bec:	b948      	cbnz	r0, 8005c02 <__lshift+0x3e>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <__lshift+0xd8>)
 8005bf2:	482b      	ldr	r0, [pc, #172]	; (8005ca0 <__lshift+0xdc>)
 8005bf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005bf8:	f7fd fce4 	bl	80035c4 <__assert_func>
 8005bfc:	3101      	adds	r1, #1
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	e7ee      	b.n	8005be0 <__lshift+0x1c>
 8005c02:	2300      	movs	r3, #0
 8005c04:	f100 0114 	add.w	r1, r0, #20
 8005c08:	f100 0210 	add.w	r2, r0, #16
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	4553      	cmp	r3, sl
 8005c10:	db37      	blt.n	8005c82 <__lshift+0xbe>
 8005c12:	6920      	ldr	r0, [r4, #16]
 8005c14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c18:	f104 0314 	add.w	r3, r4, #20
 8005c1c:	f019 091f 	ands.w	r9, r9, #31
 8005c20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c28:	d02f      	beq.n	8005c8a <__lshift+0xc6>
 8005c2a:	f1c9 0e20 	rsb	lr, r9, #32
 8005c2e:	468a      	mov	sl, r1
 8005c30:	f04f 0c00 	mov.w	ip, #0
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	fa02 f209 	lsl.w	r2, r2, r9
 8005c3a:	ea42 020c 	orr.w	r2, r2, ip
 8005c3e:	f84a 2b04 	str.w	r2, [sl], #4
 8005c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c46:	4298      	cmp	r0, r3
 8005c48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005c4c:	d8f2      	bhi.n	8005c34 <__lshift+0x70>
 8005c4e:	1b03      	subs	r3, r0, r4
 8005c50:	3b15      	subs	r3, #21
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	3304      	adds	r3, #4
 8005c58:	f104 0215 	add.w	r2, r4, #21
 8005c5c:	4290      	cmp	r0, r2
 8005c5e:	bf38      	it	cc
 8005c60:	2304      	movcc	r3, #4
 8005c62:	f841 c003 	str.w	ip, [r1, r3]
 8005c66:	f1bc 0f00 	cmp.w	ip, #0
 8005c6a:	d001      	beq.n	8005c70 <__lshift+0xac>
 8005c6c:	f108 0602 	add.w	r6, r8, #2
 8005c70:	3e01      	subs	r6, #1
 8005c72:	4638      	mov	r0, r7
 8005c74:	612e      	str	r6, [r5, #16]
 8005c76:	4621      	mov	r1, r4
 8005c78:	f7ff fdd2 	bl	8005820 <_Bfree>
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c82:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c86:	3301      	adds	r3, #1
 8005c88:	e7c1      	b.n	8005c0e <__lshift+0x4a>
 8005c8a:	3904      	subs	r1, #4
 8005c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c90:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c94:	4298      	cmp	r0, r3
 8005c96:	d8f9      	bhi.n	8005c8c <__lshift+0xc8>
 8005c98:	e7ea      	b.n	8005c70 <__lshift+0xac>
 8005c9a:	bf00      	nop
 8005c9c:	08006f64 	.word	0x08006f64
 8005ca0:	08006fe2 	.word	0x08006fe2

08005ca4 <__mcmp>:
 8005ca4:	b530      	push	{r4, r5, lr}
 8005ca6:	6902      	ldr	r2, [r0, #16]
 8005ca8:	690c      	ldr	r4, [r1, #16]
 8005caa:	1b12      	subs	r2, r2, r4
 8005cac:	d10e      	bne.n	8005ccc <__mcmp+0x28>
 8005cae:	f100 0314 	add.w	r3, r0, #20
 8005cb2:	3114      	adds	r1, #20
 8005cb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005cb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005cbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005cc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005cc4:	42a5      	cmp	r5, r4
 8005cc6:	d003      	beq.n	8005cd0 <__mcmp+0x2c>
 8005cc8:	d305      	bcc.n	8005cd6 <__mcmp+0x32>
 8005cca:	2201      	movs	r2, #1
 8005ccc:	4610      	mov	r0, r2
 8005cce:	bd30      	pop	{r4, r5, pc}
 8005cd0:	4283      	cmp	r3, r0
 8005cd2:	d3f3      	bcc.n	8005cbc <__mcmp+0x18>
 8005cd4:	e7fa      	b.n	8005ccc <__mcmp+0x28>
 8005cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cda:	e7f7      	b.n	8005ccc <__mcmp+0x28>

08005cdc <__mdiff>:
 8005cdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	4690      	mov	r8, r2
 8005cea:	f7ff ffdb 	bl	8005ca4 <__mcmp>
 8005cee:	1e05      	subs	r5, r0, #0
 8005cf0:	d110      	bne.n	8005d14 <__mdiff+0x38>
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f7ff fd53 	bl	80057a0 <_Balloc>
 8005cfa:	b930      	cbnz	r0, 8005d0a <__mdiff+0x2e>
 8005cfc:	4b3a      	ldr	r3, [pc, #232]	; (8005de8 <__mdiff+0x10c>)
 8005cfe:	4602      	mov	r2, r0
 8005d00:	f240 2132 	movw	r1, #562	; 0x232
 8005d04:	4839      	ldr	r0, [pc, #228]	; (8005dec <__mdiff+0x110>)
 8005d06:	f7fd fc5d 	bl	80035c4 <__assert_func>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d14:	bfa4      	itt	ge
 8005d16:	4643      	movge	r3, r8
 8005d18:	46a0      	movge	r8, r4
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d20:	bfa6      	itte	ge
 8005d22:	461c      	movge	r4, r3
 8005d24:	2500      	movge	r5, #0
 8005d26:	2501      	movlt	r5, #1
 8005d28:	f7ff fd3a 	bl	80057a0 <_Balloc>
 8005d2c:	b920      	cbnz	r0, 8005d38 <__mdiff+0x5c>
 8005d2e:	4b2e      	ldr	r3, [pc, #184]	; (8005de8 <__mdiff+0x10c>)
 8005d30:	4602      	mov	r2, r0
 8005d32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005d36:	e7e5      	b.n	8005d04 <__mdiff+0x28>
 8005d38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d3c:	6926      	ldr	r6, [r4, #16]
 8005d3e:	60c5      	str	r5, [r0, #12]
 8005d40:	f104 0914 	add.w	r9, r4, #20
 8005d44:	f108 0514 	add.w	r5, r8, #20
 8005d48:	f100 0e14 	add.w	lr, r0, #20
 8005d4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005d50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005d54:	f108 0210 	add.w	r2, r8, #16
 8005d58:	46f2      	mov	sl, lr
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005d64:	fa1f f883 	uxth.w	r8, r3
 8005d68:	fa11 f18b 	uxtah	r1, r1, fp
 8005d6c:	0c1b      	lsrs	r3, r3, #16
 8005d6e:	eba1 0808 	sub.w	r8, r1, r8
 8005d72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005d76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005d7a:	fa1f f888 	uxth.w	r8, r8
 8005d7e:	1419      	asrs	r1, r3, #16
 8005d80:	454e      	cmp	r6, r9
 8005d82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005d86:	f84a 3b04 	str.w	r3, [sl], #4
 8005d8a:	d8e7      	bhi.n	8005d5c <__mdiff+0x80>
 8005d8c:	1b33      	subs	r3, r6, r4
 8005d8e:	3b15      	subs	r3, #21
 8005d90:	f023 0303 	bic.w	r3, r3, #3
 8005d94:	3304      	adds	r3, #4
 8005d96:	3415      	adds	r4, #21
 8005d98:	42a6      	cmp	r6, r4
 8005d9a:	bf38      	it	cc
 8005d9c:	2304      	movcc	r3, #4
 8005d9e:	441d      	add	r5, r3
 8005da0:	4473      	add	r3, lr
 8005da2:	469e      	mov	lr, r3
 8005da4:	462e      	mov	r6, r5
 8005da6:	4566      	cmp	r6, ip
 8005da8:	d30e      	bcc.n	8005dc8 <__mdiff+0xec>
 8005daa:	f10c 0203 	add.w	r2, ip, #3
 8005dae:	1b52      	subs	r2, r2, r5
 8005db0:	f022 0203 	bic.w	r2, r2, #3
 8005db4:	3d03      	subs	r5, #3
 8005db6:	45ac      	cmp	ip, r5
 8005db8:	bf38      	it	cc
 8005dba:	2200      	movcc	r2, #0
 8005dbc:	441a      	add	r2, r3
 8005dbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005dc2:	b17b      	cbz	r3, 8005de4 <__mdiff+0x108>
 8005dc4:	6107      	str	r7, [r0, #16]
 8005dc6:	e7a3      	b.n	8005d10 <__mdiff+0x34>
 8005dc8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005dcc:	fa11 f288 	uxtah	r2, r1, r8
 8005dd0:	1414      	asrs	r4, r2, #16
 8005dd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005ddc:	f84e 2b04 	str.w	r2, [lr], #4
 8005de0:	1421      	asrs	r1, r4, #16
 8005de2:	e7e0      	b.n	8005da6 <__mdiff+0xca>
 8005de4:	3f01      	subs	r7, #1
 8005de6:	e7ea      	b.n	8005dbe <__mdiff+0xe2>
 8005de8:	08006f64 	.word	0x08006f64
 8005dec:	08006fe2 	.word	0x08006fe2

08005df0 <__d2b>:
 8005df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005df4:	4689      	mov	r9, r1
 8005df6:	2101      	movs	r1, #1
 8005df8:	ec57 6b10 	vmov	r6, r7, d0
 8005dfc:	4690      	mov	r8, r2
 8005dfe:	f7ff fccf 	bl	80057a0 <_Balloc>
 8005e02:	4604      	mov	r4, r0
 8005e04:	b930      	cbnz	r0, 8005e14 <__d2b+0x24>
 8005e06:	4602      	mov	r2, r0
 8005e08:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <__d2b+0xb0>)
 8005e0a:	4826      	ldr	r0, [pc, #152]	; (8005ea4 <__d2b+0xb4>)
 8005e0c:	f240 310a 	movw	r1, #778	; 0x30a
 8005e10:	f7fd fbd8 	bl	80035c4 <__assert_func>
 8005e14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005e18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e1c:	bb35      	cbnz	r5, 8005e6c <__d2b+0x7c>
 8005e1e:	2e00      	cmp	r6, #0
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	d028      	beq.n	8005e76 <__d2b+0x86>
 8005e24:	4668      	mov	r0, sp
 8005e26:	9600      	str	r6, [sp, #0]
 8005e28:	f7ff fd82 	bl	8005930 <__lo0bits>
 8005e2c:	9900      	ldr	r1, [sp, #0]
 8005e2e:	b300      	cbz	r0, 8005e72 <__d2b+0x82>
 8005e30:	9a01      	ldr	r2, [sp, #4]
 8005e32:	f1c0 0320 	rsb	r3, r0, #32
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	40c2      	lsrs	r2, r0
 8005e3e:	6163      	str	r3, [r4, #20]
 8005e40:	9201      	str	r2, [sp, #4]
 8005e42:	9b01      	ldr	r3, [sp, #4]
 8005e44:	61a3      	str	r3, [r4, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bf14      	ite	ne
 8005e4a:	2202      	movne	r2, #2
 8005e4c:	2201      	moveq	r2, #1
 8005e4e:	6122      	str	r2, [r4, #16]
 8005e50:	b1d5      	cbz	r5, 8005e88 <__d2b+0x98>
 8005e52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005e56:	4405      	add	r5, r0
 8005e58:	f8c9 5000 	str.w	r5, [r9]
 8005e5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e60:	f8c8 0000 	str.w	r0, [r8]
 8005e64:	4620      	mov	r0, r4
 8005e66:	b003      	add	sp, #12
 8005e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e70:	e7d5      	b.n	8005e1e <__d2b+0x2e>
 8005e72:	6161      	str	r1, [r4, #20]
 8005e74:	e7e5      	b.n	8005e42 <__d2b+0x52>
 8005e76:	a801      	add	r0, sp, #4
 8005e78:	f7ff fd5a 	bl	8005930 <__lo0bits>
 8005e7c:	9b01      	ldr	r3, [sp, #4]
 8005e7e:	6163      	str	r3, [r4, #20]
 8005e80:	2201      	movs	r2, #1
 8005e82:	6122      	str	r2, [r4, #16]
 8005e84:	3020      	adds	r0, #32
 8005e86:	e7e3      	b.n	8005e50 <__d2b+0x60>
 8005e88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e90:	f8c9 0000 	str.w	r0, [r9]
 8005e94:	6918      	ldr	r0, [r3, #16]
 8005e96:	f7ff fd2b 	bl	80058f0 <__hi0bits>
 8005e9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e9e:	e7df      	b.n	8005e60 <__d2b+0x70>
 8005ea0:	08006f64 	.word	0x08006f64
 8005ea4:	08006fe2 	.word	0x08006fe2

08005ea8 <_calloc_r>:
 8005ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eaa:	fba1 2402 	umull	r2, r4, r1, r2
 8005eae:	b94c      	cbnz	r4, 8005ec4 <_calloc_r+0x1c>
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	9201      	str	r2, [sp, #4]
 8005eb4:	f7fd fc40 	bl	8003738 <_malloc_r>
 8005eb8:	9a01      	ldr	r2, [sp, #4]
 8005eba:	4605      	mov	r5, r0
 8005ebc:	b930      	cbnz	r0, 8005ecc <_calloc_r+0x24>
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	b003      	add	sp, #12
 8005ec2:	bd30      	pop	{r4, r5, pc}
 8005ec4:	220c      	movs	r2, #12
 8005ec6:	6002      	str	r2, [r0, #0]
 8005ec8:	2500      	movs	r5, #0
 8005eca:	e7f8      	b.n	8005ebe <_calloc_r+0x16>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	f7fd fbdf 	bl	8003690 <memset>
 8005ed2:	e7f4      	b.n	8005ebe <_calloc_r+0x16>

08005ed4 <_raise_r>:
 8005ed4:	291f      	cmp	r1, #31
 8005ed6:	b538      	push	{r3, r4, r5, lr}
 8005ed8:	4604      	mov	r4, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	d904      	bls.n	8005ee8 <_raise_r+0x14>
 8005ede:	2316      	movs	r3, #22
 8005ee0:	6003      	str	r3, [r0, #0]
 8005ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005eea:	b112      	cbz	r2, 8005ef2 <_raise_r+0x1e>
 8005eec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ef0:	b94b      	cbnz	r3, 8005f06 <_raise_r+0x32>
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 f830 	bl	8005f58 <_getpid_r>
 8005ef8:	462a      	mov	r2, r5
 8005efa:	4601      	mov	r1, r0
 8005efc:	4620      	mov	r0, r4
 8005efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f02:	f000 b817 	b.w	8005f34 <_kill_r>
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d00a      	beq.n	8005f20 <_raise_r+0x4c>
 8005f0a:	1c59      	adds	r1, r3, #1
 8005f0c:	d103      	bne.n	8005f16 <_raise_r+0x42>
 8005f0e:	2316      	movs	r3, #22
 8005f10:	6003      	str	r3, [r0, #0]
 8005f12:	2001      	movs	r0, #1
 8005f14:	e7e7      	b.n	8005ee6 <_raise_r+0x12>
 8005f16:	2400      	movs	r4, #0
 8005f18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	4798      	blx	r3
 8005f20:	2000      	movs	r0, #0
 8005f22:	e7e0      	b.n	8005ee6 <_raise_r+0x12>

08005f24 <raise>:
 8005f24:	4b02      	ldr	r3, [pc, #8]	; (8005f30 <raise+0xc>)
 8005f26:	4601      	mov	r1, r0
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	f7ff bfd3 	b.w	8005ed4 <_raise_r>
 8005f2e:	bf00      	nop
 8005f30:	20000030 	.word	0x20000030

08005f34 <_kill_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d07      	ldr	r5, [pc, #28]	; (8005f54 <_kill_r+0x20>)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	4611      	mov	r1, r2
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	f7fb facb 	bl	80014dc <_kill>
 8005f46:	1c43      	adds	r3, r0, #1
 8005f48:	d102      	bne.n	8005f50 <_kill_r+0x1c>
 8005f4a:	682b      	ldr	r3, [r5, #0]
 8005f4c:	b103      	cbz	r3, 8005f50 <_kill_r+0x1c>
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	bd38      	pop	{r3, r4, r5, pc}
 8005f52:	bf00      	nop
 8005f54:	200002bc 	.word	0x200002bc

08005f58 <_getpid_r>:
 8005f58:	f7fb bab8 	b.w	80014cc <_getpid>

08005f5c <__sread>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	460c      	mov	r4, r1
 8005f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f64:	f000 f8a0 	bl	80060a8 <_read_r>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	bfab      	itete	ge
 8005f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f70:	181b      	addge	r3, r3, r0
 8005f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f76:	bfac      	ite	ge
 8005f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f7a:	81a3      	strhlt	r3, [r4, #12]
 8005f7c:	bd10      	pop	{r4, pc}

08005f7e <__swrite>:
 8005f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f82:	461f      	mov	r7, r3
 8005f84:	898b      	ldrh	r3, [r1, #12]
 8005f86:	05db      	lsls	r3, r3, #23
 8005f88:	4605      	mov	r5, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	d505      	bpl.n	8005f9c <__swrite+0x1e>
 8005f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f94:	2302      	movs	r3, #2
 8005f96:	2200      	movs	r2, #0
 8005f98:	f000 f874 	bl	8006084 <_lseek_r>
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fa6:	81a3      	strh	r3, [r4, #12]
 8005fa8:	4632      	mov	r2, r6
 8005faa:	463b      	mov	r3, r7
 8005fac:	4628      	mov	r0, r5
 8005fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb2:	f000 b823 	b.w	8005ffc <_write_r>

08005fb6 <__sseek>:
 8005fb6:	b510      	push	{r4, lr}
 8005fb8:	460c      	mov	r4, r1
 8005fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fbe:	f000 f861 	bl	8006084 <_lseek_r>
 8005fc2:	1c43      	adds	r3, r0, #1
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	bf15      	itete	ne
 8005fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fd2:	81a3      	strheq	r3, [r4, #12]
 8005fd4:	bf18      	it	ne
 8005fd6:	81a3      	strhne	r3, [r4, #12]
 8005fd8:	bd10      	pop	{r4, pc}

08005fda <__sclose>:
 8005fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fde:	f000 b81f 	b.w	8006020 <_close_r>

08005fe2 <__ascii_wctomb>:
 8005fe2:	b149      	cbz	r1, 8005ff8 <__ascii_wctomb+0x16>
 8005fe4:	2aff      	cmp	r2, #255	; 0xff
 8005fe6:	bf85      	ittet	hi
 8005fe8:	238a      	movhi	r3, #138	; 0x8a
 8005fea:	6003      	strhi	r3, [r0, #0]
 8005fec:	700a      	strbls	r2, [r1, #0]
 8005fee:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005ff2:	bf98      	it	ls
 8005ff4:	2001      	movls	r0, #1
 8005ff6:	4770      	bx	lr
 8005ff8:	4608      	mov	r0, r1
 8005ffa:	4770      	bx	lr

08005ffc <_write_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4d07      	ldr	r5, [pc, #28]	; (800601c <_write_r+0x20>)
 8006000:	4604      	mov	r4, r0
 8006002:	4608      	mov	r0, r1
 8006004:	4611      	mov	r1, r2
 8006006:	2200      	movs	r2, #0
 8006008:	602a      	str	r2, [r5, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	f7fa fe50 	bl	8000cb0 <_write>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d102      	bne.n	800601a <_write_r+0x1e>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b103      	cbz	r3, 800601a <_write_r+0x1e>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	200002bc 	.word	0x200002bc

08006020 <_close_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d06      	ldr	r5, [pc, #24]	; (800603c <_close_r+0x1c>)
 8006024:	2300      	movs	r3, #0
 8006026:	4604      	mov	r4, r0
 8006028:	4608      	mov	r0, r1
 800602a:	602b      	str	r3, [r5, #0]
 800602c:	f7fb fa70 	bl	8001510 <_close>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_close_r+0x1a>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_close_r+0x1a>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	200002bc 	.word	0x200002bc

08006040 <_fstat_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d07      	ldr	r5, [pc, #28]	; (8006060 <_fstat_r+0x20>)
 8006044:	2300      	movs	r3, #0
 8006046:	4604      	mov	r4, r0
 8006048:	4608      	mov	r0, r1
 800604a:	4611      	mov	r1, r2
 800604c:	602b      	str	r3, [r5, #0]
 800604e:	f7fb fa6b 	bl	8001528 <_fstat>
 8006052:	1c43      	adds	r3, r0, #1
 8006054:	d102      	bne.n	800605c <_fstat_r+0x1c>
 8006056:	682b      	ldr	r3, [r5, #0]
 8006058:	b103      	cbz	r3, 800605c <_fstat_r+0x1c>
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	bd38      	pop	{r3, r4, r5, pc}
 800605e:	bf00      	nop
 8006060:	200002bc 	.word	0x200002bc

08006064 <_isatty_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d06      	ldr	r5, [pc, #24]	; (8006080 <_isatty_r+0x1c>)
 8006068:	2300      	movs	r3, #0
 800606a:	4604      	mov	r4, r0
 800606c:	4608      	mov	r0, r1
 800606e:	602b      	str	r3, [r5, #0]
 8006070:	f7fb fa6a 	bl	8001548 <_isatty>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_isatty_r+0x1a>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	b103      	cbz	r3, 800607e <_isatty_r+0x1a>
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	200002bc 	.word	0x200002bc

08006084 <_lseek_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4d07      	ldr	r5, [pc, #28]	; (80060a4 <_lseek_r+0x20>)
 8006088:	4604      	mov	r4, r0
 800608a:	4608      	mov	r0, r1
 800608c:	4611      	mov	r1, r2
 800608e:	2200      	movs	r2, #0
 8006090:	602a      	str	r2, [r5, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	f7fb fa63 	bl	800155e <_lseek>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_lseek_r+0x1e>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_lseek_r+0x1e>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	200002bc 	.word	0x200002bc

080060a8 <_read_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d07      	ldr	r5, [pc, #28]	; (80060c8 <_read_r+0x20>)
 80060ac:	4604      	mov	r4, r0
 80060ae:	4608      	mov	r0, r1
 80060b0:	4611      	mov	r1, r2
 80060b2:	2200      	movs	r2, #0
 80060b4:	602a      	str	r2, [r5, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f7fa fde0 	bl	8000c7c <_read>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_read_r+0x1e>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_read_r+0x1e>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	200002bc 	.word	0x200002bc
 80060cc:	00000000 	.word	0x00000000

080060d0 <atan>:
 80060d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	ec55 4b10 	vmov	r4, r5, d0
 80060d8:	4bbf      	ldr	r3, [pc, #764]	; (80063d8 <atan+0x308>)
 80060da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80060de:	429e      	cmp	r6, r3
 80060e0:	46aa      	mov	sl, r5
 80060e2:	dd17      	ble.n	8006114 <atan+0x44>
 80060e4:	4bbd      	ldr	r3, [pc, #756]	; (80063dc <atan+0x30c>)
 80060e6:	429e      	cmp	r6, r3
 80060e8:	dc0a      	bgt.n	8006100 <atan+0x30>
 80060ea:	d007      	beq.n	80060fc <atan+0x2c>
 80060ec:	f1ba 0f00 	cmp.w	sl, #0
 80060f0:	f340 80cc 	ble.w	800628c <atan+0x1bc>
 80060f4:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 8006368 <atan+0x298>
 80060f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fc:	2c00      	cmp	r4, #0
 80060fe:	d0f5      	beq.n	80060ec <atan+0x1c>
 8006100:	4622      	mov	r2, r4
 8006102:	462b      	mov	r3, r5
 8006104:	4620      	mov	r0, r4
 8006106:	4629      	mov	r1, r5
 8006108:	f7fa f8a0 	bl	800024c <__adddf3>
 800610c:	ec41 0b10 	vmov	d0, r0, r1
 8006110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006114:	4bb2      	ldr	r3, [pc, #712]	; (80063e0 <atan+0x310>)
 8006116:	429e      	cmp	r6, r3
 8006118:	f300 80bc 	bgt.w	8006294 <atan+0x1c4>
 800611c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006120:	429e      	cmp	r6, r3
 8006122:	f340 80a1 	ble.w	8006268 <atan+0x198>
 8006126:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800612a:	4622      	mov	r2, r4
 800612c:	462b      	mov	r3, r5
 800612e:	4620      	mov	r0, r4
 8006130:	4629      	mov	r1, r5
 8006132:	f7fa fa41 	bl	80005b8 <__aeabi_dmul>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4680      	mov	r8, r0
 800613c:	4689      	mov	r9, r1
 800613e:	f7fa fa3b 	bl	80005b8 <__aeabi_dmul>
 8006142:	a38b      	add	r3, pc, #556	; (adr r3, 8006370 <atan+0x2a0>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	4606      	mov	r6, r0
 800614a:	460f      	mov	r7, r1
 800614c:	f7fa fa34 	bl	80005b8 <__aeabi_dmul>
 8006150:	a389      	add	r3, pc, #548	; (adr r3, 8006378 <atan+0x2a8>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f7fa f879 	bl	800024c <__adddf3>
 800615a:	4632      	mov	r2, r6
 800615c:	463b      	mov	r3, r7
 800615e:	f7fa fa2b 	bl	80005b8 <__aeabi_dmul>
 8006162:	a387      	add	r3, pc, #540	; (adr r3, 8006380 <atan+0x2b0>)
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	f7fa f870 	bl	800024c <__adddf3>
 800616c:	4632      	mov	r2, r6
 800616e:	463b      	mov	r3, r7
 8006170:	f7fa fa22 	bl	80005b8 <__aeabi_dmul>
 8006174:	a384      	add	r3, pc, #528	; (adr r3, 8006388 <atan+0x2b8>)
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f7fa f867 	bl	800024c <__adddf3>
 800617e:	4632      	mov	r2, r6
 8006180:	463b      	mov	r3, r7
 8006182:	f7fa fa19 	bl	80005b8 <__aeabi_dmul>
 8006186:	a382      	add	r3, pc, #520	; (adr r3, 8006390 <atan+0x2c0>)
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	f7fa f85e 	bl	800024c <__adddf3>
 8006190:	4632      	mov	r2, r6
 8006192:	463b      	mov	r3, r7
 8006194:	f7fa fa10 	bl	80005b8 <__aeabi_dmul>
 8006198:	a37f      	add	r3, pc, #508	; (adr r3, 8006398 <atan+0x2c8>)
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	f7fa f855 	bl	800024c <__adddf3>
 80061a2:	4642      	mov	r2, r8
 80061a4:	464b      	mov	r3, r9
 80061a6:	f7fa fa07 	bl	80005b8 <__aeabi_dmul>
 80061aa:	a37d      	add	r3, pc, #500	; (adr r3, 80063a0 <atan+0x2d0>)
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	4680      	mov	r8, r0
 80061b2:	4689      	mov	r9, r1
 80061b4:	4630      	mov	r0, r6
 80061b6:	4639      	mov	r1, r7
 80061b8:	f7fa f9fe 	bl	80005b8 <__aeabi_dmul>
 80061bc:	a37a      	add	r3, pc, #488	; (adr r3, 80063a8 <atan+0x2d8>)
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f7fa f841 	bl	8000248 <__aeabi_dsub>
 80061c6:	4632      	mov	r2, r6
 80061c8:	463b      	mov	r3, r7
 80061ca:	f7fa f9f5 	bl	80005b8 <__aeabi_dmul>
 80061ce:	a378      	add	r3, pc, #480	; (adr r3, 80063b0 <atan+0x2e0>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f7fa f838 	bl	8000248 <__aeabi_dsub>
 80061d8:	4632      	mov	r2, r6
 80061da:	463b      	mov	r3, r7
 80061dc:	f7fa f9ec 	bl	80005b8 <__aeabi_dmul>
 80061e0:	a375      	add	r3, pc, #468	; (adr r3, 80063b8 <atan+0x2e8>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f7fa f82f 	bl	8000248 <__aeabi_dsub>
 80061ea:	4632      	mov	r2, r6
 80061ec:	463b      	mov	r3, r7
 80061ee:	f7fa f9e3 	bl	80005b8 <__aeabi_dmul>
 80061f2:	a373      	add	r3, pc, #460	; (adr r3, 80063c0 <atan+0x2f0>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7fa f826 	bl	8000248 <__aeabi_dsub>
 80061fc:	4632      	mov	r2, r6
 80061fe:	463b      	mov	r3, r7
 8006200:	f7fa f9da 	bl	80005b8 <__aeabi_dmul>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4640      	mov	r0, r8
 800620a:	4649      	mov	r1, r9
 800620c:	f7fa f81e 	bl	800024c <__adddf3>
 8006210:	4622      	mov	r2, r4
 8006212:	462b      	mov	r3, r5
 8006214:	f7fa f9d0 	bl	80005b8 <__aeabi_dmul>
 8006218:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	d05b      	beq.n	80062da <atan+0x20a>
 8006222:	4a70      	ldr	r2, [pc, #448]	; (80063e4 <atan+0x314>)
 8006224:	4b70      	ldr	r3, [pc, #448]	; (80063e8 <atan+0x318>)
 8006226:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800622a:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
 800622e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006232:	f7fa f809 	bl	8000248 <__aeabi_dsub>
 8006236:	4622      	mov	r2, r4
 8006238:	462b      	mov	r3, r5
 800623a:	f7fa f805 	bl	8000248 <__aeabi_dsub>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	e9db 0100 	ldrd	r0, r1, [fp]
 8006246:	f7f9 ffff 	bl	8000248 <__aeabi_dsub>
 800624a:	f1ba 0f00 	cmp.w	sl, #0
 800624e:	ec41 0b10 	vmov	d0, r0, r1
 8006252:	f6bf af5d 	bge.w	8006110 <atan+0x40>
 8006256:	ee10 1a90 	vmov	r1, s1
 800625a:	4602      	mov	r2, r0
 800625c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006260:	ec43 2b10 	vmov	d0, r2, r3
 8006264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006268:	a357      	add	r3, pc, #348	; (adr r3, 80063c8 <atan+0x2f8>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	ee10 0a10 	vmov	r0, s0
 8006272:	4629      	mov	r1, r5
 8006274:	f7f9 ffea 	bl	800024c <__adddf3>
 8006278:	4b5c      	ldr	r3, [pc, #368]	; (80063ec <atan+0x31c>)
 800627a:	2200      	movs	r2, #0
 800627c:	f7fa fc2c 	bl	8000ad8 <__aeabi_dcmpgt>
 8006280:	2800      	cmp	r0, #0
 8006282:	f43f af50 	beq.w	8006126 <atan+0x56>
 8006286:	ec45 4b10 	vmov	d0, r4, r5
 800628a:	e741      	b.n	8006110 <atan+0x40>
 800628c:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80063d0 <atan+0x300>
 8006290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006294:	f000 f8b4 	bl	8006400 <fabs>
 8006298:	4b55      	ldr	r3, [pc, #340]	; (80063f0 <atan+0x320>)
 800629a:	429e      	cmp	r6, r3
 800629c:	ec55 4b10 	vmov	r4, r5, d0
 80062a0:	dc23      	bgt.n	80062ea <atan+0x21a>
 80062a2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80062a6:	429e      	cmp	r6, r3
 80062a8:	dc4e      	bgt.n	8006348 <atan+0x278>
 80062aa:	ee10 2a10 	vmov	r2, s0
 80062ae:	462b      	mov	r3, r5
 80062b0:	ee10 0a10 	vmov	r0, s0
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7f9 ffc9 	bl	800024c <__adddf3>
 80062ba:	4b4c      	ldr	r3, [pc, #304]	; (80063ec <atan+0x31c>)
 80062bc:	2200      	movs	r2, #0
 80062be:	f7f9 ffc3 	bl	8000248 <__aeabi_dsub>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4620      	mov	r0, r4
 80062c8:	4629      	mov	r1, r5
 80062ca:	4614      	mov	r4, r2
 80062cc:	461d      	mov	r5, r3
 80062ce:	f04f 0b00 	mov.w	fp, #0
 80062d2:	2200      	movs	r2, #0
 80062d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062d8:	e01f      	b.n	800631a <atan+0x24a>
 80062da:	4620      	mov	r0, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	f7f9 ffb3 	bl	8000248 <__aeabi_dsub>
 80062e2:	ec41 0b10 	vmov	d0, r0, r1
 80062e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ea:	4b42      	ldr	r3, [pc, #264]	; (80063f4 <atan+0x324>)
 80062ec:	429e      	cmp	r6, r3
 80062ee:	da1f      	bge.n	8006330 <atan+0x260>
 80062f0:	4b41      	ldr	r3, [pc, #260]	; (80063f8 <atan+0x328>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	4629      	mov	r1, r5
 80062f6:	ee10 0a10 	vmov	r0, s0
 80062fa:	f7f9 ffa5 	bl	8000248 <__aeabi_dsub>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4620      	mov	r0, r4
 8006304:	4629      	mov	r1, r5
 8006306:	4614      	mov	r4, r2
 8006308:	461d      	mov	r5, r3
 800630a:	2200      	movs	r2, #0
 800630c:	4b3a      	ldr	r3, [pc, #232]	; (80063f8 <atan+0x328>)
 800630e:	f04f 0b02 	mov.w	fp, #2
 8006312:	f7fa f951 	bl	80005b8 <__aeabi_dmul>
 8006316:	4b35      	ldr	r3, [pc, #212]	; (80063ec <atan+0x31c>)
 8006318:	2200      	movs	r2, #0
 800631a:	f7f9 ff97 	bl	800024c <__adddf3>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4620      	mov	r0, r4
 8006324:	4629      	mov	r1, r5
 8006326:	f7fa fa71 	bl	800080c <__aeabi_ddiv>
 800632a:	4604      	mov	r4, r0
 800632c:	460d      	mov	r5, r1
 800632e:	e6fc      	b.n	800612a <atan+0x5a>
 8006330:	462b      	mov	r3, r5
 8006332:	4932      	ldr	r1, [pc, #200]	; (80063fc <atan+0x32c>)
 8006334:	ee10 2a10 	vmov	r2, s0
 8006338:	2000      	movs	r0, #0
 800633a:	f7fa fa67 	bl	800080c <__aeabi_ddiv>
 800633e:	f04f 0b03 	mov.w	fp, #3
 8006342:	4604      	mov	r4, r0
 8006344:	460d      	mov	r5, r1
 8006346:	e6f0      	b.n	800612a <atan+0x5a>
 8006348:	4b28      	ldr	r3, [pc, #160]	; (80063ec <atan+0x31c>)
 800634a:	2200      	movs	r2, #0
 800634c:	4629      	mov	r1, r5
 800634e:	ee10 0a10 	vmov	r0, s0
 8006352:	f7f9 ff79 	bl	8000248 <__aeabi_dsub>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f04f 0b01 	mov.w	fp, #1
 8006362:	4614      	mov	r4, r2
 8006364:	461d      	mov	r5, r3
 8006366:	e7d6      	b.n	8006316 <atan+0x246>
 8006368:	54442d18 	.word	0x54442d18
 800636c:	3ff921fb 	.word	0x3ff921fb
 8006370:	e322da11 	.word	0xe322da11
 8006374:	3f90ad3a 	.word	0x3f90ad3a
 8006378:	24760deb 	.word	0x24760deb
 800637c:	3fa97b4b 	.word	0x3fa97b4b
 8006380:	a0d03d51 	.word	0xa0d03d51
 8006384:	3fb10d66 	.word	0x3fb10d66
 8006388:	c54c206e 	.word	0xc54c206e
 800638c:	3fb745cd 	.word	0x3fb745cd
 8006390:	920083ff 	.word	0x920083ff
 8006394:	3fc24924 	.word	0x3fc24924
 8006398:	5555550d 	.word	0x5555550d
 800639c:	3fd55555 	.word	0x3fd55555
 80063a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80063a4:	bfa2b444 	.word	0xbfa2b444
 80063a8:	52defd9a 	.word	0x52defd9a
 80063ac:	3fadde2d 	.word	0x3fadde2d
 80063b0:	af749a6d 	.word	0xaf749a6d
 80063b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80063b8:	fe231671 	.word	0xfe231671
 80063bc:	3fbc71c6 	.word	0x3fbc71c6
 80063c0:	9998ebc4 	.word	0x9998ebc4
 80063c4:	3fc99999 	.word	0x3fc99999
 80063c8:	8800759c 	.word	0x8800759c
 80063cc:	7e37e43c 	.word	0x7e37e43c
 80063d0:	54442d18 	.word	0x54442d18
 80063d4:	bff921fb 	.word	0xbff921fb
 80063d8:	440fffff 	.word	0x440fffff
 80063dc:	7ff00000 	.word	0x7ff00000
 80063e0:	3fdbffff 	.word	0x3fdbffff
 80063e4:	08007248 	.word	0x08007248
 80063e8:	08007228 	.word	0x08007228
 80063ec:	3ff00000 	.word	0x3ff00000
 80063f0:	3ff2ffff 	.word	0x3ff2ffff
 80063f4:	40038000 	.word	0x40038000
 80063f8:	3ff80000 	.word	0x3ff80000
 80063fc:	bff00000 	.word	0xbff00000

08006400 <fabs>:
 8006400:	ec51 0b10 	vmov	r0, r1, d0
 8006404:	ee10 2a10 	vmov	r2, s0
 8006408:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800640c:	ec43 2b10 	vmov	d0, r2, r3
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop

08006414 <acos>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	ed2d 8b02 	vpush	{d8}
 800641a:	ec55 4b10 	vmov	r4, r5, d0
 800641e:	f000 f863 	bl	80064e8 <__ieee754_acos>
 8006422:	4622      	mov	r2, r4
 8006424:	462b      	mov	r3, r5
 8006426:	4620      	mov	r0, r4
 8006428:	4629      	mov	r1, r5
 800642a:	eeb0 8a40 	vmov.f32	s16, s0
 800642e:	eef0 8a60 	vmov.f32	s17, s1
 8006432:	f7fa fb5b 	bl	8000aec <__aeabi_dcmpun>
 8006436:	b950      	cbnz	r0, 800644e <acos+0x3a>
 8006438:	ec45 4b10 	vmov	d0, r4, r5
 800643c:	f7ff ffe0 	bl	8006400 <fabs>
 8006440:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <acos+0x60>)
 8006442:	ec51 0b10 	vmov	r0, r1, d0
 8006446:	2200      	movs	r2, #0
 8006448:	f7fa fb46 	bl	8000ad8 <__aeabi_dcmpgt>
 800644c:	b930      	cbnz	r0, 800645c <acos+0x48>
 800644e:	eeb0 0a48 	vmov.f32	s0, s16
 8006452:	eef0 0a68 	vmov.f32	s1, s17
 8006456:	ecbd 8b02 	vpop	{d8}
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	f7fd f8d0 	bl	8003600 <__errno>
 8006460:	ecbd 8b02 	vpop	{d8}
 8006464:	4603      	mov	r3, r0
 8006466:	2221      	movs	r2, #33	; 0x21
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	4803      	ldr	r0, [pc, #12]	; (8006478 <acos+0x64>)
 800646c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006470:	f000 bb72 	b.w	8006b58 <nan>
 8006474:	3ff00000 	.word	0x3ff00000
 8006478:	08007268 	.word	0x08007268

0800647c <sqrt>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	ed2d 8b02 	vpush	{d8}
 8006482:	ec55 4b10 	vmov	r4, r5, d0
 8006486:	f000 fa9f 	bl	80069c8 <__ieee754_sqrt>
 800648a:	4622      	mov	r2, r4
 800648c:	462b      	mov	r3, r5
 800648e:	4620      	mov	r0, r4
 8006490:	4629      	mov	r1, r5
 8006492:	eeb0 8a40 	vmov.f32	s16, s0
 8006496:	eef0 8a60 	vmov.f32	s17, s1
 800649a:	f7fa fb27 	bl	8000aec <__aeabi_dcmpun>
 800649e:	b930      	cbnz	r0, 80064ae <sqrt+0x32>
 80064a0:	2200      	movs	r2, #0
 80064a2:	2300      	movs	r3, #0
 80064a4:	4620      	mov	r0, r4
 80064a6:	4629      	mov	r1, r5
 80064a8:	f7fa faf8 	bl	8000a9c <__aeabi_dcmplt>
 80064ac:	b930      	cbnz	r0, 80064bc <sqrt+0x40>
 80064ae:	eeb0 0a48 	vmov.f32	s0, s16
 80064b2:	eef0 0a68 	vmov.f32	s1, s17
 80064b6:	ecbd 8b02 	vpop	{d8}
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	f7fd f8a0 	bl	8003600 <__errno>
 80064c0:	2200      	movs	r2, #0
 80064c2:	2300      	movs	r3, #0
 80064c4:	2121      	movs	r1, #33	; 0x21
 80064c6:	6001      	str	r1, [r0, #0]
 80064c8:	4610      	mov	r0, r2
 80064ca:	4619      	mov	r1, r3
 80064cc:	f7fa f99e 	bl	800080c <__aeabi_ddiv>
 80064d0:	ec41 0b18 	vmov	d8, r0, r1
 80064d4:	eeb0 0a48 	vmov.f32	s0, s16
 80064d8:	eef0 0a68 	vmov.f32	s1, s17
 80064dc:	ecbd 8b02 	vpop	{d8}
 80064e0:	bd38      	pop	{r3, r4, r5, pc}
 80064e2:	bf00      	nop
 80064e4:	0000      	movs	r0, r0
	...

080064e8 <__ieee754_acos>:
 80064e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	ec55 4b10 	vmov	r4, r5, d0
 80064f0:	49cd      	ldr	r1, [pc, #820]	; (8006828 <__ieee754_acos+0x340>)
 80064f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80064f6:	428b      	cmp	r3, r1
 80064f8:	dd0d      	ble.n	8006516 <__ieee754_acos+0x2e>
 80064fa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80064fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006502:	4323      	orrs	r3, r4
 8006504:	f040 80bd 	bne.w	8006682 <__ieee754_acos+0x19a>
 8006508:	2d00      	cmp	r5, #0
 800650a:	f340 80c9 	ble.w	80066a0 <__ieee754_acos+0x1b8>
 800650e:	ed9f 0baa 	vldr	d0, [pc, #680]	; 80067b8 <__ieee754_acos+0x2d0>
 8006512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006516:	49c5      	ldr	r1, [pc, #788]	; (800682c <__ieee754_acos+0x344>)
 8006518:	428b      	cmp	r3, r1
 800651a:	dc07      	bgt.n	800652c <__ieee754_acos+0x44>
 800651c:	4ac4      	ldr	r2, [pc, #784]	; (8006830 <__ieee754_acos+0x348>)
 800651e:	4293      	cmp	r3, r2
 8006520:	f300 80c2 	bgt.w	80066a8 <__ieee754_acos+0x1c0>
 8006524:	ed9f 0ba6 	vldr	d0, [pc, #664]	; 80067c0 <__ieee754_acos+0x2d8>
 8006528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652c:	2d00      	cmp	r5, #0
 800652e:	f2c0 8185 	blt.w	800683c <__ieee754_acos+0x354>
 8006532:	ee10 2a10 	vmov	r2, s0
 8006536:	462b      	mov	r3, r5
 8006538:	49be      	ldr	r1, [pc, #760]	; (8006834 <__ieee754_acos+0x34c>)
 800653a:	2000      	movs	r0, #0
 800653c:	f7f9 fe84 	bl	8000248 <__aeabi_dsub>
 8006540:	4bbd      	ldr	r3, [pc, #756]	; (8006838 <__ieee754_acos+0x350>)
 8006542:	2200      	movs	r2, #0
 8006544:	f7fa f838 	bl	80005b8 <__aeabi_dmul>
 8006548:	4604      	mov	r4, r0
 800654a:	460d      	mov	r5, r1
 800654c:	ec45 4b10 	vmov	d0, r4, r5
 8006550:	f000 fa3a 	bl	80069c8 <__ieee754_sqrt>
 8006554:	a39c      	add	r3, pc, #624	; (adr r3, 80067c8 <__ieee754_acos+0x2e0>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	4620      	mov	r0, r4
 800655c:	4629      	mov	r1, r5
 800655e:	ec59 8b10 	vmov	r8, r9, d0
 8006562:	f7fa f829 	bl	80005b8 <__aeabi_dmul>
 8006566:	a39a      	add	r3, pc, #616	; (adr r3, 80067d0 <__ieee754_acos+0x2e8>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f7f9 fe6e 	bl	800024c <__adddf3>
 8006570:	4622      	mov	r2, r4
 8006572:	462b      	mov	r3, r5
 8006574:	f7fa f820 	bl	80005b8 <__aeabi_dmul>
 8006578:	a397      	add	r3, pc, #604	; (adr r3, 80067d8 <__ieee754_acos+0x2f0>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7f9 fe63 	bl	8000248 <__aeabi_dsub>
 8006582:	4622      	mov	r2, r4
 8006584:	462b      	mov	r3, r5
 8006586:	f7fa f817 	bl	80005b8 <__aeabi_dmul>
 800658a:	a395      	add	r3, pc, #596	; (adr r3, 80067e0 <__ieee754_acos+0x2f8>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f7f9 fe5c 	bl	800024c <__adddf3>
 8006594:	4622      	mov	r2, r4
 8006596:	462b      	mov	r3, r5
 8006598:	f7fa f80e 	bl	80005b8 <__aeabi_dmul>
 800659c:	a392      	add	r3, pc, #584	; (adr r3, 80067e8 <__ieee754_acos+0x300>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fe51 	bl	8000248 <__aeabi_dsub>
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	f7fa f805 	bl	80005b8 <__aeabi_dmul>
 80065ae:	a390      	add	r3, pc, #576	; (adr r3, 80067f0 <__ieee754_acos+0x308>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f7f9 fe4a 	bl	800024c <__adddf3>
 80065b8:	4622      	mov	r2, r4
 80065ba:	462b      	mov	r3, r5
 80065bc:	f7f9 fffc 	bl	80005b8 <__aeabi_dmul>
 80065c0:	a38d      	add	r3, pc, #564	; (adr r3, 80067f8 <__ieee754_acos+0x310>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	4682      	mov	sl, r0
 80065c8:	468b      	mov	fp, r1
 80065ca:	4620      	mov	r0, r4
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7f9 fff3 	bl	80005b8 <__aeabi_dmul>
 80065d2:	a38b      	add	r3, pc, #556	; (adr r3, 8006800 <__ieee754_acos+0x318>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7f9 fe36 	bl	8000248 <__aeabi_dsub>
 80065dc:	4622      	mov	r2, r4
 80065de:	462b      	mov	r3, r5
 80065e0:	f7f9 ffea 	bl	80005b8 <__aeabi_dmul>
 80065e4:	a388      	add	r3, pc, #544	; (adr r3, 8006808 <__ieee754_acos+0x320>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7f9 fe2f 	bl	800024c <__adddf3>
 80065ee:	4622      	mov	r2, r4
 80065f0:	462b      	mov	r3, r5
 80065f2:	f7f9 ffe1 	bl	80005b8 <__aeabi_dmul>
 80065f6:	a386      	add	r3, pc, #536	; (adr r3, 8006810 <__ieee754_acos+0x328>)
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f7f9 fe24 	bl	8000248 <__aeabi_dsub>
 8006600:	4622      	mov	r2, r4
 8006602:	462b      	mov	r3, r5
 8006604:	f7f9 ffd8 	bl	80005b8 <__aeabi_dmul>
 8006608:	4b8a      	ldr	r3, [pc, #552]	; (8006834 <__ieee754_acos+0x34c>)
 800660a:	2200      	movs	r2, #0
 800660c:	f7f9 fe1e 	bl	800024c <__adddf3>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4650      	mov	r0, sl
 8006616:	4659      	mov	r1, fp
 8006618:	f7fa f8f8 	bl	800080c <__aeabi_ddiv>
 800661c:	4642      	mov	r2, r8
 800661e:	464b      	mov	r3, r9
 8006620:	f7f9 ffca 	bl	80005b8 <__aeabi_dmul>
 8006624:	2600      	movs	r6, #0
 8006626:	4682      	mov	sl, r0
 8006628:	468b      	mov	fp, r1
 800662a:	4632      	mov	r2, r6
 800662c:	464b      	mov	r3, r9
 800662e:	4630      	mov	r0, r6
 8006630:	4649      	mov	r1, r9
 8006632:	f7f9 ffc1 	bl	80005b8 <__aeabi_dmul>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4620      	mov	r0, r4
 800663c:	4629      	mov	r1, r5
 800663e:	f7f9 fe03 	bl	8000248 <__aeabi_dsub>
 8006642:	4632      	mov	r2, r6
 8006644:	4604      	mov	r4, r0
 8006646:	460d      	mov	r5, r1
 8006648:	464b      	mov	r3, r9
 800664a:	4640      	mov	r0, r8
 800664c:	4649      	mov	r1, r9
 800664e:	f7f9 fdfd 	bl	800024c <__adddf3>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4620      	mov	r0, r4
 8006658:	4629      	mov	r1, r5
 800665a:	f7fa f8d7 	bl	800080c <__aeabi_ddiv>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4650      	mov	r0, sl
 8006664:	4659      	mov	r1, fp
 8006666:	f7f9 fdf1 	bl	800024c <__adddf3>
 800666a:	4632      	mov	r2, r6
 800666c:	464b      	mov	r3, r9
 800666e:	f7f9 fded 	bl	800024c <__adddf3>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	f7f9 fde9 	bl	800024c <__adddf3>
 800667a:	ec41 0b10 	vmov	d0, r0, r1
 800667e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006682:	ee10 2a10 	vmov	r2, s0
 8006686:	462b      	mov	r3, r5
 8006688:	4620      	mov	r0, r4
 800668a:	4629      	mov	r1, r5
 800668c:	f7f9 fddc 	bl	8000248 <__aeabi_dsub>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	f7fa f8ba 	bl	800080c <__aeabi_ddiv>
 8006698:	ec41 0b10 	vmov	d0, r0, r1
 800669c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 8006818 <__ieee754_acos+0x330>
 80066a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a8:	ee10 2a10 	vmov	r2, s0
 80066ac:	ee10 0a10 	vmov	r0, s0
 80066b0:	462b      	mov	r3, r5
 80066b2:	4629      	mov	r1, r5
 80066b4:	f7f9 ff80 	bl	80005b8 <__aeabi_dmul>
 80066b8:	a343      	add	r3, pc, #268	; (adr r3, 80067c8 <__ieee754_acos+0x2e0>)
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	4606      	mov	r6, r0
 80066c0:	460f      	mov	r7, r1
 80066c2:	f7f9 ff79 	bl	80005b8 <__aeabi_dmul>
 80066c6:	a342      	add	r3, pc, #264	; (adr r3, 80067d0 <__ieee754_acos+0x2e8>)
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f7f9 fdbe 	bl	800024c <__adddf3>
 80066d0:	4632      	mov	r2, r6
 80066d2:	463b      	mov	r3, r7
 80066d4:	f7f9 ff70 	bl	80005b8 <__aeabi_dmul>
 80066d8:	a33f      	add	r3, pc, #252	; (adr r3, 80067d8 <__ieee754_acos+0x2f0>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f7f9 fdb3 	bl	8000248 <__aeabi_dsub>
 80066e2:	4632      	mov	r2, r6
 80066e4:	463b      	mov	r3, r7
 80066e6:	f7f9 ff67 	bl	80005b8 <__aeabi_dmul>
 80066ea:	a33d      	add	r3, pc, #244	; (adr r3, 80067e0 <__ieee754_acos+0x2f8>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f7f9 fdac 	bl	800024c <__adddf3>
 80066f4:	4632      	mov	r2, r6
 80066f6:	463b      	mov	r3, r7
 80066f8:	f7f9 ff5e 	bl	80005b8 <__aeabi_dmul>
 80066fc:	a33a      	add	r3, pc, #232	; (adr r3, 80067e8 <__ieee754_acos+0x300>)
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	f7f9 fda1 	bl	8000248 <__aeabi_dsub>
 8006706:	4632      	mov	r2, r6
 8006708:	463b      	mov	r3, r7
 800670a:	f7f9 ff55 	bl	80005b8 <__aeabi_dmul>
 800670e:	a338      	add	r3, pc, #224	; (adr r3, 80067f0 <__ieee754_acos+0x308>)
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f7f9 fd9a 	bl	800024c <__adddf3>
 8006718:	4632      	mov	r2, r6
 800671a:	463b      	mov	r3, r7
 800671c:	f7f9 ff4c 	bl	80005b8 <__aeabi_dmul>
 8006720:	a335      	add	r3, pc, #212	; (adr r3, 80067f8 <__ieee754_acos+0x310>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	4680      	mov	r8, r0
 8006728:	4689      	mov	r9, r1
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7f9 ff43 	bl	80005b8 <__aeabi_dmul>
 8006732:	a333      	add	r3, pc, #204	; (adr r3, 8006800 <__ieee754_acos+0x318>)
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f7f9 fd86 	bl	8000248 <__aeabi_dsub>
 800673c:	4632      	mov	r2, r6
 800673e:	463b      	mov	r3, r7
 8006740:	f7f9 ff3a 	bl	80005b8 <__aeabi_dmul>
 8006744:	a330      	add	r3, pc, #192	; (adr r3, 8006808 <__ieee754_acos+0x320>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f7f9 fd7f 	bl	800024c <__adddf3>
 800674e:	4632      	mov	r2, r6
 8006750:	463b      	mov	r3, r7
 8006752:	f7f9 ff31 	bl	80005b8 <__aeabi_dmul>
 8006756:	a32e      	add	r3, pc, #184	; (adr r3, 8006810 <__ieee754_acos+0x328>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f7f9 fd74 	bl	8000248 <__aeabi_dsub>
 8006760:	4632      	mov	r2, r6
 8006762:	463b      	mov	r3, r7
 8006764:	f7f9 ff28 	bl	80005b8 <__aeabi_dmul>
 8006768:	4b32      	ldr	r3, [pc, #200]	; (8006834 <__ieee754_acos+0x34c>)
 800676a:	2200      	movs	r2, #0
 800676c:	f7f9 fd6e 	bl	800024c <__adddf3>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4640      	mov	r0, r8
 8006776:	4649      	mov	r1, r9
 8006778:	f7fa f848 	bl	800080c <__aeabi_ddiv>
 800677c:	4622      	mov	r2, r4
 800677e:	462b      	mov	r3, r5
 8006780:	f7f9 ff1a 	bl	80005b8 <__aeabi_dmul>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	a125      	add	r1, pc, #148	; (adr r1, 8006820 <__ieee754_acos+0x338>)
 800678a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800678e:	f7f9 fd5b 	bl	8000248 <__aeabi_dsub>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4620      	mov	r0, r4
 8006798:	4629      	mov	r1, r5
 800679a:	f7f9 fd55 	bl	8000248 <__aeabi_dsub>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	a107      	add	r1, pc, #28	; (adr r1, 80067c0 <__ieee754_acos+0x2d8>)
 80067a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067a8:	f7f9 fd4e 	bl	8000248 <__aeabi_dsub>
 80067ac:	ec41 0b10 	vmov	d0, r0, r1
 80067b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b4:	f3af 8000 	nop.w
	...
 80067c0:	54442d18 	.word	0x54442d18
 80067c4:	3ff921fb 	.word	0x3ff921fb
 80067c8:	0dfdf709 	.word	0x0dfdf709
 80067cc:	3f023de1 	.word	0x3f023de1
 80067d0:	7501b288 	.word	0x7501b288
 80067d4:	3f49efe0 	.word	0x3f49efe0
 80067d8:	b5688f3b 	.word	0xb5688f3b
 80067dc:	3fa48228 	.word	0x3fa48228
 80067e0:	0e884455 	.word	0x0e884455
 80067e4:	3fc9c155 	.word	0x3fc9c155
 80067e8:	03eb6f7d 	.word	0x03eb6f7d
 80067ec:	3fd4d612 	.word	0x3fd4d612
 80067f0:	55555555 	.word	0x55555555
 80067f4:	3fc55555 	.word	0x3fc55555
 80067f8:	b12e9282 	.word	0xb12e9282
 80067fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8006800:	1b8d0159 	.word	0x1b8d0159
 8006804:	3fe6066c 	.word	0x3fe6066c
 8006808:	9c598ac8 	.word	0x9c598ac8
 800680c:	40002ae5 	.word	0x40002ae5
 8006810:	1c8a2d4b 	.word	0x1c8a2d4b
 8006814:	40033a27 	.word	0x40033a27
 8006818:	54442d18 	.word	0x54442d18
 800681c:	400921fb 	.word	0x400921fb
 8006820:	33145c07 	.word	0x33145c07
 8006824:	3c91a626 	.word	0x3c91a626
 8006828:	3fefffff 	.word	0x3fefffff
 800682c:	3fdfffff 	.word	0x3fdfffff
 8006830:	3c600000 	.word	0x3c600000
 8006834:	3ff00000 	.word	0x3ff00000
 8006838:	3fe00000 	.word	0x3fe00000
 800683c:	ee10 0a10 	vmov	r0, s0
 8006840:	4b5f      	ldr	r3, [pc, #380]	; (80069c0 <__ieee754_acos+0x4d8>)
 8006842:	2200      	movs	r2, #0
 8006844:	4629      	mov	r1, r5
 8006846:	f7f9 fd01 	bl	800024c <__adddf3>
 800684a:	4b5e      	ldr	r3, [pc, #376]	; (80069c4 <__ieee754_acos+0x4dc>)
 800684c:	2200      	movs	r2, #0
 800684e:	f7f9 feb3 	bl	80005b8 <__aeabi_dmul>
 8006852:	a343      	add	r3, pc, #268	; (adr r3, 8006960 <__ieee754_acos+0x478>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	4604      	mov	r4, r0
 800685a:	460d      	mov	r5, r1
 800685c:	f7f9 feac 	bl	80005b8 <__aeabi_dmul>
 8006860:	a341      	add	r3, pc, #260	; (adr r3, 8006968 <__ieee754_acos+0x480>)
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f7f9 fcf1 	bl	800024c <__adddf3>
 800686a:	4622      	mov	r2, r4
 800686c:	462b      	mov	r3, r5
 800686e:	f7f9 fea3 	bl	80005b8 <__aeabi_dmul>
 8006872:	a33f      	add	r3, pc, #252	; (adr r3, 8006970 <__ieee754_acos+0x488>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 fce6 	bl	8000248 <__aeabi_dsub>
 800687c:	4622      	mov	r2, r4
 800687e:	462b      	mov	r3, r5
 8006880:	f7f9 fe9a 	bl	80005b8 <__aeabi_dmul>
 8006884:	a33c      	add	r3, pc, #240	; (adr r3, 8006978 <__ieee754_acos+0x490>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 fcdf 	bl	800024c <__adddf3>
 800688e:	4622      	mov	r2, r4
 8006890:	462b      	mov	r3, r5
 8006892:	f7f9 fe91 	bl	80005b8 <__aeabi_dmul>
 8006896:	a33a      	add	r3, pc, #232	; (adr r3, 8006980 <__ieee754_acos+0x498>)
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f7f9 fcd4 	bl	8000248 <__aeabi_dsub>
 80068a0:	4622      	mov	r2, r4
 80068a2:	462b      	mov	r3, r5
 80068a4:	f7f9 fe88 	bl	80005b8 <__aeabi_dmul>
 80068a8:	a337      	add	r3, pc, #220	; (adr r3, 8006988 <__ieee754_acos+0x4a0>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f7f9 fccd 	bl	800024c <__adddf3>
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	f7f9 fe7f 	bl	80005b8 <__aeabi_dmul>
 80068ba:	ec45 4b10 	vmov	d0, r4, r5
 80068be:	4680      	mov	r8, r0
 80068c0:	4689      	mov	r9, r1
 80068c2:	f000 f881 	bl	80069c8 <__ieee754_sqrt>
 80068c6:	a332      	add	r3, pc, #200	; (adr r3, 8006990 <__ieee754_acos+0x4a8>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	ec57 6b10 	vmov	r6, r7, d0
 80068d4:	f7f9 fe70 	bl	80005b8 <__aeabi_dmul>
 80068d8:	a32f      	add	r3, pc, #188	; (adr r3, 8006998 <__ieee754_acos+0x4b0>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f7f9 fcb3 	bl	8000248 <__aeabi_dsub>
 80068e2:	4622      	mov	r2, r4
 80068e4:	462b      	mov	r3, r5
 80068e6:	f7f9 fe67 	bl	80005b8 <__aeabi_dmul>
 80068ea:	a32d      	add	r3, pc, #180	; (adr r3, 80069a0 <__ieee754_acos+0x4b8>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7f9 fcac 	bl	800024c <__adddf3>
 80068f4:	4622      	mov	r2, r4
 80068f6:	462b      	mov	r3, r5
 80068f8:	f7f9 fe5e 	bl	80005b8 <__aeabi_dmul>
 80068fc:	a32a      	add	r3, pc, #168	; (adr r3, 80069a8 <__ieee754_acos+0x4c0>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	f7f9 fca1 	bl	8000248 <__aeabi_dsub>
 8006906:	4622      	mov	r2, r4
 8006908:	462b      	mov	r3, r5
 800690a:	f7f9 fe55 	bl	80005b8 <__aeabi_dmul>
 800690e:	4b2c      	ldr	r3, [pc, #176]	; (80069c0 <__ieee754_acos+0x4d8>)
 8006910:	2200      	movs	r2, #0
 8006912:	f7f9 fc9b 	bl	800024c <__adddf3>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f7f9 ff75 	bl	800080c <__aeabi_ddiv>
 8006922:	4632      	mov	r2, r6
 8006924:	463b      	mov	r3, r7
 8006926:	f7f9 fe47 	bl	80005b8 <__aeabi_dmul>
 800692a:	a321      	add	r3, pc, #132	; (adr r3, 80069b0 <__ieee754_acos+0x4c8>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f7f9 fc8a 	bl	8000248 <__aeabi_dsub>
 8006934:	4632      	mov	r2, r6
 8006936:	463b      	mov	r3, r7
 8006938:	f7f9 fc88 	bl	800024c <__adddf3>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	f7f9 fc84 	bl	800024c <__adddf3>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	a11b      	add	r1, pc, #108	; (adr r1, 80069b8 <__ieee754_acos+0x4d0>)
 800694a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800694e:	f7f9 fc7b 	bl	8000248 <__aeabi_dsub>
 8006952:	ec41 0b10 	vmov	d0, r0, r1
 8006956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695a:	bf00      	nop
 800695c:	f3af 8000 	nop.w
 8006960:	0dfdf709 	.word	0x0dfdf709
 8006964:	3f023de1 	.word	0x3f023de1
 8006968:	7501b288 	.word	0x7501b288
 800696c:	3f49efe0 	.word	0x3f49efe0
 8006970:	b5688f3b 	.word	0xb5688f3b
 8006974:	3fa48228 	.word	0x3fa48228
 8006978:	0e884455 	.word	0x0e884455
 800697c:	3fc9c155 	.word	0x3fc9c155
 8006980:	03eb6f7d 	.word	0x03eb6f7d
 8006984:	3fd4d612 	.word	0x3fd4d612
 8006988:	55555555 	.word	0x55555555
 800698c:	3fc55555 	.word	0x3fc55555
 8006990:	b12e9282 	.word	0xb12e9282
 8006994:	3fb3b8c5 	.word	0x3fb3b8c5
 8006998:	1b8d0159 	.word	0x1b8d0159
 800699c:	3fe6066c 	.word	0x3fe6066c
 80069a0:	9c598ac8 	.word	0x9c598ac8
 80069a4:	40002ae5 	.word	0x40002ae5
 80069a8:	1c8a2d4b 	.word	0x1c8a2d4b
 80069ac:	40033a27 	.word	0x40033a27
 80069b0:	33145c07 	.word	0x33145c07
 80069b4:	3c91a626 	.word	0x3c91a626
 80069b8:	54442d18 	.word	0x54442d18
 80069bc:	400921fb 	.word	0x400921fb
 80069c0:	3ff00000 	.word	0x3ff00000
 80069c4:	3fe00000 	.word	0x3fe00000

080069c8 <__ieee754_sqrt>:
 80069c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069cc:	4a61      	ldr	r2, [pc, #388]	; (8006b54 <__ieee754_sqrt+0x18c>)
 80069ce:	ec55 4b10 	vmov	r4, r5, d0
 80069d2:	43aa      	bics	r2, r5
 80069d4:	f000 809c 	beq.w	8006b10 <__ieee754_sqrt+0x148>
 80069d8:	2d00      	cmp	r5, #0
 80069da:	ee10 1a10 	vmov	r1, s0
 80069de:	462b      	mov	r3, r5
 80069e0:	dd54      	ble.n	8006a8c <__ieee754_sqrt+0xc4>
 80069e2:	1528      	asrs	r0, r5, #20
 80069e4:	d061      	beq.n	8006aaa <__ieee754_sqrt+0xe2>
 80069e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069ee:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 80069f2:	0fcb      	lsrs	r3, r1, #31
 80069f4:	07c0      	lsls	r0, r0, #31
 80069f6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80069fa:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80069fe:	d405      	bmi.n	8006a0c <__ieee754_sqrt+0x44>
 8006a00:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8006a04:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006a08:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8006a0c:	2600      	movs	r6, #0
 8006a0e:	107f      	asrs	r7, r7, #1
 8006a10:	f04f 0e16 	mov.w	lr, #22
 8006a14:	4634      	mov	r4, r6
 8006a16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a1a:	18a1      	adds	r1, r4, r2
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	dc02      	bgt.n	8006a26 <__ieee754_sqrt+0x5e>
 8006a20:	1a5b      	subs	r3, r3, r1
 8006a22:	188c      	adds	r4, r1, r2
 8006a24:	4416      	add	r6, r2
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	f1be 0e01 	subs.w	lr, lr, #1
 8006a2c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 8006a30:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006a34:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006a38:	d1ef      	bne.n	8006a1a <__ieee754_sqrt+0x52>
 8006a3a:	4675      	mov	r5, lr
 8006a3c:	2020      	movs	r0, #32
 8006a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a42:	e00a      	b.n	8006a5a <__ieee754_sqrt+0x92>
 8006a44:	d041      	beq.n	8006aca <__ieee754_sqrt+0x102>
 8006a46:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8006a4a:	3801      	subs	r0, #1
 8006a4c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006a50:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006a54:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006a58:	d040      	beq.n	8006adc <__ieee754_sqrt+0x114>
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	eb02 010e 	add.w	r1, r2, lr
 8006a60:	ddf0      	ble.n	8006a44 <__ieee754_sqrt+0x7c>
 8006a62:	2900      	cmp	r1, #0
 8006a64:	eb01 0e02 	add.w	lr, r1, r2
 8006a68:	db0a      	blt.n	8006a80 <__ieee754_sqrt+0xb8>
 8006a6a:	46a0      	mov	r8, r4
 8006a6c:	1b1b      	subs	r3, r3, r4
 8006a6e:	4561      	cmp	r1, ip
 8006a70:	bf88      	it	hi
 8006a72:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8006a76:	ebac 0c01 	sub.w	ip, ip, r1
 8006a7a:	4415      	add	r5, r2
 8006a7c:	4644      	mov	r4, r8
 8006a7e:	e7e2      	b.n	8006a46 <__ieee754_sqrt+0x7e>
 8006a80:	f1be 0f00 	cmp.w	lr, #0
 8006a84:	dbf1      	blt.n	8006a6a <__ieee754_sqrt+0xa2>
 8006a86:	f104 0801 	add.w	r8, r4, #1
 8006a8a:	e7ef      	b.n	8006a6c <__ieee754_sqrt+0xa4>
 8006a8c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006a90:	4322      	orrs	r2, r4
 8006a92:	d035      	beq.n	8006b00 <__ieee754_sqrt+0x138>
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	d14b      	bne.n	8006b30 <__ieee754_sqrt+0x168>
 8006a98:	4628      	mov	r0, r5
 8006a9a:	0aca      	lsrs	r2, r1, #11
 8006a9c:	3815      	subs	r0, #21
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	0549      	lsls	r1, r1, #21
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	d0f9      	beq.n	8006a9a <__ieee754_sqrt+0xd2>
 8006aa6:	02d7      	lsls	r7, r2, #11
 8006aa8:	d44f      	bmi.n	8006b4a <__ieee754_sqrt+0x182>
 8006aaa:	2400      	movs	r4, #0
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	02de      	lsls	r6, r3, #11
 8006ab0:	4625      	mov	r5, r4
 8006ab2:	f104 0401 	add.w	r4, r4, #1
 8006ab6:	d5f9      	bpl.n	8006aac <__ieee754_sqrt+0xe4>
 8006ab8:	461a      	mov	r2, r3
 8006aba:	460b      	mov	r3, r1
 8006abc:	40a1      	lsls	r1, r4
 8006abe:	f1c4 0420 	rsb	r4, r4, #32
 8006ac2:	40e3      	lsrs	r3, r4
 8006ac4:	1b40      	subs	r0, r0, r5
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	e78d      	b.n	80069e6 <__ieee754_sqrt+0x1e>
 8006aca:	4561      	cmp	r1, ip
 8006acc:	d8bb      	bhi.n	8006a46 <__ieee754_sqrt+0x7e>
 8006ace:	2900      	cmp	r1, #0
 8006ad0:	eb01 0e02 	add.w	lr, r1, r2
 8006ad4:	dbd4      	blt.n	8006a80 <__ieee754_sqrt+0xb8>
 8006ad6:	4698      	mov	r8, r3
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e7cc      	b.n	8006a76 <__ieee754_sqrt+0xae>
 8006adc:	ea53 030c 	orrs.w	r3, r3, ip
 8006ae0:	d110      	bne.n	8006b04 <__ieee754_sqrt+0x13c>
 8006ae2:	0868      	lsrs	r0, r5, #1
 8006ae4:	1071      	asrs	r1, r6, #1
 8006ae6:	07f3      	lsls	r3, r6, #31
 8006ae8:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 8006aec:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8006af0:	bf48      	it	mi
 8006af2:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 8006af6:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 8006afa:	4602      	mov	r2, r0
 8006afc:	ec43 2b10 	vmov	d0, r2, r3
 8006b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b04:	1c6a      	adds	r2, r5, #1
 8006b06:	bf16      	itet	ne
 8006b08:	1c68      	addne	r0, r5, #1
 8006b0a:	3601      	addeq	r6, #1
 8006b0c:	0840      	lsrne	r0, r0, #1
 8006b0e:	e7e9      	b.n	8006ae4 <__ieee754_sqrt+0x11c>
 8006b10:	ee10 2a10 	vmov	r2, s0
 8006b14:	ee10 0a10 	vmov	r0, s0
 8006b18:	462b      	mov	r3, r5
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	f7f9 fd4c 	bl	80005b8 <__aeabi_dmul>
 8006b20:	4622      	mov	r2, r4
 8006b22:	462b      	mov	r3, r5
 8006b24:	f7f9 fb92 	bl	800024c <__adddf3>
 8006b28:	ec41 0b10 	vmov	d0, r0, r1
 8006b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b30:	ee10 2a10 	vmov	r2, s0
 8006b34:	4620      	mov	r0, r4
 8006b36:	4629      	mov	r1, r5
 8006b38:	f7f9 fb86 	bl	8000248 <__aeabi_dsub>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	f7f9 fe64 	bl	800080c <__aeabi_ddiv>
 8006b44:	ec41 0b10 	vmov	d0, r0, r1
 8006b48:	e7da      	b.n	8006b00 <__ieee754_sqrt+0x138>
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	2420      	movs	r4, #32
 8006b4e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006b52:	e7b6      	b.n	8006ac2 <__ieee754_sqrt+0xfa>
 8006b54:	7ff00000 	.word	0x7ff00000

08006b58 <nan>:
 8006b58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006b60 <nan+0x8>
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	00000000 	.word	0x00000000
 8006b64:	7ff80000 	.word	0x7ff80000

08006b68 <__udivmoddi4>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b6e:	4688      	mov	r8, r1
 8006b70:	468e      	mov	lr, r1
 8006b72:	4615      	mov	r5, r2
 8006b74:	4604      	mov	r4, r0
 8006b76:	4619      	mov	r1, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f040 80c7 	bne.w	8006d0c <__udivmoddi4+0x1a4>
 8006b7e:	4542      	cmp	r2, r8
 8006b80:	fab2 f782 	clz	r7, r2
 8006b84:	d946      	bls.n	8006c14 <__udivmoddi4+0xac>
 8006b86:	b14f      	cbz	r7, 8006b9c <__udivmoddi4+0x34>
 8006b88:	f1c7 0c20 	rsb	ip, r7, #32
 8006b8c:	fa08 f307 	lsl.w	r3, r8, r7
 8006b90:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006b94:	40bd      	lsls	r5, r7
 8006b96:	ea4c 0e03 	orr.w	lr, ip, r3
 8006b9a:	40bc      	lsls	r4, r7
 8006b9c:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006ba0:	fa1f fc85 	uxth.w	ip, r5
 8006ba4:	fbbe f9f8 	udiv	r9, lr, r8
 8006ba8:	0c22      	lsrs	r2, r4, #16
 8006baa:	fb08 e319 	mls	r3, r8, r9, lr
 8006bae:	fb09 fa0c 	mul.w	sl, r9, ip
 8006bb2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8006bb6:	459a      	cmp	sl, r3
 8006bb8:	d928      	bls.n	8006c0c <__udivmoddi4+0xa4>
 8006bba:	18eb      	adds	r3, r5, r3
 8006bbc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8006bc0:	d204      	bcs.n	8006bcc <__udivmoddi4+0x64>
 8006bc2:	459a      	cmp	sl, r3
 8006bc4:	d902      	bls.n	8006bcc <__udivmoddi4+0x64>
 8006bc6:	f1a9 0002 	sub.w	r0, r9, #2
 8006bca:	442b      	add	r3, r5
 8006bcc:	eba3 030a 	sub.w	r3, r3, sl
 8006bd0:	b2a4      	uxth	r4, r4
 8006bd2:	fbb3 f2f8 	udiv	r2, r3, r8
 8006bd6:	fb08 3312 	mls	r3, r8, r2, r3
 8006bda:	fb02 fc0c 	mul.w	ip, r2, ip
 8006bde:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006be2:	45a4      	cmp	ip, r4
 8006be4:	d914      	bls.n	8006c10 <__udivmoddi4+0xa8>
 8006be6:	192c      	adds	r4, r5, r4
 8006be8:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8006bec:	d203      	bcs.n	8006bf6 <__udivmoddi4+0x8e>
 8006bee:	45a4      	cmp	ip, r4
 8006bf0:	d901      	bls.n	8006bf6 <__udivmoddi4+0x8e>
 8006bf2:	1e93      	subs	r3, r2, #2
 8006bf4:	442c      	add	r4, r5
 8006bf6:	eba4 040c 	sub.w	r4, r4, ip
 8006bfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006bfe:	b11e      	cbz	r6, 8006c08 <__udivmoddi4+0xa0>
 8006c00:	40fc      	lsrs	r4, r7
 8006c02:	2300      	movs	r3, #0
 8006c04:	6034      	str	r4, [r6, #0]
 8006c06:	6073      	str	r3, [r6, #4]
 8006c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0c:	4648      	mov	r0, r9
 8006c0e:	e7dd      	b.n	8006bcc <__udivmoddi4+0x64>
 8006c10:	4613      	mov	r3, r2
 8006c12:	e7f0      	b.n	8006bf6 <__udivmoddi4+0x8e>
 8006c14:	b902      	cbnz	r2, 8006c18 <__udivmoddi4+0xb0>
 8006c16:	deff      	udf	#255	; 0xff
 8006c18:	bb8f      	cbnz	r7, 8006c7e <__udivmoddi4+0x116>
 8006c1a:	eba8 0302 	sub.w	r3, r8, r2
 8006c1e:	2101      	movs	r1, #1
 8006c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006c24:	b2aa      	uxth	r2, r5
 8006c26:	fbb3 fcfe 	udiv	ip, r3, lr
 8006c2a:	0c20      	lsrs	r0, r4, #16
 8006c2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8006c30:	fb0c f802 	mul.w	r8, ip, r2
 8006c34:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8006c38:	4598      	cmp	r8, r3
 8006c3a:	d963      	bls.n	8006d04 <__udivmoddi4+0x19c>
 8006c3c:	18eb      	adds	r3, r5, r3
 8006c3e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8006c42:	d204      	bcs.n	8006c4e <__udivmoddi4+0xe6>
 8006c44:	4598      	cmp	r8, r3
 8006c46:	d902      	bls.n	8006c4e <__udivmoddi4+0xe6>
 8006c48:	f1ac 0002 	sub.w	r0, ip, #2
 8006c4c:	442b      	add	r3, r5
 8006c4e:	eba3 0308 	sub.w	r3, r3, r8
 8006c52:	b2a4      	uxth	r4, r4
 8006c54:	fbb3 fcfe 	udiv	ip, r3, lr
 8006c58:	fb0e 331c 	mls	r3, lr, ip, r3
 8006c5c:	fb0c f202 	mul.w	r2, ip, r2
 8006c60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006c64:	42a2      	cmp	r2, r4
 8006c66:	d94f      	bls.n	8006d08 <__udivmoddi4+0x1a0>
 8006c68:	192c      	adds	r4, r5, r4
 8006c6a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8006c6e:	d204      	bcs.n	8006c7a <__udivmoddi4+0x112>
 8006c70:	42a2      	cmp	r2, r4
 8006c72:	d902      	bls.n	8006c7a <__udivmoddi4+0x112>
 8006c74:	f1ac 0302 	sub.w	r3, ip, #2
 8006c78:	442c      	add	r4, r5
 8006c7a:	1aa4      	subs	r4, r4, r2
 8006c7c:	e7bd      	b.n	8006bfa <__udivmoddi4+0x92>
 8006c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8006c82:	fa28 f90c 	lsr.w	r9, r8, ip
 8006c86:	fa08 f307 	lsl.w	r3, r8, r7
 8006c8a:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006c8e:	40bd      	lsls	r5, r7
 8006c90:	ea4c 0203 	orr.w	r2, ip, r3
 8006c94:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006c98:	b2ab      	uxth	r3, r5
 8006c9a:	fbb9 fcfe 	udiv	ip, r9, lr
 8006c9e:	0c11      	lsrs	r1, r2, #16
 8006ca0:	fb0e 901c 	mls	r0, lr, ip, r9
 8006ca4:	fb0c f803 	mul.w	r8, ip, r3
 8006ca8:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8006cac:	4580      	cmp	r8, r0
 8006cae:	fa04 f407 	lsl.w	r4, r4, r7
 8006cb2:	d923      	bls.n	8006cfc <__udivmoddi4+0x194>
 8006cb4:	1828      	adds	r0, r5, r0
 8006cb6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8006cba:	d204      	bcs.n	8006cc6 <__udivmoddi4+0x15e>
 8006cbc:	4580      	cmp	r8, r0
 8006cbe:	d902      	bls.n	8006cc6 <__udivmoddi4+0x15e>
 8006cc0:	f1ac 0102 	sub.w	r1, ip, #2
 8006cc4:	4428      	add	r0, r5
 8006cc6:	eba0 0008 	sub.w	r0, r0, r8
 8006cca:	b292      	uxth	r2, r2
 8006ccc:	fbb0 fcfe 	udiv	ip, r0, lr
 8006cd0:	fb0e 001c 	mls	r0, lr, ip, r0
 8006cd4:	fb0c f803 	mul.w	r8, ip, r3
 8006cd8:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8006cdc:	4598      	cmp	r8, r3
 8006cde:	d90f      	bls.n	8006d00 <__udivmoddi4+0x198>
 8006ce0:	18eb      	adds	r3, r5, r3
 8006ce2:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8006ce6:	d204      	bcs.n	8006cf2 <__udivmoddi4+0x18a>
 8006ce8:	4598      	cmp	r8, r3
 8006cea:	d902      	bls.n	8006cf2 <__udivmoddi4+0x18a>
 8006cec:	f1ac 0202 	sub.w	r2, ip, #2
 8006cf0:	442b      	add	r3, r5
 8006cf2:	eba3 0308 	sub.w	r3, r3, r8
 8006cf6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8006cfa:	e791      	b.n	8006c20 <__udivmoddi4+0xb8>
 8006cfc:	4661      	mov	r1, ip
 8006cfe:	e7e2      	b.n	8006cc6 <__udivmoddi4+0x15e>
 8006d00:	4662      	mov	r2, ip
 8006d02:	e7f6      	b.n	8006cf2 <__udivmoddi4+0x18a>
 8006d04:	4660      	mov	r0, ip
 8006d06:	e7a2      	b.n	8006c4e <__udivmoddi4+0xe6>
 8006d08:	4663      	mov	r3, ip
 8006d0a:	e7b6      	b.n	8006c7a <__udivmoddi4+0x112>
 8006d0c:	4543      	cmp	r3, r8
 8006d0e:	d905      	bls.n	8006d1c <__udivmoddi4+0x1b4>
 8006d10:	b10e      	cbz	r6, 8006d16 <__udivmoddi4+0x1ae>
 8006d12:	e9c6 0800 	strd	r0, r8, [r6]
 8006d16:	2100      	movs	r1, #0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	e775      	b.n	8006c08 <__udivmoddi4+0xa0>
 8006d1c:	fab3 fc83 	clz	ip, r3
 8006d20:	f1bc 0f00 	cmp.w	ip, #0
 8006d24:	d110      	bne.n	8006d48 <__udivmoddi4+0x1e0>
 8006d26:	4543      	cmp	r3, r8
 8006d28:	d301      	bcc.n	8006d2e <__udivmoddi4+0x1c6>
 8006d2a:	4282      	cmp	r2, r0
 8006d2c:	d80a      	bhi.n	8006d44 <__udivmoddi4+0x1dc>
 8006d2e:	1a84      	subs	r4, r0, r2
 8006d30:	eb68 0303 	sbc.w	r3, r8, r3
 8006d34:	2001      	movs	r0, #1
 8006d36:	469e      	mov	lr, r3
 8006d38:	2e00      	cmp	r6, #0
 8006d3a:	d068      	beq.n	8006e0e <__udivmoddi4+0x2a6>
 8006d3c:	e9c6 4e00 	strd	r4, lr, [r6]
 8006d40:	2100      	movs	r1, #0
 8006d42:	e761      	b.n	8006c08 <__udivmoddi4+0xa0>
 8006d44:	4660      	mov	r0, ip
 8006d46:	e7f7      	b.n	8006d38 <__udivmoddi4+0x1d0>
 8006d48:	f1cc 0e20 	rsb	lr, ip, #32
 8006d4c:	fa03 f30c 	lsl.w	r3, r3, ip
 8006d50:	fa22 f40e 	lsr.w	r4, r2, lr
 8006d54:	431c      	orrs	r4, r3
 8006d56:	fa20 f10e 	lsr.w	r1, r0, lr
 8006d5a:	fa08 f30c 	lsl.w	r3, r8, ip
 8006d5e:	fa28 fb0e 	lsr.w	fp, r8, lr
 8006d62:	4319      	orrs	r1, r3
 8006d64:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8006d68:	fa02 f50c 	lsl.w	r5, r2, ip
 8006d6c:	fbbb f8f9 	udiv	r8, fp, r9
 8006d70:	b2a3      	uxth	r3, r4
 8006d72:	fb09 bb18 	mls	fp, r9, r8, fp
 8006d76:	0c0a      	lsrs	r2, r1, #16
 8006d78:	fb08 fa03 	mul.w	sl, r8, r3
 8006d7c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8006d80:	4592      	cmp	sl, r2
 8006d82:	fa00 f70c 	lsl.w	r7, r0, ip
 8006d86:	d93e      	bls.n	8006e06 <__udivmoddi4+0x29e>
 8006d88:	18a2      	adds	r2, r4, r2
 8006d8a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8006d8e:	d204      	bcs.n	8006d9a <__udivmoddi4+0x232>
 8006d90:	4592      	cmp	sl, r2
 8006d92:	d902      	bls.n	8006d9a <__udivmoddi4+0x232>
 8006d94:	f1a8 0002 	sub.w	r0, r8, #2
 8006d98:	4422      	add	r2, r4
 8006d9a:	eba2 020a 	sub.w	r2, r2, sl
 8006d9e:	b289      	uxth	r1, r1
 8006da0:	fbb2 f8f9 	udiv	r8, r2, r9
 8006da4:	fb09 2218 	mls	r2, r9, r8, r2
 8006da8:	fb08 f303 	mul.w	r3, r8, r3
 8006dac:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d92a      	bls.n	8006e0a <__udivmoddi4+0x2a2>
 8006db4:	18a2      	adds	r2, r4, r2
 8006db6:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8006dba:	d204      	bcs.n	8006dc6 <__udivmoddi4+0x25e>
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d902      	bls.n	8006dc6 <__udivmoddi4+0x25e>
 8006dc0:	f1a8 0102 	sub.w	r1, r8, #2
 8006dc4:	4422      	add	r2, r4
 8006dc6:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8006dca:	fba0 9805 	umull	r9, r8, r0, r5
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	4542      	cmp	r2, r8
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	d302      	bcc.n	8006dde <__udivmoddi4+0x276>
 8006dd8:	d106      	bne.n	8006de8 <__udivmoddi4+0x280>
 8006dda:	454f      	cmp	r7, r9
 8006ddc:	d204      	bcs.n	8006de8 <__udivmoddi4+0x280>
 8006dde:	ebb9 0305 	subs.w	r3, r9, r5
 8006de2:	eb68 0104 	sbc.w	r1, r8, r4
 8006de6:	3801      	subs	r0, #1
 8006de8:	b18e      	cbz	r6, 8006e0e <__udivmoddi4+0x2a6>
 8006dea:	1afc      	subs	r4, r7, r3
 8006dec:	eb62 0701 	sbc.w	r7, r2, r1
 8006df0:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006df4:	fa24 f30c 	lsr.w	r3, r4, ip
 8006df8:	ea4e 0303 	orr.w	r3, lr, r3
 8006dfc:	fa27 f70c 	lsr.w	r7, r7, ip
 8006e00:	e9c6 3700 	strd	r3, r7, [r6]
 8006e04:	e79c      	b.n	8006d40 <__udivmoddi4+0x1d8>
 8006e06:	4640      	mov	r0, r8
 8006e08:	e7c7      	b.n	8006d9a <__udivmoddi4+0x232>
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	e7db      	b.n	8006dc6 <__udivmoddi4+0x25e>
 8006e0e:	4631      	mov	r1, r6
 8006e10:	e6fa      	b.n	8006c08 <__udivmoddi4+0xa0>
	...

08006e14 <_init>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr

08006e20 <_fini>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr
