
lds_on_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007534  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  080076c8  080076c8  000176c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d34  08007d34  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d3c  08007d3c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d40  08007d40  00017d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08007d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000200  08007f44  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08007f44  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009431  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a77  00000000  00000000  00029661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002b9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f32  00000000  00000000  0002c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000826e  00000000  00000000  0004f162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1b12  00000000  00000000  000573d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000001e  00000000  00000000  00128ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d0  00000000  00000000  00128f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 b80c 	b.w	8000c38 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f006 fbea 	bl	8007400 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_idiv0>:
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__do_global_dtors_aux>:
 8000c3c:	b510      	push	{r4, lr}
 8000c3e:	4c05      	ldr	r4, [pc, #20]	; (8000c54 <__do_global_dtors_aux+0x18>)
 8000c40:	7823      	ldrb	r3, [r4, #0]
 8000c42:	b933      	cbnz	r3, 8000c52 <__do_global_dtors_aux+0x16>
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__do_global_dtors_aux+0x1c>)
 8000c46:	b113      	cbz	r3, 8000c4e <__do_global_dtors_aux+0x12>
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <__do_global_dtors_aux+0x20>)
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	2301      	movs	r3, #1
 8000c50:	7023      	strb	r3, [r4, #0]
 8000c52:	bd10      	pop	{r4, pc}
 8000c54:	20000200 	.word	0x20000200
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	080076ac 	.word	0x080076ac

08000c60 <frame_dummy>:
 8000c60:	b508      	push	{r3, lr}
 8000c62:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <frame_dummy+0x10>)
 8000c64:	b11b      	cbz	r3, 8000c6e <frame_dummy+0xe>
 8000c66:	4903      	ldr	r1, [pc, #12]	; (8000c74 <frame_dummy+0x14>)
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <frame_dummy+0x18>)
 8000c6a:	f3af 8000 	nop.w
 8000c6e:	bd08      	pop	{r3, pc}
 8000c70:	00000000 	.word	0x00000000
 8000c74:	20000204 	.word	0x20000204
 8000c78:	080076ac 	.word	0x080076ac

08000c7c <lds_init>:
#include <stdlib.h>
/*
 * Каждая из матриц должна быть проинициализирована и lds->A должна быть долполнительно
 * проинициализирована конкретными значениями
 */
void lds_init(lds_t *lds, int n, int k, Matrixf *temp) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	ed2d 8b02 	vpush	{d8}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
    assert(matrix_checkSize(&lds->A, n, k));
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fc3e 	bl	8001516 <matrix_checkSize>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d105      	bne.n	8000cac <lds_init+0x30>
 8000ca0:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <lds_init+0x11c>)
 8000ca2:	4a3e      	ldr	r2, [pc, #248]	; (8000d9c <lds_init+0x120>)
 8000ca4:	2112      	movs	r1, #18
 8000ca6:	483e      	ldr	r0, [pc, #248]	; (8000da0 <lds_init+0x124>)
 8000ca8:	f003 f8d8 	bl	8003e5c <__assert_func>
    assert(matrix_checkSize(&lds->As, k, n));
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3310      	adds	r3, #16
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fc2e 	bl	8001516 <matrix_checkSize>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d105      	bne.n	8000ccc <lds_init+0x50>
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <lds_init+0x128>)
 8000cc2:	4a36      	ldr	r2, [pc, #216]	; (8000d9c <lds_init+0x120>)
 8000cc4:	2113      	movs	r1, #19
 8000cc6:	4836      	ldr	r0, [pc, #216]	; (8000da0 <lds_init+0x124>)
 8000cc8:	f003 f8c8 	bl	8003e5c <__assert_func>
    assert(matrix_checkSize(temp, k, k));
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	6838      	ldr	r0, [r7, #0]
 8000cd2:	f000 fc20 	bl	8001516 <matrix_checkSize>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d105      	bne.n	8000ce8 <lds_init+0x6c>
 8000cdc:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <lds_init+0x12c>)
 8000cde:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <lds_init+0x120>)
 8000ce0:	2114      	movs	r1, #20
 8000ce2:	482f      	ldr	r0, [pc, #188]	; (8000da0 <lds_init+0x124>)
 8000ce4:	f003 f8ba 	bl	8003e5c <__assert_func>

    lds->n = n;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	621a      	str	r2, [r3, #32]
    lds->k = k;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
    //Считаем A_t * A
    for (int i = 0; i < k; i++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	e032      	b.n	8000d60 <lds_init+0xe4>
        for (int j = 0; j < k; j++) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	e028      	b.n	8000d52 <lds_init+0xd6>
            for (int p = 0; p < n; p++) {
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e01e      	b.n	8000d44 <lds_init+0xc8>
                *matrix_at(temp, i, j) = *matrix_at(&lds->A, p, i) * *matrix_at(&lds->A, p, j);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	69fa      	ldr	r2, [r7, #28]
 8000d0a:	6979      	ldr	r1, [r7, #20]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f86d 	bl	8000dec <matrix_at>
 8000d12:	4603      	mov	r3, r0
 8000d14:	edd3 8a00 	vldr	s17, [r3]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	6979      	ldr	r1, [r7, #20]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f864 	bl	8000dec <matrix_at>
 8000d24:	4603      	mov	r3, r0
 8000d26:	ed93 8a00 	vldr	s16, [r3]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	69f9      	ldr	r1, [r7, #28]
 8000d2e:	6838      	ldr	r0, [r7, #0]
 8000d30:	f000 f85c 	bl	8000dec <matrix_at>
 8000d34:	4603      	mov	r3, r0
 8000d36:	ee68 7a88 	vmul.f32	s15, s17, s16
 8000d3a:	edc3 7a00 	vstr	s15, [r3]
            for (int p = 0; p < n; p++) {
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbdc      	blt.n	8000d06 <lds_init+0x8a>
        for (int j = 0; j < k; j++) {
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	61bb      	str	r3, [r7, #24]
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	dbd2      	blt.n	8000d00 <lds_init+0x84>
    for (int i = 0; i < k; i++) {
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbc8      	blt.n	8000cfa <lds_init+0x7e>
            }
        }
    }
    //A_t
    matrix_copy(&lds->A, &lds->As, 0);
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3310      	adds	r3, #16
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4619      	mov	r1, r3
 8000d72:	f000 fb2b 	bl	80013cc <matrix_copy>
    matrix_transpose(&lds->As);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3310      	adds	r3, #16
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f9b0 	bl	80010e0 <matrix_transpose>

    //((A_t*A)^-1)*A_t
    matrix_inverse_and_multiplicate_left(temp, &lds->As);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3310      	adds	r3, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	6838      	ldr	r0, [r7, #0]
 8000d88:	f000 fa1e 	bl	80011c8 <matrix_inverse_and_multiplicate_left>
}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	ecbd 8b02 	vpop	{d8}
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	080076c8 	.word	0x080076c8
 8000d9c:	080078f8 	.word	0x080078f8
 8000da0:	080076e8 	.word	0x080076e8
 8000da4:	080076fc 	.word	0x080076fc
 8000da8:	08007720 	.word	0x08007720

08000dac <matrix_isInRange>:
	matrix->height = height;
	matrix->width = width;
}

int matrix_isInRange(const Matrixf *matrix, int row, int column)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
	return !(row >= matrix->height || column >= matrix->width || row < 0 || column < 0);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	da0c      	bge.n	8000ddc <matrix_isInRange+0x30>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	da07      	bge.n	8000ddc <matrix_isInRange+0x30>
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db04      	blt.n	8000ddc <matrix_isInRange+0x30>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db01      	blt.n	8000ddc <matrix_isInRange+0x30>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <matrix_isInRange+0x32>
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <matrix_at>:

float *matrix_at(const Matrixf *matrix, int row, int column)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	if(!matrix_isInRange(matrix, row, column))
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f7ff ffd5 	bl	8000dac <matrix_isInRange>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d109      	bne.n	8000e1c <matrix_at+0x30>
	{
		fprintf(stderr, "Matrix out of range!\n");
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <matrix_at+0x50>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	2215      	movs	r2, #21
 8000e10:	2101      	movs	r1, #1
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <matrix_at+0x54>)
 8000e14:	f003 f8b8 	bl	8003f88 <fwrite>
		return NULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e00a      	b.n	8000e32 <matrix_at+0x46>
	}
	return &matrix->arr[row * matrix->width + column];
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	fb03 f101 	mul.w	r1, r3, r1
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	440b      	add	r3, r1
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000030 	.word	0x20000030
 8000e40:	08007790 	.word	0x08007790

08000e44 <matrix_multiplicate>:
			*matrix_at(matrix, i, j) = 0;
}


int matrix_multiplicate(const Matrixf *left, const Matrixf *right, Matrixf* result)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	ed2d 8b02 	vpush	{d8}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	if (left->width != right->height || right->width != result->width
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d10b      	bne.n	8000e78 <matrix_multiplicate+0x34>
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d105      	bne.n	8000e78 <matrix_multiplicate+0x34>
			|| left->height != result->height)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d009      	beq.n	8000e8c <matrix_multiplicate+0x48>
	{
		fprintf(stderr, "Matrix sizes do not appropriate\n");
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <matrix_multiplicate+0xe8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2220      	movs	r2, #32
 8000e80:	2101      	movs	r1, #1
 8000e82:	482b      	ldr	r0, [pc, #172]	; (8000f30 <matrix_multiplicate+0xec>)
 8000e84:	f003 f880 	bl	8003f88 <fwrite>
		return BAD_SIZES;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	e048      	b.n	8000f1e <matrix_multiplicate+0xda>
	}
	for (int i = 0; i < left->height; i++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	e03f      	b.n	8000f12 <matrix_multiplicate+0xce>
	{
		for (int j = 0; j < right->width; j++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	e034      	b.n	8000f02 <matrix_multiplicate+0xbe>
		{
			*matrix_at(result, i, j) = 0;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	69f9      	ldr	r1, [r7, #28]
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffa5 	bl	8000dec <matrix_at>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < left->width; k++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e020      	b.n	8000ef2 <matrix_multiplicate+0xae>
			{
				*matrix_at(result, i, j) += *matrix_at(left, i, k) * *matrix_at(right, k, j);
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	69f9      	ldr	r1, [r7, #28]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff ff99 	bl	8000dec <matrix_at>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	ed93 8a00 	vldr	s16, [r3]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	6979      	ldr	r1, [r7, #20]
 8000ec4:	68b8      	ldr	r0, [r7, #8]
 8000ec6:	f7ff ff91 	bl	8000dec <matrix_at>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	edd3 7a00 	vldr	s15, [r3]
 8000ed0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	69f9      	ldr	r1, [r7, #28]
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff87 	bl	8000dec <matrix_at>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000ee8:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < left->width; k++)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbd9      	blt.n	8000eb0 <matrix_multiplicate+0x6c>
		for (int j = 0; j < right->width; j++)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	3301      	adds	r3, #1
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbc5      	blt.n	8000e98 <matrix_multiplicate+0x54>
	for (int i = 0; i < left->height; i++)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbba      	blt.n	8000e92 <matrix_multiplicate+0x4e>
			}
		}
	}
	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	ecbd 8b02 	vpop	{d8}
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000030 	.word	0x20000030
 8000f30:	080077a8 	.word	0x080077a8

08000f34 <matrix_swapRows>:
int matrix_swapRows(Matrixf *matrix, int i1, int i2)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	if (i1 >= matrix->height || i2 >= matrix->height)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	da04      	bge.n	8000f54 <matrix_swapRows+0x20>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	db09      	blt.n	8000f68 <matrix_swapRows+0x34>
	{
		fprintf(stderr, "Matrix index is out of range\n");
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <matrix_swapRows+0x90>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	221d      	movs	r2, #29
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	481a      	ldr	r0, [pc, #104]	; (8000fc8 <matrix_swapRows+0x94>)
 8000f60:	f003 f812 	bl	8003f88 <fwrite>
		return BAD_INDEX;
 8000f64:	2311      	movs	r3, #17
 8000f66:	e029      	b.n	8000fbc <matrix_swapRows+0x88>
	}
	for(int i = 0; i < matrix->width; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	e020      	b.n	8000fb0 <matrix_swapRows+0x7c>
	{
		float t = *matrix_at(matrix, i1, i);
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f7ff ff3a 	bl	8000dec <matrix_at>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	613b      	str	r3, [r7, #16]
		*matrix_at(matrix, i1, i) = *matrix_at(matrix, i2, i);
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f7ff ff32 	bl	8000dec <matrix_at>
 8000f88:	4604      	mov	r4, r0
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f7ff ff2c 	bl	8000dec <matrix_at>
 8000f94:	4602      	mov	r2, r0
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	6013      	str	r3, [r2, #0]
		*matrix_at(matrix, i2, i) = t;
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff ff24 	bl	8000dec <matrix_at>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < matrix->width; i++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dbd9      	blt.n	8000f6e <matrix_swapRows+0x3a>
	}
	return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	20000030 	.word	0x20000030
 8000fc8:	080077cc 	.word	0x080077cc

08000fcc <matrix_mulRowNum>:
int matrix_mulRowNum(Matrixf *matrix, int index, float b)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (index >= matrix->height)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	db09      	blt.n	8000ff8 <matrix_mulRowNum+0x2c>
	{
		fprintf(stderr, "Matrix index is out of range\n");
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <matrix_mulRowNum+0x68>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	221d      	movs	r2, #29
 8000fec:	2101      	movs	r1, #1
 8000fee:	4812      	ldr	r0, [pc, #72]	; (8001038 <matrix_mulRowNum+0x6c>)
 8000ff0:	f002 ffca 	bl	8003f88 <fwrite>
		return BAD_INDEX;
 8000ff4:	2311      	movs	r3, #17
 8000ff6:	e019      	b.n	800102c <matrix_mulRowNum+0x60>
	}
	for (int i = 0; i < matrix->width; i++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e010      	b.n	8001020 <matrix_mulRowNum+0x54>
	{
		*matrix_at(matrix, index, i) *= b;
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff fef2 	bl	8000dec <matrix_at>
 8001008:	4603      	mov	r3, r0
 800100a:	ed93 7a00 	vldr	s14, [r3]
 800100e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001016:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < matrix->width; i++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	429a      	cmp	r2, r3
 8001028:	dbe9      	blt.n	8000ffe <matrix_mulRowNum+0x32>
	}
	return 0;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000030 	.word	0x20000030
 8001038:	080077cc 	.word	0x080077cc

0800103c <matrix_addRow>:

int matrix_addRow(Matrixf *matrix, int source, int destination, float koef)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	ed2d 8b02 	vpush	{d8}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	ed87 0a00 	vstr	s0, [r7]
	if (!matrix_isInRange(matrix, source, 0) || !matrix_isInRange(matrix, destination, 0))
 8001050:	2200      	movs	r2, #0
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff fea9 	bl	8000dac <matrix_isInRange>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <matrix_addRow+0x34>
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fea1 	bl	8000dac <matrix_isInRange>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d109      	bne.n	8001084 <matrix_addRow+0x48>
	{
		fprintf(stderr, "Matrix index is out of range\n");
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <matrix_addRow+0x9c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	221d      	movs	r2, #29
 8001078:	2101      	movs	r1, #1
 800107a:	4818      	ldr	r0, [pc, #96]	; (80010dc <matrix_addRow+0xa0>)
 800107c:	f002 ff84 	bl	8003f88 <fwrite>
		return BAD_INDEX;
 8001080:	2311      	movs	r3, #17
 8001082:	e023      	b.n	80010cc <matrix_addRow+0x90>
	}
	for (int i = 0; i < matrix->width; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	e01a      	b.n	80010c0 <matrix_addRow+0x84>
	{
		*matrix_at(matrix, destination, i) += koef * *matrix_at(matrix, source, i);
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff feac 	bl	8000dec <matrix_at>
 8001094:	4603      	mov	r3, r0
 8001096:	ed93 7a00 	vldr	s14, [r3]
 800109a:	edd7 7a00 	vldr	s15, [r7]
 800109e:	ee27 8a27 	vmul.f32	s16, s14, s15
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f7ff fea0 	bl	8000dec <matrix_at>
 80010ac:	4603      	mov	r3, r0
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80010b6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < matrix->width; i++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbdf      	blt.n	800108a <matrix_addRow+0x4e>
	}
	return 0;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	ecbd 8b02 	vpop	{d8}
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000030 	.word	0x20000030
 80010dc:	080077cc 	.word	0x080077cc

080010e0 <matrix_transpose>:

void matrix_transpose(Matrixf *matrix)
{
 80010e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e4:	b08b      	sub	sp, #44	; 0x2c
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	466b      	mov	r3, sp
 80010ec:	461e      	mov	r6, r3
	Matrixf result;
	matrix_setSize(&result, matrix->width, matrix->height);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6859      	ldr	r1, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f9bc 	bl	8001478 <matrix_setSize>
	float arr[matrix->height * matrix->width];
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6852      	ldr	r2, [r2, #4]
 8001108:	fb02 f103 	mul.w	r1, r2, r3
 800110c:	1e4b      	subs	r3, r1, #1
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	460a      	mov	r2, r1
 8001112:	2300      	movs	r3, #0
 8001114:	4690      	mov	r8, r2
 8001116:	4699      	mov	r9, r3
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001124:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001128:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800112c:	460a      	mov	r2, r1
 800112e:	2300      	movs	r3, #0
 8001130:	4614      	mov	r4, r2
 8001132:	461d      	mov	r5, r3
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	016b      	lsls	r3, r5, #5
 800113e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001142:	0162      	lsls	r2, r4, #5
 8001144:	460b      	mov	r3, r1
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	3307      	adds	r3, #7
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	ebad 0d03 	sub.w	sp, sp, r3
 8001152:	466b      	mov	r3, sp
 8001154:	3303      	adds	r3, #3
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
	result.arr = arr;
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < matrix->height; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
 8001164:	e01d      	b.n	80011a2 <matrix_transpose+0xc2>
		for (int j = 0; j < matrix->width; j++)
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
 800116a:	e012      	b.n	8001192 <matrix_transpose+0xb2>
			*matrix_at(&result, j, i) = *matrix_at(matrix, i, j);
 800116c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116e:	6a39      	ldr	r1, [r7, #32]
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fe3b 	bl	8000dec <matrix_at>
 8001176:	4604      	mov	r4, r0
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	6a3a      	ldr	r2, [r7, #32]
 800117e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe33 	bl	8000dec <matrix_at>
 8001186:	4602      	mov	r2, r0
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < matrix->width; j++)
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	3301      	adds	r3, #1
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001198:	429a      	cmp	r2, r3
 800119a:	dbe7      	blt.n	800116c <matrix_transpose+0x8c>
	for (int i = 0; i < matrix->height; i++)
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	3301      	adds	r3, #1
 80011a0:	623b      	str	r3, [r7, #32]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6a3a      	ldr	r2, [r7, #32]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbdc      	blt.n	8001166 <matrix_transpose+0x86>
	matrix_copy(&result, matrix, 1);
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	2201      	movs	r2, #1
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f909 	bl	80013cc <matrix_copy>
 80011ba:	46b5      	mov	sp, r6
}
 80011bc:	bf00      	nop
 80011be:	372c      	adds	r7, #44	; 0x2c
 80011c0:	46bd      	mov	sp, r7
 80011c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080011c8 <matrix_inverse_and_multiplicate_left>:

int matrix_inverse_and_multiplicate_left(Matrixf *matrix, Matrixf *result) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
    assert(matrix->width == matrix->height);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d005      	beq.n	80011ea <matrix_inverse_and_multiplicate_left+0x22>
 80011de:	4b75      	ldr	r3, [pc, #468]	; (80013b4 <matrix_inverse_and_multiplicate_left+0x1ec>)
 80011e0:	4a75      	ldr	r2, [pc, #468]	; (80013b8 <matrix_inverse_and_multiplicate_left+0x1f0>)
 80011e2:	21da      	movs	r1, #218	; 0xda
 80011e4:	4875      	ldr	r0, [pc, #468]	; (80013bc <matrix_inverse_and_multiplicate_left+0x1f4>)
 80011e6:	f002 fe39 	bl	8003e5c <__assert_func>
    assert(result->height == matrix->height);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d005      	beq.n	8001202 <matrix_inverse_and_multiplicate_left+0x3a>
 80011f6:	4b72      	ldr	r3, [pc, #456]	; (80013c0 <matrix_inverse_and_multiplicate_left+0x1f8>)
 80011f8:	4a6f      	ldr	r2, [pc, #444]	; (80013b8 <matrix_inverse_and_multiplicate_left+0x1f0>)
 80011fa:	21db      	movs	r1, #219	; 0xdb
 80011fc:	486f      	ldr	r0, [pc, #444]	; (80013bc <matrix_inverse_and_multiplicate_left+0x1f4>)
 80011fe:	f002 fe2d 	bl	8003e5c <__assert_func>

    for (int x = 0; x < matrix->width - 1; x++)
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001206:	e07d      	b.n	8001304 <matrix_inverse_and_multiplicate_left+0x13c>
    {
        int i1 = -1;
 8001208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int i = x; i < matrix->height; i++)
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
 8001212:	e01f      	b.n	8001254 <matrix_inverse_and_multiplicate_left+0x8c>
        {
            if (*matrix_at(matrix, i, x) > EPS || *matrix_at(matrix, i, x) < -EPS)
 8001214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fde7 	bl	8000dec <matrix_at>
 800121e:	4603      	mov	r3, r0
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	dc0c      	bgt.n	8001248 <matrix_inverse_and_multiplicate_left+0x80>
 800122e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fdda 	bl	8000dec <matrix_at>
 8001238:	4603      	mov	r3, r0
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	d502      	bpl.n	800124e <matrix_inverse_and_multiplicate_left+0x86>
            {
                i1 = i;
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 800124c:	e007      	b.n	800125e <matrix_inverse_and_multiplicate_left+0x96>
        for (int i = x; i < matrix->height; i++)
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	3301      	adds	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800125a:	429a      	cmp	r2, r3
 800125c:	dbda      	blt.n	8001214 <matrix_inverse_and_multiplicate_left+0x4c>
            }
        }
        if(i1 == -1)
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001264:	d109      	bne.n	800127a <matrix_inverse_and_multiplicate_left+0xb2>
        {
            fprintf(stderr, "Determinant is 0\n");
 8001266:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <matrix_inverse_and_multiplicate_left+0x1fc>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2211      	movs	r2, #17
 800126e:	2101      	movs	r1, #1
 8001270:	4855      	ldr	r0, [pc, #340]	; (80013c8 <matrix_inverse_and_multiplicate_left+0x200>)
 8001272:	f002 fe89 	bl	8003f88 <fwrite>
            return DET_IS_ZERO;
 8001276:	2312      	movs	r3, #18
 8001278:	e098      	b.n	80013ac <matrix_inverse_and_multiplicate_left+0x1e4>
        }
        matrix_swapRows(&result, x, i1);
 800127a:	463b      	mov	r3, r7
 800127c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800127e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe57 	bl	8000f34 <matrix_swapRows>
        matrix_swapRows(matrix, x, i1);
 8001286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fe52 	bl	8000f34 <matrix_swapRows>

        float k = -1 / *matrix_at(matrix, x, x);
 8001290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fda9 	bl	8000dec <matrix_at>
 800129a:	4603      	mov	r3, r0
 800129c:	ed93 7a00 	vldr	s14, [r3]
 80012a0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80012a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a8:	edc7 7a04 	vstr	s15, [r7, #16]

        for (int i = x + 1; i < matrix->height; i++)
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	3301      	adds	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
 80012b2:	e01f      	b.n	80012f4 <matrix_inverse_and_multiplicate_left+0x12c>
        {
            float t = k * *matrix_at(matrix, i, x);
 80012b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b6:	6a39      	ldr	r1, [r7, #32]
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fd97 	bl	8000dec <matrix_at>
 80012be:	4603      	mov	r3, r0
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012cc:	edc7 7a03 	vstr	s15, [r7, #12]
            matrix_addRow(matrix, x, i, t);
 80012d0:	ed97 0a03 	vldr	s0, [r7, #12]
 80012d4:	6a3a      	ldr	r2, [r7, #32]
 80012d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff feaf 	bl	800103c <matrix_addRow>
            matrix_addRow(&result, x, i, t);
 80012de:	463b      	mov	r3, r7
 80012e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80012e4:	6a3a      	ldr	r2, [r7, #32]
 80012e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fea7 	bl	800103c <matrix_addRow>
        for (int i = x + 1; i < matrix->height; i++)
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	3301      	adds	r3, #1
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6a3a      	ldr	r2, [r7, #32]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbda      	blt.n	80012b4 <matrix_inverse_and_multiplicate_left+0xec>
    for (int x = 0; x < matrix->width - 1; x++)
 80012fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001300:	3301      	adds	r3, #1
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	3b01      	subs	r3, #1
 800130a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800130c:	429a      	cmp	r2, r3
 800130e:	f6ff af7b 	blt.w	8001208 <matrix_inverse_and_multiplicate_left+0x40>
        }
    }
    for (int i = matrix->width - 1; i >= 0; i--)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	e043      	b.n	80013a4 <matrix_inverse_and_multiplicate_left+0x1dc>
    {
        matrix_mulRowNum(&result, i, 1 / *matrix_at(matrix, i, i));
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	69f9      	ldr	r1, [r7, #28]
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fd63 	bl	8000dec <matrix_at>
 8001326:	4603      	mov	r3, r0
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001334:	463b      	mov	r3, r7
 8001336:	eeb0 0a47 	vmov.f32	s0, s14
 800133a:	69f9      	ldr	r1, [r7, #28]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe45 	bl	8000fcc <matrix_mulRowNum>
        *matrix_at(matrix, i, i) = 1;
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	69f9      	ldr	r1, [r7, #28]
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fd50 	bl	8000dec <matrix_at>
 800134c:	4603      	mov	r3, r0
 800134e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001352:	601a      	str	r2, [r3, #0]

        for (int j = i - 1; j >= 0; j--)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	3b01      	subs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	e01d      	b.n	8001398 <matrix_inverse_and_multiplicate_left+0x1d0>
        {
            float t = -*matrix_at(matrix, j, i);
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	69b9      	ldr	r1, [r7, #24]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff fd43 	bl	8000dec <matrix_at>
 8001366:	4603      	mov	r3, r0
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	eef1 7a67 	vneg.f32	s15, s15
 8001370:	edc7 7a05 	vstr	s15, [r7, #20]
            matrix_addRow(matrix, i, j, t);
 8001374:	ed97 0a05 	vldr	s0, [r7, #20]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	69f9      	ldr	r1, [r7, #28]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fe5d 	bl	800103c <matrix_addRow>
            matrix_addRow(&result, i, j, t);
 8001382:	463b      	mov	r3, r7
 8001384:	ed97 0a05 	vldr	s0, [r7, #20]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	69f9      	ldr	r1, [r7, #28]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe55 	bl	800103c <matrix_addRow>
        for (int j = i - 1; j >= 0; j--)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	3b01      	subs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	dade      	bge.n	800135c <matrix_inverse_and_multiplicate_left+0x194>
    for (int i = matrix->width - 1; i >= 0; i--)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dab8      	bge.n	800131c <matrix_inverse_and_multiplicate_left+0x154>
        }
    }
    return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3730      	adds	r7, #48	; 0x30
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	080077ec 	.word	0x080077ec
 80013b8:	08007904 	.word	0x08007904
 80013bc:	0800780c 	.word	0x0800780c
 80013c0:	08007820 	.word	0x08007820
 80013c4:	20000030 	.word	0x20000030
 80013c8:	08007844 	.word	0x08007844

080013cc <matrix_copy>:

//isForced != 0 => copy size too
int matrix_copy(const Matrixf *source, Matrixf *destination, int isForced)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	if(isForced)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <matrix_copy+0x24>
	{
		destination->height = source->height;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	601a      	str	r2, [r3, #0]
		destination->width = source->width;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	e015      	b.n	800141c <matrix_copy+0x50>
	}
	else if(destination->height != source->height || destination->width != source->width)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d105      	bne.n	8001408 <matrix_copy+0x3c>
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	d009      	beq.n	800141c <matrix_copy+0x50>
	{
		fprintf(stderr, "Matrix sizes are not copied\n");
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <matrix_copy+0xa4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	221c      	movs	r2, #28
 8001410:	2101      	movs	r1, #1
 8001412:	4818      	ldr	r0, [pc, #96]	; (8001474 <matrix_copy+0xa8>)
 8001414:	f002 fdb8 	bl	8003f88 <fwrite>
		return BAD_SIZES;
 8001418:	2310      	movs	r3, #16
 800141a:	e024      	b.n	8001466 <matrix_copy+0x9a>
	}
	for (int i = 0; i < destination->height; i++)
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e01b      	b.n	800145a <matrix_copy+0x8e>
		for (int j = 0; j < source->width; j++)
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	e010      	b.n	800144a <matrix_copy+0x7e>
			*matrix_at(destination, i, j) = *matrix_at(source, i, j);
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	6979      	ldr	r1, [r7, #20]
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff fcdd 	bl	8000dec <matrix_at>
 8001432:	4604      	mov	r4, r0
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	6979      	ldr	r1, [r7, #20]
 8001438:	68b8      	ldr	r0, [r7, #8]
 800143a:	f7ff fcd7 	bl	8000dec <matrix_at>
 800143e:	4602      	mov	r2, r0
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < source->width; j++)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	3301      	adds	r3, #1
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbe9      	blt.n	8001428 <matrix_copy+0x5c>
	for (int i = 0; i < destination->height; i++)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	429a      	cmp	r2, r3
 8001462:	dbde      	blt.n	8001422 <matrix_copy+0x56>
	return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd90      	pop	{r4, r7, pc}
 800146e:	bf00      	nop
 8001470:	20000030 	.word	0x20000030
 8001474:	08007858 	.word	0x08007858

08001478 <matrix_setSize>:


void matrix_setSize(Matrixf *matrix, int height, int width)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
	matrix->height = height;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	601a      	str	r2, [r3, #0]
	matrix->width = width;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	605a      	str	r2, [r3, #4]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <matrix_norm>:
	}
	return res;
}

float matrix_norm(const Matrixf *matrix)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	float result = 0;
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < matrix->height; i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	e01f      	b.n	80014f0 <matrix_norm+0x54>
		for (int j = 0; j < matrix->width; j++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e014      	b.n	80014e0 <matrix_norm+0x44>
		{
			float t = *matrix_at(matrix, i, j);
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	6939      	ldr	r1, [r7, #16]
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fc96 	bl	8000dec <matrix_at>
 80014c0:	4603      	mov	r3, r0
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60bb      	str	r3, [r7, #8]
			result += t * t;
 80014c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80014d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d6:	edc7 7a05 	vstr	s15, [r7, #20]
		for (int j = 0; j < matrix->width; j++)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3301      	adds	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dbe5      	blt.n	80014b6 <matrix_norm+0x1a>
	for (int i = 0; i < matrix->height; i++)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	3301      	adds	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbda      	blt.n	80014b0 <matrix_norm+0x14>
		}
	result = sqrtf(result);
 80014fa:	ed97 0a05 	vldr	s0, [r7, #20]
 80014fe:	f005 fc19 	bl	8006d34 <sqrtf>
 8001502:	ed87 0a05 	vstr	s0, [r7, #20]
	return result;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	ee07 3a90 	vmov	s15, r3
}
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <matrix_checkSize>:
		for (int j = 0; j < matrix->width; j++)
			*matrix_at(matrix, i, j) *= koef;
}

int matrix_checkSize(const Matrixf *matrix, int height, int width)
{
 8001516:	b480      	push	{r7}
 8001518:	b085      	sub	sp, #20
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
	return matrix->height == height && matrix->width == width;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	d106      	bne.n	800153a <matrix_checkSize+0x24>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	d101      	bne.n	800153a <matrix_checkSize+0x24>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <matrix_checkSize+0x26>
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_read>:

#define ADC_TIMEOUT 100
#define STDIO_UART_TIMEOUT 100

int _read(int file, char *ptr, int len)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
    if (HAL_UART_Receive(&huart1, (uint8_t *)ptr, len, STDIO_UART_TIMEOUT) == HAL_OK) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	b29a      	uxth	r2, r3
 8001558:	2364      	movs	r3, #100	; 0x64
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <_read+0x30>)
 800155e:	f002 f91c 	bl	800379a <HAL_UART_Receive>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <_read+0x24>
        return len;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	e000      	b.n	800156e <_read+0x26>
    } else {
        return 0;
 800156c:	2300      	movs	r3, #0
    }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200002e8 	.word	0x200002e8

0800157c <_write>:

int _write(int file, char *ptr, int len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
    if (HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, STDIO_UART_TIMEOUT) == HAL_OK) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	b29a      	uxth	r2, r3
 800158c:	2364      	movs	r3, #100	; 0x64
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <_write+0x30>)
 8001592:	f002 f870 	bl	8003676 <HAL_UART_Transmit>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <_write+0x24>
        return len;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	e000      	b.n	80015a2 <_write+0x26>
    } else {
        return 0;
 80015a0:	2300      	movs	r3, #0
    }
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200002e8 	.word	0x200002e8

080015b0 <degrees>:
        {1.00000, 0.00000, 0.00000 },
        {-1.00000, 0.75249, 0.75249 },
        {0.00000, -1.46190, 1.46190 }
};

float degrees(float a) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	ed87 0a01 	vstr	s0, [r7, #4]
    return a * 180 / M_PI;
 80015ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80015be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001600 <degrees+0x50>
 80015c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c6:	ee17 0a90 	vmov	r0, s15
 80015ca:	f7fe ff9d 	bl	8000508 <__aeabi_f2d>
 80015ce:	a30a      	add	r3, pc, #40	; (adr r3, 80015f8 <degrees+0x48>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f91a 	bl	800080c <__aeabi_ddiv>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fac2 	bl	8000b68 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
}
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f3af 8000 	nop.w
 80015f8:	54442d18 	.word	0x54442d18
 80015fc:	400921fb 	.word	0x400921fb
 8001600:	43340000 	.word	0x43340000
 8001604:	00000000 	.word	0x00000000

08001608 <tmain>:

int tmain() {
 8001608:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800160c:	ed2d 8b02 	vpush	{d8}
 8001610:	b0a6      	sub	sp, #152	; 0x98
 8001612:	af04      	add	r7, sp, #16
    Matrixf b;
    lds_t lds;
    Matrixf temp;


    MATRIX_SA(x, LDS_DIM, 1);
 8001614:	4b9c      	ldr	r3, [pc, #624]	; (8001888 <tmain+0x280>)
 8001616:	667b      	str	r3, [r7, #100]	; 0x64
 8001618:	2303      	movs	r3, #3
 800161a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800161c:	2301      	movs	r3, #1
 800161e:	663b      	str	r3, [r7, #96]	; 0x60
    MATRIX_SA(b, LDS_COUNT, 1);
 8001620:	4b9a      	ldr	r3, [pc, #616]	; (800188c <tmain+0x284>)
 8001622:	657b      	str	r3, [r7, #84]	; 0x54
 8001624:	2303      	movs	r3, #3
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001628:	2301      	movs	r3, #1
 800162a:	653b      	str	r3, [r7, #80]	; 0x50
    MATRIX_SA(temp, LDS_DIM, LDS_DIM);
 800162c:	4b98      	ldr	r3, [pc, #608]	; (8001890 <tmain+0x288>)
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	2303      	movs	r3, #3
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	2303      	movs	r3, #3
 8001636:	61bb      	str	r3, [r7, #24]
    MATRIX_SA(lds.A, LDS_COUNT, LDS_DIM);
 8001638:	4b96      	ldr	r3, [pc, #600]	; (8001894 <tmain+0x28c>)
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163c:	2303      	movs	r3, #3
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
 8001640:	2303      	movs	r3, #3
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
    MATRIX_SA(lds.As, LDS_DIM, LDS_COUNT);
 8001644:	4b94      	ldr	r3, [pc, #592]	; (8001898 <tmain+0x290>)
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001648:	2303      	movs	r3, #3
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
 800164c:	2303      	movs	r3, #3
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38

    Matrixf arr;
    arr.arr = (float *)Arr;
 8001650:	4b92      	ldr	r3, [pc, #584]	; (800189c <tmain+0x294>)
 8001652:	60fb      	str	r3, [r7, #12]
    arr.height = 3;
 8001654:	2303      	movs	r3, #3
 8001656:	607b      	str	r3, [r7, #4]
    arr.width = 3;
 8001658:	2303      	movs	r3, #3
 800165a:	60bb      	str	r3, [r7, #8]
    arr.reserved = 9;
 800165c:	2309      	movs	r3, #9
 800165e:	613b      	str	r3, [r7, #16]
    lds_init(&lds, LDS_COUNT, LDS_DIM, &temp);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001668:	2203      	movs	r2, #3
 800166a:	2103      	movs	r1, #3
 800166c:	f7ff fb06 	bl	8000c7c <lds_init>
    hadc1.Instance->SQR3 = 0;
 8001670:	4b8b      	ldr	r3, [pc, #556]	; (80018a0 <tmain+0x298>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	635a      	str	r2, [r3, #52]	; 0x34
    int step = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (1) {
        for (int i = 0; i < LDS_COUNT; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001684:	e039      	b.n	80016fa <tmain+0xf2>
            hadc1.Instance->SQR3 = i;
 8001686:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <tmain+0x298>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800168e:	635a      	str	r2, [r3, #52]	; 0x34
            HAL_ADC_Start(&hadc1);
 8001690:	4883      	ldr	r0, [pc, #524]	; (80018a0 <tmain+0x298>)
 8001692:	f000 fd0d 	bl	80020b0 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT);
 8001696:	2164      	movs	r1, #100	; 0x64
 8001698:	4881      	ldr	r0, [pc, #516]	; (80018a0 <tmain+0x298>)
 800169a:	f000 fddb 	bl	8002254 <HAL_ADC_PollForConversion>
            uint32_t value = HAL_ADC_GetValue(&hadc1);
 800169e:	4880      	ldr	r0, [pc, #512]	; (80018a0 <tmain+0x298>)
 80016a0:	f000 fe63 	bl	800236a <HAL_ADC_GetValue>
 80016a4:	6738      	str	r0, [r7, #112]	; 0x70
            float v = ((float)value / (1 << 12)) * 3.3;
 80016a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b0:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80018a4 <tmain+0x29c>
 80016b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016b8:	ee16 0a90 	vmov	r0, s13
 80016bc:	f7fe ff24 	bl	8000508 <__aeabi_f2d>
 80016c0:	a36f      	add	r3, pc, #444	; (adr r3, 8001880 <tmain+0x278>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ff77 	bl	80005b8 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff fa49 	bl	8000b68 <__aeabi_d2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	66fb      	str	r3, [r7, #108]	; 0x6c

            *matrix_at(&b, i, 0) = v;
 80016da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016de:	2200      	movs	r2, #0
 80016e0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb81 	bl	8000dec <matrix_at>
 80016ea:	4602      	mov	r2, r0
 80016ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ee:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < LDS_COUNT; i++) {
 80016f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016f4:	3301      	adds	r3, #1
 80016f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80016fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016fe:	2b02      	cmp	r3, #2
 8001700:	ddc1      	ble.n	8001686 <tmain+0x7e>
        }
        matrix_multiplicate(&arr, &b, &x);
 8001702:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001706:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fb99 	bl	8000e44 <matrix_multiplicate>
/*
        lds_search(&lds, &b, &x);
        float err = lds_get_error(&lds, &b, &x);
*/

        float mag = matrix_norm(&x);
 8001712:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fec0 	bl	800149c <matrix_norm>
 800171c:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        float phi = atan(*matrix_at(&x, 1, 0) / *matrix_at(&x, 0, 0));
 8001720:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001724:	2200      	movs	r2, #0
 8001726:	2101      	movs	r1, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fb5f 	bl	8000dec <matrix_at>
 800172e:	4603      	mov	r3, r0
 8001730:	ed93 8a00 	vldr	s16, [r3]
 8001734:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fb55 	bl	8000dec <matrix_at>
 8001742:	4603      	mov	r3, r0
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800174c:	ee17 0a10 	vmov	r0, s14
 8001750:	f7fe feda 	bl	8000508 <__aeabi_f2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	ec43 2b10 	vmov	d0, r2, r3
 800175c:	f005 f914 	bl	8006988 <atan>
 8001760:	ec53 2b10 	vmov	r2, r3, d0
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff f9fe 	bl	8000b68 <__aeabi_d2f>
 800176c:	4603      	mov	r3, r0
 800176e:	67bb      	str	r3, [r7, #120]	; 0x78
        float psi = acos(*matrix_at(&x, 2, 0) / mag);
 8001770:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001774:	2200      	movs	r2, #0
 8001776:	2102      	movs	r1, #2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fb37 	bl	8000dec <matrix_at>
 800177e:	4603      	mov	r3, r0
 8001780:	ed93 7a00 	vldr	s14, [r3]
 8001784:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001788:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800178c:	ee16 0a90 	vmov	r0, s13
 8001790:	f7fe feba 	bl	8000508 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	ec43 2b10 	vmov	d0, r2, r3
 800179c:	f005 fa96 	bl	8006ccc <acos>
 80017a0:	ec53 2b10 	vmov	r2, r3, d0
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f9de 	bl	8000b68 <__aeabi_d2f>
 80017ac:	4603      	mov	r3, r0
 80017ae:	677b      	str	r3, [r7, #116]	; 0x74
        printf("a1: %4.4f: a2: %4.4f a3: %4.4f\n", *matrix_at(&b, 0, 0), *matrix_at(&b, 1, 0), *matrix_at(&b, 2, 0));
 80017b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fb17 	bl	8000dec <matrix_at>
 80017be:	4603      	mov	r3, r0
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fea0 	bl	8000508 <__aeabi_f2d>
 80017c8:	4680      	mov	r8, r0
 80017ca:	4689      	mov	r9, r1
 80017cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d0:	2200      	movs	r2, #0
 80017d2:	2101      	movs	r1, #1
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fb09 	bl	8000dec <matrix_at>
 80017da:	4603      	mov	r3, r0
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fe92 	bl	8000508 <__aeabi_f2d>
 80017e4:	4604      	mov	r4, r0
 80017e6:	460d      	mov	r5, r1
 80017e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ec:	2200      	movs	r2, #0
 80017ee:	2102      	movs	r1, #2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fafb 	bl	8000dec <matrix_at>
 80017f6:	4603      	mov	r3, r0
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe84 	bl	8000508 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001808:	e9cd 4500 	strd	r4, r5, [sp]
 800180c:	4642      	mov	r2, r8
 800180e:	464b      	mov	r3, r9
 8001810:	4825      	ldr	r0, [pc, #148]	; (80018a8 <tmain+0x2a0>)
 8001812:	f003 fa69 	bl	8004ce8 <iprintf>
        printf("%4d: mag: %4.4f phi: %.4f psi: %.4f\n", step, mag, degrees(phi), degrees(psi));
 8001816:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001818:	f7fe fe76 	bl	8000508 <__aeabi_f2d>
 800181c:	4680      	mov	r8, r0
 800181e:	4689      	mov	r9, r1
 8001820:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8001824:	f7ff fec4 	bl	80015b0 <degrees>
 8001828:	ee10 3a10 	vmov	r3, s0
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe6b 	bl	8000508 <__aeabi_f2d>
 8001832:	4604      	mov	r4, r0
 8001834:	460d      	mov	r5, r1
 8001836:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800183a:	f7ff feb9 	bl	80015b0 <degrees>
 800183e:	ee10 3a10 	vmov	r3, s0
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe60 	bl	8000508 <__aeabi_f2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001850:	e9cd 4500 	strd	r4, r5, [sp]
 8001854:	4642      	mov	r2, r8
 8001856:	464b      	mov	r3, r9
 8001858:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800185c:	4813      	ldr	r0, [pc, #76]	; (80018ac <tmain+0x2a4>)
 800185e:	f003 fa43 	bl	8004ce8 <iprintf>
        HAL_Delay(1000);
 8001862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001866:	f000 fbbb 	bl	8001fe0 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800186a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186e:	4810      	ldr	r0, [pc, #64]	; (80018b0 <tmain+0x2a8>)
 8001870:	f001 fa41 	bl	8002cf6 <HAL_GPIO_TogglePin>
        step++;
 8001874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001878:	3301      	adds	r3, #1
 800187a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (1) {
 800187e:	e6fe      	b.n	800167e <tmain+0x76>
 8001880:	66666666 	.word	0x66666666
 8001884:	400a6666 	.word	0x400a6666
 8001888:	2000021c 	.word	0x2000021c
 800188c:	20000228 	.word	0x20000228
 8001890:	20000234 	.word	0x20000234
 8001894:	20000258 	.word	0x20000258
 8001898:	2000027c 	.word	0x2000027c
 800189c:	20000000 	.word	0x20000000
 80018a0:	200002a0 	.word	0x200002a0
 80018a4:	45800000 	.word	0x45800000
 80018a8:	080078b0 	.word	0x080078b0
 80018ac:	080078d0 	.word	0x080078d0
 80018b0:	40021400 	.word	0x40021400

080018b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b8:	f000 fb20 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018bc:	f000 f80a 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c0:	f000 f8fe 	bl	8001ac0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018c4:	f000 f864 	bl	8001990 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80018c8:	f000 f8d0 	bl	8001a6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  tmain();
 80018cc:	f7ff fe9c 	bl	8001608 <tmain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <main+0x1c>
	...

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	; 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2230      	movs	r2, #48	; 0x30
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fb8e 	bl	8004004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <SystemClock_Config+0xb4>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	4a21      	ldr	r2, [pc, #132]	; (8001988 <SystemClock_Config+0xb4>)
 8001902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <SystemClock_Config+0xb4>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <SystemClock_Config+0xb8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1b      	ldr	r2, [pc, #108]	; (800198c <SystemClock_Config+0xb8>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <SystemClock_Config+0xb8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001934:	2301      	movs	r3, #1
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001938:	2310      	movs	r3, #16
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800193c:	2300      	movs	r3, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	4618      	mov	r0, r3
 8001946:	f001 f9f1 	bl	8002d2c <HAL_RCC_OscConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001950:	f000 f91e 	bl	8001b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001954:	230f      	movs	r3, #15
 8001956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fc54 	bl	800321c <HAL_RCC_ClockConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800197a:	f000 f909 	bl	8001b90 <Error_Handler>
  }
}
 800197e:	bf00      	nop
 8001980:	3750      	adds	r7, #80	; 0x50
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000

08001990 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019a2:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019a4:	4a2f      	ldr	r2, [pc, #188]	; (8001a64 <MX_ADC1_Init+0xd4>)
 80019a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019d0:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <MX_ADC1_Init+0xd8>)
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019dc:	2203      	movs	r2, #3
 80019de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ee:	481c      	ldr	r0, [pc, #112]	; (8001a60 <MX_ADC1_Init+0xd0>)
 80019f0:	f000 fb1a 	bl	8002028 <HAL_ADC_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019fa:	f000 f8c9 	bl	8001b90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001a06:	2304      	movs	r3, #4
 8001a08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4814      	ldr	r0, [pc, #80]	; (8001a60 <MX_ADC1_Init+0xd0>)
 8001a10:	f000 fcb8 	bl	8002384 <HAL_ADC_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a1a:	f000 f8b9 	bl	8001b90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_ADC1_Init+0xd0>)
 8001a2c:	f000 fcaa 	bl	8002384 <HAL_ADC_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001a36:	f000 f8ab 	bl	8001b90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a42:	463b      	mov	r3, r7
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <MX_ADC1_Init+0xd0>)
 8001a48:	f000 fc9c 	bl	8002384 <HAL_ADC_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001a52:	f000 f89d 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002a0 	.word	0x200002a0
 8001a64:	40012000 	.word	0x40012000
 8001a68:	0f000001 	.word	0x0f000001

08001a6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <MX_USART1_UART_Init+0x50>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001aa4:	f001 fd9a 	bl	80035dc <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aae:	f000 f86f 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002e8 	.word	0x200002e8
 8001abc:	40011000 	.word	0x40011000

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <MX_GPIO_Init+0xc4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <MX_GPIO_Init+0xc4>)
 8001ae0:	f043 0320 	orr.w	r3, r3, #32
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <MX_GPIO_Init+0xc4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <MX_GPIO_Init+0xc4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <MX_GPIO_Init+0xc4>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <MX_GPIO_Init+0xc4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <MX_GPIO_Init+0xc4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <MX_GPIO_Init+0xc4>)
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <MX_GPIO_Init+0xc4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001b30:	4815      	ldr	r0, [pc, #84]	; (8001b88 <MX_GPIO_Init+0xc8>)
 8001b32:	f001 f8c7 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2110      	movs	r1, #16
 8001b3a:	4814      	ldr	r0, [pc, #80]	; (8001b8c <MX_GPIO_Init+0xcc>)
 8001b3c:	f001 f8c2 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 8001b40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4619      	mov	r1, r3
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <MX_GPIO_Init+0xc8>)
 8001b5a:	f000 ff17 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001b5e:	2310      	movs	r3, #16
 8001b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b62:	2311      	movs	r3, #17
 8001b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_GPIO_Init+0xcc>)
 8001b76:	f000 ff09 	bl	800298c <HAL_GPIO_Init>

}
 8001b7a:	bf00      	nop
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40020c00 	.word	0x40020c00

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_MspInit+0x4c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <HAL_MspInit+0x4c>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_MspInit+0x4c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_MspInit+0x4c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <HAL_MspInit+0x4c>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_MspInit+0x4c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a17      	ldr	r2, [pc, #92]	; (8001c6c <HAL_ADC_MspInit+0x7c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d127      	bne.n	8001c62 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_ADC_MspInit+0x80>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <HAL_ADC_MspInit+0x80>)
 8001c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_ADC_MspInit+0x80>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_ADC_MspInit+0x80>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_ADC_MspInit+0x80>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_ADC_MspInit+0x80>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <HAL_ADC_MspInit+0x84>)
 8001c5e:	f000 fe95 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40012000 	.word	0x40012000
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000

08001c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_UART_MspInit+0x84>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d12c      	bne.n	8001cf4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <HAL_UART_MspInit+0x8c>)
 8001cf0:	f000 fe4c 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <MemManage_Handler+0x4>

08001d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5c:	f000 f920 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
	return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_kill>:

int _kill(int pid, int sig)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d7e:	f002 f88b 	bl	8003e98 <__errno>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2216      	movs	r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
	return -1;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_exit>:

void _exit (int status)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ffe7 	bl	8001d74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001da6:	e7fe      	b.n	8001da6 <_exit+0x12>

08001da8 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	return -1;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd0:	605a      	str	r2, [r3, #4]
	return 0;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_isatty>:

int _isatty(int file)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
	return 0;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <_sbrk+0x5c>)
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <_sbrk+0x60>)
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <_sbrk+0x64>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <_sbrk+0x68>)
 8001e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d207      	bcs.n	8001e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e40:	f002 f82a 	bl	8003e98 <__errno>
 8001e44:	4603      	mov	r3, r0
 8001e46:	220c      	movs	r2, #12
 8001e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e4e:	e009      	b.n	8001e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <_sbrk+0x64>)
 8001e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e62:	68fb      	ldr	r3, [r7, #12]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20020000 	.word	0x20020000
 8001e70:	00000400 	.word	0x00000400
 8001e74:	2000032c 	.word	0x2000032c
 8001e78:	20000348 	.word	0x20000348

08001e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <SystemInit+0x28>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <SystemInit+0x28>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SystemInit+0x28>)
 8001e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e96:	609a      	str	r2, [r3, #8]
#endif
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001eac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eae:	e003      	b.n	8001eb8 <LoopCopyDataInit>

08001eb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001eb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001eb6:	3104      	adds	r1, #4

08001eb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001eb8:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ebc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ebe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ec0:	d3f6      	bcc.n	8001eb0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ec4:	e002      	b.n	8001ecc <LoopFillZerobss>

08001ec6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ec6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ec8:	f842 3b04 	str.w	r3, [r2], #4

08001ecc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ece:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ed0:	d3f9      	bcc.n	8001ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ed2:	f7ff ffd3 	bl	8001e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f002 f865 	bl	8003fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eda:	f7ff fceb 	bl	80018b4 <main>
  bx  lr    
 8001ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ee0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ee4:	08007d44 	.word	0x08007d44
  ldr  r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001eec:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8001ef0:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8001ef4:	20000344 	.word	0x20000344

08001ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <HAL_Init+0x40>)
 8001f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_Init+0x40>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_Init+0x40>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 fcfd 	bl	8002924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f000 f808 	bl	8001f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f30:	f7ff fe36 	bl	8001ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00

08001f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x54>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x58>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fd07 	bl	8002972 <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00e      	b.n	8001f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d80a      	bhi.n	8001f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f7c:	f000 fcdd 	bl	800293a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <HAL_InitTick+0x5c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000024 	.word	0x20000024
 8001f98:	2000002c 	.word	0x2000002c
 8001f9c:	20000028 	.word	0x20000028

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	2000002c 	.word	0x2000002c
 8001fc4:	20000330 	.word	0x20000330

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000330 	.word	0x20000330

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000002c 	.word	0x2000002c

08002028 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e033      	b.n	80020a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fdd2 	bl	8001bf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800206e:	f023 0302 	bic.w	r3, r3, #2
 8002072:	f043 0202 	orr.w	r2, r3, #2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 faa4 	bl	80025c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
 8002096:	e001      	b.n	800209c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_Start+0x1a>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e0b2      	b.n	8002230 <HAL_ADC_Start+0x180>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d018      	beq.n	8002112 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020f0:	4b52      	ldr	r3, [pc, #328]	; (800223c <HAL_ADC_Start+0x18c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a52      	ldr	r2, [pc, #328]	; (8002240 <HAL_ADC_Start+0x190>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	0c9a      	lsrs	r2, r3, #18
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002104:	e002      	b.n	800210c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3b01      	subs	r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f9      	bne.n	8002106 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d17a      	bne.n	8002216 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800214a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215e:	d106      	bne.n	800216e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	f023 0206 	bic.w	r2, r3, #6
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	645a      	str	r2, [r3, #68]	; 0x44
 800216c:	e002      	b.n	8002174 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217c:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_ADC_Start+0x194>)
 800217e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002188:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	2b00      	cmp	r3, #0
 8002194:	d12a      	bne.n	80021ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <HAL_ADC_Start+0x198>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d015      	beq.n	80021cc <HAL_ADC_Start+0x11c>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a29      	ldr	r2, [pc, #164]	; (800224c <HAL_ADC_Start+0x19c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d105      	bne.n	80021b6 <HAL_ADC_Start+0x106>
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_ADC_Start+0x194>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a25      	ldr	r2, [pc, #148]	; (8002250 <HAL_ADC_Start+0x1a0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d136      	bne.n	800222e <HAL_ADC_Start+0x17e>
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_ADC_Start+0x194>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d130      	bne.n	800222e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d129      	bne.n	800222e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	e020      	b.n	800222e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a15      	ldr	r2, [pc, #84]	; (8002248 <HAL_ADC_Start+0x198>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d11b      	bne.n	800222e <HAL_ADC_Start+0x17e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d114      	bne.n	800222e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	e00b      	b.n	800222e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f043 0210 	orr.w	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	20000024 	.word	0x20000024
 8002240:	431bde83 	.word	0x431bde83
 8002244:	40012300 	.word	0x40012300
 8002248:	40012000 	.word	0x40012000
 800224c:	40012100 	.word	0x40012100
 8002250:	40012200 	.word	0x40012200

08002254 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002270:	d113      	bne.n	800229a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800227c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002280:	d10b      	bne.n	800229a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f043 0220 	orr.w	r2, r3, #32
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e063      	b.n	8002362 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800229a:	f7ff fe95 	bl	8001fc8 <HAL_GetTick>
 800229e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022a0:	e021      	b.n	80022e6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022a8:	d01d      	beq.n	80022e6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_ADC_PollForConversion+0x6c>
 80022b0:	f7ff fe8a 	bl	8001fc8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d212      	bcs.n	80022e6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d00b      	beq.n	80022e6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f043 0204 	orr.w	r2, r3, #4
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e03d      	b.n	8002362 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d1d6      	bne.n	80022a2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0212 	mvn.w	r2, #18
 80022fc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d123      	bne.n	8002360 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800231c:	2b00      	cmp	r3, #0
 800231e:	d11f      	bne.n	8002360 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002338:	2b00      	cmp	r3, #0
 800233a:	d111      	bne.n	8002360 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1c>
 800239c:	2302      	movs	r3, #2
 800239e:	e105      	b.n	80025ac <HAL_ADC_ConfigChannel+0x228>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	d925      	bls.n	80023fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68d9      	ldr	r1, [r3, #12]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	3b1e      	subs	r3, #30
 80023c6:	2207      	movs	r2, #7
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43da      	mvns	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	400a      	ands	r2, r1
 80023d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68d9      	ldr	r1, [r3, #12]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	4603      	mov	r3, r0
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4403      	add	r3, r0
 80023ee:	3b1e      	subs	r3, #30
 80023f0:	409a      	lsls	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	e022      	b.n	8002442 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6919      	ldr	r1, [r3, #16]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	2207      	movs	r2, #7
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	400a      	ands	r2, r1
 800241e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6919      	ldr	r1, [r3, #16]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	4603      	mov	r3, r0
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4403      	add	r3, r0
 8002438:	409a      	lsls	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b06      	cmp	r3, #6
 8002448:	d824      	bhi.n	8002494 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	3b05      	subs	r3, #5
 800245c:	221f      	movs	r2, #31
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	400a      	ands	r2, r1
 800246a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b05      	subs	r3, #5
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
 8002492:	e04c      	b.n	800252e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d824      	bhi.n	80024e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b23      	subs	r3, #35	; 0x23
 80024ae:	221f      	movs	r2, #31
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43da      	mvns	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	400a      	ands	r2, r1
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3b23      	subs	r3, #35	; 0x23
 80024d8:	fa00 f203 	lsl.w	r2, r0, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
 80024e4:	e023      	b.n	800252e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b41      	subs	r3, #65	; 0x41
 80024f8:	221f      	movs	r2, #31
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4618      	mov	r0, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b41      	subs	r3, #65	; 0x41
 8002522:	fa00 f203 	lsl.w	r2, r0, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <HAL_ADC_ConfigChannel+0x234>)
 8002530:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_ADC_ConfigChannel+0x238>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d109      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1cc>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b12      	cmp	r3, #18
 8002542:	d105      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_ADC_ConfigChannel+0x238>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d123      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x21e>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b10      	cmp	r3, #16
 8002560:	d003      	beq.n	800256a <HAL_ADC_ConfigChannel+0x1e6>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b11      	cmp	r3, #17
 8002568:	d11b      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b10      	cmp	r3, #16
 800257c:	d111      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_ADC_ConfigChannel+0x23c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_ADC_ConfigChannel+0x240>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	0c9a      	lsrs	r2, r3, #18
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002594:	e002      	b.n	800259c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3b01      	subs	r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40012300 	.word	0x40012300
 80025bc:	40012000 	.word	0x40012000
 80025c0:	20000024 	.word	0x20000024
 80025c4:	431bde83 	.word	0x431bde83

080025c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d0:	4b79      	ldr	r3, [pc, #484]	; (80027b8 <ADC_Init+0x1f0>)
 80025d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	021a      	lsls	r2, r3, #8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6899      	ldr	r1, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	4a58      	ldr	r2, [pc, #352]	; (80027bc <ADC_Init+0x1f4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d022      	beq.n	80026a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800266e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6899      	ldr	r1, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002690:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	e00f      	b.n	80026c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0202 	bic.w	r2, r2, #2
 80026d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7e1b      	ldrb	r3, [r3, #24]
 80026e0:	005a      	lsls	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01b      	beq.n	800272c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002702:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002712:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	3b01      	subs	r3, #1
 8002720:	035a      	lsls	r2, r3, #13
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	e007      	b.n	800273c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800273a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	3b01      	subs	r3, #1
 8002758:	051a      	lsls	r2, r3, #20
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6899      	ldr	r1, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800277e:	025a      	lsls	r2, r3, #9
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002796:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6899      	ldr	r1, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	029a      	lsls	r2, r3, #10
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40012300 	.word	0x40012300
 80027bc:	0f000001 	.word	0x0f000001

080027c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f2:	4a04      	ldr	r2, [pc, #16]	; (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	60d3      	str	r3, [r2, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <__NVIC_GetPriorityGrouping+0x18>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0307 	and.w	r3, r3, #7
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	db0a      	blt.n	800284e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	490c      	ldr	r1, [pc, #48]	; (8002870 <__NVIC_SetPriority+0x4c>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	440b      	add	r3, r1
 8002848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800284c:	e00a      	b.n	8002864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4908      	ldr	r1, [pc, #32]	; (8002874 <__NVIC_SetPriority+0x50>)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3b04      	subs	r3, #4
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	440b      	add	r3, r1
 8002862:	761a      	strb	r2, [r3, #24]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000e100 	.word	0xe000e100
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b04      	cmp	r3, #4
 8002894:	bf28      	it	cs
 8002896:	2304      	movcs	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d902      	bls.n	80028a8 <NVIC_EncodePriority+0x30>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b03      	subs	r3, #3
 80028a6:	e000      	b.n	80028aa <NVIC_EncodePriority+0x32>
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	4313      	orrs	r3, r2
         );
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f0:	d301      	bcc.n	80028f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00f      	b.n	8002916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <SysTick_Config+0x40>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fe:	210f      	movs	r1, #15
 8002900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002904:	f7ff ff8e 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <SysTick_Config+0x40>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <SysTick_Config+0x40>)
 8002910:	2207      	movs	r2, #7
 8002912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	e000e010 	.word	0xe000e010

08002924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff47 	bl	80027c0 <__NVIC_SetPriorityGrouping>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800294c:	f7ff ff5c 	bl	8002808 <__NVIC_GetPriorityGrouping>
 8002950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7ff ff8e 	bl	8002878 <NVIC_EncodePriority>
 800295c:	4602      	mov	r2, r0
 800295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff5d 	bl	8002824 <__NVIC_SetPriority>
}
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ffb0 	bl	80028e0 <SysTick_Config>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	e16b      	b.n	8002c80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029a8:	2201      	movs	r2, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	f040 815a 	bne.w	8002c7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d005      	beq.n	80029de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d130      	bne.n	8002a40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	2203      	movs	r2, #3
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a14:	2201      	movs	r2, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 0201 	and.w	r2, r3, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d017      	beq.n	8002a7c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d123      	bne.n	8002ad0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	08da      	lsrs	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3208      	adds	r2, #8
 8002a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	08da      	lsrs	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3208      	adds	r2, #8
 8002aca:	69b9      	ldr	r1, [r7, #24]
 8002acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0203 	and.w	r2, r3, #3
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80b4 	beq.w	8002c7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b60      	ldr	r3, [pc, #384]	; (8002c98 <HAL_GPIO_Init+0x30c>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	4a5f      	ldr	r2, [pc, #380]	; (8002c98 <HAL_GPIO_Init+0x30c>)
 8002b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b20:	6453      	str	r3, [r2, #68]	; 0x44
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_GPIO_Init+0x30c>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b2e:	4a5b      	ldr	r2, [pc, #364]	; (8002c9c <HAL_GPIO_Init+0x310>)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3302      	adds	r3, #2
 8002b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_GPIO_Init+0x314>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d02b      	beq.n	8002bb2 <HAL_GPIO_Init+0x226>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a51      	ldr	r2, [pc, #324]	; (8002ca4 <HAL_GPIO_Init+0x318>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d025      	beq.n	8002bae <HAL_GPIO_Init+0x222>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a50      	ldr	r2, [pc, #320]	; (8002ca8 <HAL_GPIO_Init+0x31c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01f      	beq.n	8002baa <HAL_GPIO_Init+0x21e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4f      	ldr	r2, [pc, #316]	; (8002cac <HAL_GPIO_Init+0x320>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d019      	beq.n	8002ba6 <HAL_GPIO_Init+0x21a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_GPIO_Init+0x324>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_GPIO_Init+0x216>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <HAL_GPIO_Init+0x328>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00d      	beq.n	8002b9e <HAL_GPIO_Init+0x212>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4c      	ldr	r2, [pc, #304]	; (8002cb8 <HAL_GPIO_Init+0x32c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <HAL_GPIO_Init+0x20e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <HAL_GPIO_Init+0x330>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_GPIO_Init+0x20a>
 8002b92:	2307      	movs	r3, #7
 8002b94:	e00e      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002b96:	2308      	movs	r3, #8
 8002b98:	e00c      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	e00a      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002b9e:	2305      	movs	r3, #5
 8002ba0:	e008      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e004      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e002      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_GPIO_Init+0x228>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	f002 0203 	and.w	r2, r2, #3
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	4093      	lsls	r3, r2
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc4:	4935      	ldr	r1, [pc, #212]	; (8002c9c <HAL_GPIO_Init+0x310>)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf6:	4a32      	ldr	r2, [pc, #200]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bfc:	4b30      	ldr	r3, [pc, #192]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c20:	4a27      	ldr	r2, [pc, #156]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c26:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4a:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c74:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	f67f ae90 	bls.w	80029a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40021400 	.word	0x40021400
 8002cb8:	40021800 	.word	0x40021800
 8002cbc:	40021c00 	.word	0x40021c00
 8002cc0:	40013c00 	.word	0x40013c00

08002cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce0:	e003      	b.n	8002cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ce2:	887b      	ldrh	r3, [r7, #2]
 8002ce4:	041a      	lsls	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	619a      	str	r2, [r3, #24]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d08:	887a      	ldrh	r2, [r7, #2]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	041a      	lsls	r2, r3, #16
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	400b      	ands	r3, r1
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	619a      	str	r2, [r3, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e267      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d075      	beq.n	8002e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4a:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d00c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d56:	4b85      	ldr	r3, [pc, #532]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d112      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	4b82      	ldr	r3, [pc, #520]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	4b7e      	ldr	r3, [pc, #504]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d05b      	beq.n	8002e34 <HAL_RCC_OscConfig+0x108>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d157      	bne.n	8002e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e242      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d90:	d106      	bne.n	8002da0 <HAL_RCC_OscConfig+0x74>
 8002d92:	4b76      	ldr	r3, [pc, #472]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a75      	ldr	r2, [pc, #468]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e01d      	b.n	8002ddc <HAL_RCC_OscConfig+0xb0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x98>
 8002daa:	4b70      	ldr	r3, [pc, #448]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6f      	ldr	r2, [pc, #444]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6c      	ldr	r2, [pc, #432]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_OscConfig+0xb0>
 8002dc4:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a68      	ldr	r2, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b66      	ldr	r3, [pc, #408]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a65      	ldr	r2, [pc, #404]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff f8f0 	bl	8001fc8 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff f8ec 	bl	8001fc8 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e207      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0xc0>
 8002e0a:	e014      	b.n	8002e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7ff f8dc 	bl	8001fc8 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e14:	f7ff f8d8 	bl	8001fc8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e1f3      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0xe8>
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d063      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e42:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d11c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5a:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d116      	bne.n	8002e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_RCC_OscConfig+0x152>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e1c7      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4937      	ldr	r1, [pc, #220]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	e03a      	b.n	8002f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9c:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <HAL_RCC_OscConfig+0x244>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7ff f891 	bl	8001fc8 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eaa:	f7ff f88d 	bl	8001fc8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e1a8      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4925      	ldr	r1, [pc, #148]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]
 8002edc:	e015      	b.n	8002f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ede:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_OscConfig+0x244>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7ff f870 	bl	8001fc8 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eec:	f7ff f86c 	bl	8001fc8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e187      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d036      	beq.n	8002f84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <HAL_RCC_OscConfig+0x248>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7ff f850 	bl	8001fc8 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7ff f84c 	bl	8001fc8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e167      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x200>
 8002f4a:	e01b      	b.n	8002f84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_OscConfig+0x248>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7ff f839 	bl	8001fc8 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f58:	e00e      	b.n	8002f78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5a:	f7ff f835 	bl	8001fc8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d907      	bls.n	8002f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e150      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	42470000 	.word	0x42470000
 8002f74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b88      	ldr	r3, [pc, #544]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ea      	bne.n	8002f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8097 	beq.w	80030c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f96:	4b81      	ldr	r3, [pc, #516]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b7d      	ldr	r3, [pc, #500]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a7c      	ldr	r2, [pc, #496]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b7a      	ldr	r3, [pc, #488]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b77      	ldr	r3, [pc, #476]	; (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fce:	4b74      	ldr	r3, [pc, #464]	; (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a73      	ldr	r2, [pc, #460]	; (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7fe fff5 	bl	8001fc8 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fe fff1 	bl	8001fc8 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e10c      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	4b6a      	ldr	r3, [pc, #424]	; (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x2ea>
 8003008:	4b64      	ldr	r3, [pc, #400]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a63      	ldr	r2, [pc, #396]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	e01c      	b.n	8003050 <HAL_RCC_OscConfig+0x324>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x30c>
 800301e:	4b5f      	ldr	r3, [pc, #380]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a5e      	ldr	r2, [pc, #376]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	4b5c      	ldr	r3, [pc, #368]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a5b      	ldr	r2, [pc, #364]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0x324>
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a57      	ldr	r2, [pc, #348]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	4b55      	ldr	r3, [pc, #340]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a54      	ldr	r2, [pc, #336]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fe ffb6 	bl	8001fc8 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fe ffb2 	bl	8001fc8 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0cb      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	4b49      	ldr	r3, [pc, #292]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ee      	beq.n	8003060 <HAL_RCC_OscConfig+0x334>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7fe ffa0 	bl	8001fc8 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fe ff9c 	bl	8001fc8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0b5      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a2:	4b3e      	ldr	r3, [pc, #248]	; (800319c <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ee      	bne.n	800308c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b39      	ldr	r3, [pc, #228]	; (800319c <HAL_RCC_OscConfig+0x470>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	4a38      	ldr	r2, [pc, #224]	; (800319c <HAL_RCC_OscConfig+0x470>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a1 	beq.w	800320c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ca:	4b34      	ldr	r3, [pc, #208]	; (800319c <HAL_RCC_OscConfig+0x470>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d05c      	beq.n	8003190 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d141      	bne.n	8003162 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <HAL_RCC_OscConfig+0x478>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe ff70 	bl	8001fc8 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe ff6c 	bl	8001fc8 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e087      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	019b      	lsls	r3, r3, #6
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	3b01      	subs	r3, #1
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	491b      	ldr	r1, [pc, #108]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x478>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe ff45 	bl	8001fc8 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003142:	f7fe ff41 	bl	8001fc8 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e05c      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x416>
 8003160:	e054      	b.n	800320c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCC_OscConfig+0x478>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe ff2e 	bl	8001fc8 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe ff2a 	bl	8001fc8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e045      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x444>
 800318e:	e03d      	b.n	800320c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e038      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
 800319c:	40023800 	.word	0x40023800
 80031a0:	40007000 	.word	0x40007000
 80031a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_RCC_OscConfig+0x4ec>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d028      	beq.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d121      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d11a      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d111      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	3b01      	subs	r3, #1
 80031f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800

0800321c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0cc      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d90c      	bls.n	8003258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b8      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003270:	4b59      	ldr	r3, [pc, #356]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a58      	ldr	r2, [pc, #352]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800327a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003288:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	494d      	ldr	r1, [pc, #308]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d044      	beq.n	800333c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d119      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d003      	beq.n	80032da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e06f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e067      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4934      	ldr	r1, [pc, #208]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800330c:	f7fe fe5c 	bl	8001fc8 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fe fe58 	bl	8001fc8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e04f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 020c 	and.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d1eb      	bne.n	8003314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d20c      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e032      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4916      	ldr	r1, [pc, #88]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	490e      	ldr	r1, [pc, #56]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a2:	f000 f821 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	490a      	ldr	r1, [pc, #40]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	5ccb      	ldrb	r3, [r1, r3]
 80033b6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fdbc 	bl	8001f40 <HAL_InitTick>

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023c00 	.word	0x40023c00
 80033d8:	40023800 	.word	0x40023800
 80033dc:	0800792c 	.word	0x0800792c
 80033e0:	20000024 	.word	0x20000024
 80033e4:	20000028 	.word	0x20000028

080033e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b090      	sub	sp, #64	; 0x40
 80033ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
 80033f4:	2300      	movs	r3, #0
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f8:	2300      	movs	r3, #0
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003400:	4b59      	ldr	r3, [pc, #356]	; (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b08      	cmp	r3, #8
 800340a:	d00d      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x40>
 800340c:	2b08      	cmp	r3, #8
 800340e:	f200 80a1 	bhi.w	8003554 <HAL_RCC_GetSysClockFreq+0x16c>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x34>
 8003416:	2b04      	cmp	r3, #4
 8003418:	d003      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x3a>
 800341a:	e09b      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <HAL_RCC_GetSysClockFreq+0x184>)
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003420:	e09b      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003422:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_RCC_GetSysClockFreq+0x188>)
 8003424:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003426:	e098      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003428:	4b4f      	ldr	r3, [pc, #316]	; (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003432:	4b4d      	ldr	r3, [pc, #308]	; (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d028      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343e:	4b4a      	ldr	r3, [pc, #296]	; (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	2200      	movs	r2, #0
 8003446:	623b      	str	r3, [r7, #32]
 8003448:	627a      	str	r2, [r7, #36]	; 0x24
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003450:	2100      	movs	r1, #0
 8003452:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCC_GetSysClockFreq+0x188>)
 8003454:	fb03 f201 	mul.w	r2, r3, r1
 8003458:	2300      	movs	r3, #0
 800345a:	fb00 f303 	mul.w	r3, r0, r3
 800345e:	4413      	add	r3, r2
 8003460:	4a43      	ldr	r2, [pc, #268]	; (8003570 <HAL_RCC_GetSysClockFreq+0x188>)
 8003462:	fba0 1202 	umull	r1, r2, r0, r2
 8003466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003468:	460a      	mov	r2, r1
 800346a:	62ba      	str	r2, [r7, #40]	; 0x28
 800346c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346e:	4413      	add	r3, r2
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003474:	2200      	movs	r2, #0
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	61fa      	str	r2, [r7, #28]
 800347a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800347e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003482:	f7fd fbc1 	bl	8000c08 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4613      	mov	r3, r2
 800348c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348e:	e053      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003490:	4b35      	ldr	r3, [pc, #212]	; (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	2200      	movs	r2, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	617a      	str	r2, [r7, #20]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034a2:	f04f 0b00 	mov.w	fp, #0
 80034a6:	4652      	mov	r2, sl
 80034a8:	465b      	mov	r3, fp
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	0159      	lsls	r1, r3, #5
 80034b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b8:	0150      	lsls	r0, r2, #5
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	ebb2 080a 	subs.w	r8, r2, sl
 80034c2:	eb63 090b 	sbc.w	r9, r3, fp
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034da:	ebb2 0408 	subs.w	r4, r2, r8
 80034de:	eb63 0509 	sbc.w	r5, r3, r9
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	00eb      	lsls	r3, r5, #3
 80034ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f0:	00e2      	lsls	r2, r4, #3
 80034f2:	4614      	mov	r4, r2
 80034f4:	461d      	mov	r5, r3
 80034f6:	eb14 030a 	adds.w	r3, r4, sl
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	eb45 030b 	adc.w	r3, r5, fp
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800350e:	4629      	mov	r1, r5
 8003510:	028b      	lsls	r3, r1, #10
 8003512:	4621      	mov	r1, r4
 8003514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003518:	4621      	mov	r1, r4
 800351a:	028a      	lsls	r2, r1, #10
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003522:	2200      	movs	r2, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	60fa      	str	r2, [r7, #12]
 8003528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800352c:	f7fd fb6c 	bl	8000c08 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4613      	mov	r3, r2
 8003536:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_GetSysClockFreq+0x180>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0c1b      	lsrs	r3, r3, #16
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	3301      	adds	r3, #1
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003552:	e002      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_GetSysClockFreq+0x184>)
 8003556:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800355c:	4618      	mov	r0, r3
 800355e:	3740      	adds	r7, #64	; 0x40
 8003560:	46bd      	mov	sp, r7
 8003562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	00f42400 	.word	0x00f42400
 8003570:	017d7840 	.word	0x017d7840

08003574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_RCC_GetHCLKFreq+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000024 	.word	0x20000024

0800358c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003590:	f7ff fff0 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	0a9b      	lsrs	r3, r3, #10
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	0800793c 	.word	0x0800793c

080035b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035b8:	f7ff ffdc 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0b5b      	lsrs	r3, r3, #13
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4903      	ldr	r1, [pc, #12]	; (80035d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40023800 	.word	0x40023800
 80035d8:	0800793c 	.word	0x0800793c

080035dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e03f      	b.n	800366e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fe fb38 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800361e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f9a7 	bl	8003974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08a      	sub	sp, #40	; 0x28
 800367a:	af02      	add	r7, sp, #8
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b20      	cmp	r3, #32
 8003694:	d17c      	bne.n	8003790 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_UART_Transmit+0x2c>
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e075      	b.n	8003792 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Transmit+0x3e>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e06e      	b.n	8003792 <HAL_UART_Transmit+0x11c>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2221      	movs	r2, #33	; 0x21
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ca:	f7fe fc7d 	bl	8001fc8 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e4:	d108      	bne.n	80036f8 <HAL_UART_Transmit+0x82>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e003      	b.n	8003700 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003708:	e02a      	b.n	8003760 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2200      	movs	r2, #0
 8003712:	2180      	movs	r1, #128	; 0x80
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f8e2 	bl	80038de <UART_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e036      	b.n	8003792 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	3302      	adds	r3, #2
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e007      	b.n	8003752 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3301      	adds	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1cf      	bne.n	800370a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	2140      	movs	r1, #64	; 0x40
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f8b2 	bl	80038de <UART_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e006      	b.n	8003792 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b08a      	sub	sp, #40	; 0x28
 800379e:	af02      	add	r7, sp, #8
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	f040 808c 	bne.w	80038d4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UART_Receive+0x2e>
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e084      	b.n	80038d6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_UART_Receive+0x40>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e07d      	b.n	80038d6 <HAL_UART_Receive+0x13c>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2222      	movs	r2, #34	; 0x22
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037f6:	f7fe fbe7 	bl	8001fc8 <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	88fa      	ldrh	r2, [r7, #6]
 8003800:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003810:	d108      	bne.n	8003824 <HAL_UART_Receive+0x8a>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	e003      	b.n	800382c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003828:	2300      	movs	r3, #0
 800382a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003834:	e043      	b.n	80038be <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	2120      	movs	r1, #32
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f84c 	bl	80038de <UART_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e042      	b.n	80038d6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10c      	bne.n	8003870 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	b29a      	uxth	r2, r3
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	3302      	adds	r3, #2
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e01f      	b.n	80038b0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003878:	d007      	beq.n	800388a <HAL_UART_Receive+0xf0>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <HAL_UART_Receive+0xfe>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e008      	b.n	80038aa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3301      	adds	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1b6      	bne.n	8003836 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ee:	e02c      	b.n	800394a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f6:	d028      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <UART_WaitOnFlagUntilTimeout+0x30>
 80038fe:	f7fe fb63 	bl	8001fc8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	429a      	cmp	r2, r3
 800390c:	d21d      	bcs.n	800394a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800391c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e00f      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4013      	ands	r3, r2
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	429a      	cmp	r2, r3
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	429a      	cmp	r2, r3
 8003966:	d0c3      	beq.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003978:	b0c0      	sub	sp, #256	; 0x100
 800397a:	af00      	add	r7, sp, #0
 800397c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	68d9      	ldr	r1, [r3, #12]
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	ea40 0301 	orr.w	r3, r0, r1
 800399c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039cc:	f021 010c 	bic.w	r1, r1, #12
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039da:	430b      	orrs	r3, r1
 80039dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ee:	6999      	ldr	r1, [r3, #24]
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	ea40 0301 	orr.w	r3, r0, r1
 80039fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b8f      	ldr	r3, [pc, #572]	; (8003c40 <UART_SetConfig+0x2cc>)
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d005      	beq.n	8003a14 <UART_SetConfig+0xa0>
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b8d      	ldr	r3, [pc, #564]	; (8003c44 <UART_SetConfig+0x2d0>)
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d104      	bne.n	8003a1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a14:	f7ff fdce 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8003a18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a1c:	e003      	b.n	8003a26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a1e:	f7ff fdb5 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8003a22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a30:	f040 810c 	bne.w	8003c4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a46:	4622      	mov	r2, r4
 8003a48:	462b      	mov	r3, r5
 8003a4a:	1891      	adds	r1, r2, r2
 8003a4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a4e:	415b      	adcs	r3, r3
 8003a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a56:	4621      	mov	r1, r4
 8003a58:	eb12 0801 	adds.w	r8, r2, r1
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	eb43 0901 	adc.w	r9, r3, r1
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a76:	4690      	mov	r8, r2
 8003a78:	4699      	mov	r9, r3
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	eb18 0303 	adds.w	r3, r8, r3
 8003a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a84:	462b      	mov	r3, r5
 8003a86:	eb49 0303 	adc.w	r3, r9, r3
 8003a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	18db      	adds	r3, r3, r3
 8003aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	eb42 0303 	adc.w	r3, r2, r3
 8003aae:	657b      	str	r3, [r7, #84]	; 0x54
 8003ab0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ab4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ab8:	f7fd f8a6 	bl	8000c08 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4b61      	ldr	r3, [pc, #388]	; (8003c48 <UART_SetConfig+0x2d4>)
 8003ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	011c      	lsls	r4, r3, #4
 8003aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ad8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003adc:	4642      	mov	r2, r8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	1891      	adds	r1, r2, r2
 8003ae2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ae4:	415b      	adcs	r3, r3
 8003ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003aec:	4641      	mov	r1, r8
 8003aee:	eb12 0a01 	adds.w	sl, r2, r1
 8003af2:	4649      	mov	r1, r9
 8003af4:	eb43 0b01 	adc.w	fp, r3, r1
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b0c:	4692      	mov	sl, r2
 8003b0e:	469b      	mov	fp, r3
 8003b10:	4643      	mov	r3, r8
 8003b12:	eb1a 0303 	adds.w	r3, sl, r3
 8003b16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	18db      	adds	r3, r3, r3
 8003b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b3e:	4613      	mov	r3, r2
 8003b40:	eb42 0303 	adc.w	r3, r2, r3
 8003b44:	647b      	str	r3, [r7, #68]	; 0x44
 8003b46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b4e:	f7fd f85b 	bl	8000c08 <__aeabi_uldivmod>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <UART_SetConfig+0x2d4>)
 8003b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2264      	movs	r2, #100	; 0x64
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	1acb      	subs	r3, r1, r3
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b6e:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <UART_SetConfig+0x2d4>)
 8003b70:	fba3 2302 	umull	r2, r3, r3, r2
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b7c:	441c      	add	r4, r3
 8003b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	1891      	adds	r1, r2, r2
 8003b96:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b98:	415b      	adcs	r3, r3
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	1851      	adds	r1, r2, r1
 8003ba4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	414b      	adcs	r3, r1
 8003baa:	637b      	str	r3, [r7, #52]	; 0x34
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bb8:	4659      	mov	r1, fp
 8003bba:	00cb      	lsls	r3, r1, #3
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	00ca      	lsls	r2, r1, #3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4642      	mov	r2, r8
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	eb42 0303 	adc.w	r3, r2, r3
 8003bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	18db      	adds	r3, r3, r3
 8003bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	eb42 0303 	adc.w	r3, r2, r3
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c0a:	f7fc fffd 	bl	8000c08 <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <UART_SetConfig+0x2d4>)
 8003c14:	fba3 1302 	umull	r1, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	2164      	movs	r1, #100	; 0x64
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	3332      	adds	r3, #50	; 0x32
 8003c26:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <UART_SetConfig+0x2d4>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	f003 0207 	and.w	r2, r3, #7
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4422      	add	r2, r4
 8003c3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c3c:	e105      	b.n	8003e4a <UART_SetConfig+0x4d6>
 8003c3e:	bf00      	nop
 8003c40:	40011000 	.word	0x40011000
 8003c44:	40011400 	.word	0x40011400
 8003c48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c5e:	4642      	mov	r2, r8
 8003c60:	464b      	mov	r3, r9
 8003c62:	1891      	adds	r1, r2, r2
 8003c64:	6239      	str	r1, [r7, #32]
 8003c66:	415b      	adcs	r3, r3
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c6e:	4641      	mov	r1, r8
 8003c70:	1854      	adds	r4, r2, r1
 8003c72:	4649      	mov	r1, r9
 8003c74:	eb43 0501 	adc.w	r5, r3, r1
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	00eb      	lsls	r3, r5, #3
 8003c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c86:	00e2      	lsls	r2, r4, #3
 8003c88:	4614      	mov	r4, r2
 8003c8a:	461d      	mov	r5, r3
 8003c8c:	4643      	mov	r3, r8
 8003c8e:	18e3      	adds	r3, r4, r3
 8003c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c94:	464b      	mov	r3, r9
 8003c96:	eb45 0303 	adc.w	r3, r5, r3
 8003c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003caa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cba:	4629      	mov	r1, r5
 8003cbc:	008b      	lsls	r3, r1, #2
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	008a      	lsls	r2, r1, #2
 8003cc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ccc:	f7fc ff9c 	bl	8000c08 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4b60      	ldr	r3, [pc, #384]	; (8003e58 <UART_SetConfig+0x4e4>)
 8003cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	011c      	lsls	r4, r3, #4
 8003cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ce8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cf0:	4642      	mov	r2, r8
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	1891      	adds	r1, r2, r2
 8003cf6:	61b9      	str	r1, [r7, #24]
 8003cf8:	415b      	adcs	r3, r3
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d00:	4641      	mov	r1, r8
 8003d02:	1851      	adds	r1, r2, r1
 8003d04:	6139      	str	r1, [r7, #16]
 8003d06:	4649      	mov	r1, r9
 8003d08:	414b      	adcs	r3, r1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d18:	4659      	mov	r1, fp
 8003d1a:	00cb      	lsls	r3, r1, #3
 8003d1c:	4651      	mov	r1, sl
 8003d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d22:	4651      	mov	r1, sl
 8003d24:	00ca      	lsls	r2, r1, #3
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d34:	464b      	mov	r3, r9
 8003d36:	460a      	mov	r2, r1
 8003d38:	eb42 0303 	adc.w	r3, r2, r3
 8003d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d58:	4649      	mov	r1, r9
 8003d5a:	008b      	lsls	r3, r1, #2
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d62:	4641      	mov	r1, r8
 8003d64:	008a      	lsls	r2, r1, #2
 8003d66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d6a:	f7fc ff4d 	bl	8000c08 <__aeabi_uldivmod>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <UART_SetConfig+0x4e4>)
 8003d74:	fba3 1302 	umull	r1, r3, r3, r2
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	2164      	movs	r1, #100	; 0x64
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	3332      	adds	r3, #50	; 0x32
 8003d86:	4a34      	ldr	r2, [pc, #208]	; (8003e58 <UART_SetConfig+0x4e4>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d92:	441c      	add	r4, r3
 8003d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d98:	2200      	movs	r2, #0
 8003d9a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d9c:	677a      	str	r2, [r7, #116]	; 0x74
 8003d9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003da2:	4642      	mov	r2, r8
 8003da4:	464b      	mov	r3, r9
 8003da6:	1891      	adds	r1, r2, r2
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	415b      	adcs	r3, r3
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003db2:	4641      	mov	r1, r8
 8003db4:	1851      	adds	r1, r2, r1
 8003db6:	6039      	str	r1, [r7, #0]
 8003db8:	4649      	mov	r1, r9
 8003dba:	414b      	adcs	r3, r1
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dca:	4659      	mov	r1, fp
 8003dcc:	00cb      	lsls	r3, r1, #3
 8003dce:	4651      	mov	r1, sl
 8003dd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd4:	4651      	mov	r1, sl
 8003dd6:	00ca      	lsls	r2, r1, #3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4642      	mov	r2, r8
 8003de0:	189b      	adds	r3, r3, r2
 8003de2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003de4:	464b      	mov	r3, r9
 8003de6:	460a      	mov	r2, r1
 8003de8:	eb42 0303 	adc.w	r3, r2, r3
 8003dec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	663b      	str	r3, [r7, #96]	; 0x60
 8003df8:	667a      	str	r2, [r7, #100]	; 0x64
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e06:	4649      	mov	r1, r9
 8003e08:	008b      	lsls	r3, r1, #2
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e10:	4641      	mov	r1, r8
 8003e12:	008a      	lsls	r2, r1, #2
 8003e14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e18:	f7fc fef6 	bl	8000c08 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <UART_SetConfig+0x4e4>)
 8003e22:	fba3 1302 	umull	r1, r3, r3, r2
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2164      	movs	r1, #100	; 0x64
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	3332      	adds	r3, #50	; 0x32
 8003e34:	4a08      	ldr	r2, [pc, #32]	; (8003e58 <UART_SetConfig+0x4e4>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	f003 020f 	and.w	r2, r3, #15
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4422      	add	r2, r4
 8003e48:	609a      	str	r2, [r3, #8]
}
 8003e4a:	bf00      	nop
 8003e4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e50:	46bd      	mov	sp, r7
 8003e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e56:	bf00      	nop
 8003e58:	51eb851f 	.word	0x51eb851f

08003e5c <__assert_func>:
 8003e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003e5e:	4614      	mov	r4, r2
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <__assert_func+0x2c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4605      	mov	r5, r0
 8003e68:	68d8      	ldr	r0, [r3, #12]
 8003e6a:	b14c      	cbz	r4, 8003e80 <__assert_func+0x24>
 8003e6c:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <__assert_func+0x30>)
 8003e6e:	9100      	str	r1, [sp, #0]
 8003e70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003e74:	4906      	ldr	r1, [pc, #24]	; (8003e90 <__assert_func+0x34>)
 8003e76:	462b      	mov	r3, r5
 8003e78:	f000 f814 	bl	8003ea4 <fiprintf>
 8003e7c:	f001 f81c 	bl	8004eb8 <abort>
 8003e80:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <__assert_func+0x38>)
 8003e82:	461c      	mov	r4, r3
 8003e84:	e7f3      	b.n	8003e6e <__assert_func+0x12>
 8003e86:	bf00      	nop
 8003e88:	20000030 	.word	0x20000030
 8003e8c:	08007944 	.word	0x08007944
 8003e90:	08007951 	.word	0x08007951
 8003e94:	0800797f 	.word	0x0800797f

08003e98 <__errno>:
 8003e98:	4b01      	ldr	r3, [pc, #4]	; (8003ea0 <__errno+0x8>)
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000030 	.word	0x20000030

08003ea4 <fiprintf>:
 8003ea4:	b40e      	push	{r1, r2, r3}
 8003ea6:	b503      	push	{r0, r1, lr}
 8003ea8:	4601      	mov	r1, r0
 8003eaa:	ab03      	add	r3, sp, #12
 8003eac:	4805      	ldr	r0, [pc, #20]	; (8003ec4 <fiprintf+0x20>)
 8003eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eb2:	6800      	ldr	r0, [r0, #0]
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	f000 fde7 	bl	8004a88 <_vfiprintf_r>
 8003eba:	b002      	add	sp, #8
 8003ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ec0:	b003      	add	sp, #12
 8003ec2:	4770      	bx	lr
 8003ec4:	20000030 	.word	0x20000030

08003ec8 <_fwrite_r>:
 8003ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ecc:	9c08      	ldr	r4, [sp, #32]
 8003ece:	468a      	mov	sl, r1
 8003ed0:	4690      	mov	r8, r2
 8003ed2:	fb02 f903 	mul.w	r9, r2, r3
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	b118      	cbz	r0, 8003ee2 <_fwrite_r+0x1a>
 8003eda:	6983      	ldr	r3, [r0, #24]
 8003edc:	b90b      	cbnz	r3, 8003ee2 <_fwrite_r+0x1a>
 8003ede:	f001 ff87 	bl	8005df0 <__sinit>
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <_fwrite_r+0xb4>)
 8003ee4:	429c      	cmp	r4, r3
 8003ee6:	d123      	bne.n	8003f30 <_fwrite_r+0x68>
 8003ee8:	686c      	ldr	r4, [r5, #4]
 8003eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eec:	07de      	lsls	r6, r3, #31
 8003eee:	d405      	bmi.n	8003efc <_fwrite_r+0x34>
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	0598      	lsls	r0, r3, #22
 8003ef4:	d402      	bmi.n	8003efc <_fwrite_r+0x34>
 8003ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ef8:	f000 f879 	bl	8003fee <__retarget_lock_acquire_recursive>
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	0719      	lsls	r1, r3, #28
 8003f00:	d520      	bpl.n	8003f44 <_fwrite_r+0x7c>
 8003f02:	6923      	ldr	r3, [r4, #16]
 8003f04:	b1f3      	cbz	r3, 8003f44 <_fwrite_r+0x7c>
 8003f06:	2600      	movs	r6, #0
 8003f08:	454e      	cmp	r6, r9
 8003f0a:	d029      	beq.n	8003f60 <_fwrite_r+0x98>
 8003f0c:	68a7      	ldr	r7, [r4, #8]
 8003f0e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8003f12:	3f01      	subs	r7, #1
 8003f14:	2f00      	cmp	r7, #0
 8003f16:	60a7      	str	r7, [r4, #8]
 8003f18:	da04      	bge.n	8003f24 <_fwrite_r+0x5c>
 8003f1a:	69a3      	ldr	r3, [r4, #24]
 8003f1c:	429f      	cmp	r7, r3
 8003f1e:	db19      	blt.n	8003f54 <_fwrite_r+0x8c>
 8003f20:	290a      	cmp	r1, #10
 8003f22:	d017      	beq.n	8003f54 <_fwrite_r+0x8c>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	6022      	str	r2, [r4, #0]
 8003f2a:	7019      	strb	r1, [r3, #0]
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	e7eb      	b.n	8003f08 <_fwrite_r+0x40>
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <_fwrite_r+0xb8>)
 8003f32:	429c      	cmp	r4, r3
 8003f34:	d101      	bne.n	8003f3a <_fwrite_r+0x72>
 8003f36:	68ac      	ldr	r4, [r5, #8]
 8003f38:	e7d7      	b.n	8003eea <_fwrite_r+0x22>
 8003f3a:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <_fwrite_r+0xbc>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	bf08      	it	eq
 8003f40:	68ec      	ldreq	r4, [r5, #12]
 8003f42:	e7d2      	b.n	8003eea <_fwrite_r+0x22>
 8003f44:	4621      	mov	r1, r4
 8003f46:	4628      	mov	r0, r5
 8003f48:	f000 ff48 	bl	8004ddc <__swsetup_r>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d0da      	beq.n	8003f06 <_fwrite_r+0x3e>
 8003f50:	2600      	movs	r6, #0
 8003f52:	e005      	b.n	8003f60 <_fwrite_r+0x98>
 8003f54:	4622      	mov	r2, r4
 8003f56:	4628      	mov	r0, r5
 8003f58:	f000 feee 	bl	8004d38 <__swbuf_r>
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d1e5      	bne.n	8003f2c <_fwrite_r+0x64>
 8003f60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f62:	07da      	lsls	r2, r3, #31
 8003f64:	d405      	bmi.n	8003f72 <_fwrite_r+0xaa>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	059b      	lsls	r3, r3, #22
 8003f6a:	d402      	bmi.n	8003f72 <_fwrite_r+0xaa>
 8003f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f6e:	f000 f83f 	bl	8003ff0 <__retarget_lock_release_recursive>
 8003f72:	fbb6 f0f8 	udiv	r0, r6, r8
 8003f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7a:	bf00      	nop
 8003f7c:	08007a60 	.word	0x08007a60
 8003f80:	08007a80 	.word	0x08007a80
 8003f84:	08007a40 	.word	0x08007a40

08003f88 <fwrite>:
 8003f88:	b507      	push	{r0, r1, r2, lr}
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	460a      	mov	r2, r1
 8003f90:	4601      	mov	r1, r0
 8003f92:	4803      	ldr	r0, [pc, #12]	; (8003fa0 <fwrite+0x18>)
 8003f94:	6800      	ldr	r0, [r0, #0]
 8003f96:	f7ff ff97 	bl	8003ec8 <_fwrite_r>
 8003f9a:	b003      	add	sp, #12
 8003f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fa0:	20000030 	.word	0x20000030

08003fa4 <__libc_init_array>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	4d0d      	ldr	r5, [pc, #52]	; (8003fdc <__libc_init_array+0x38>)
 8003fa8:	4c0d      	ldr	r4, [pc, #52]	; (8003fe0 <__libc_init_array+0x3c>)
 8003faa:	1b64      	subs	r4, r4, r5
 8003fac:	10a4      	asrs	r4, r4, #2
 8003fae:	2600      	movs	r6, #0
 8003fb0:	42a6      	cmp	r6, r4
 8003fb2:	d109      	bne.n	8003fc8 <__libc_init_array+0x24>
 8003fb4:	4d0b      	ldr	r5, [pc, #44]	; (8003fe4 <__libc_init_array+0x40>)
 8003fb6:	4c0c      	ldr	r4, [pc, #48]	; (8003fe8 <__libc_init_array+0x44>)
 8003fb8:	f003 fb78 	bl	80076ac <_init>
 8003fbc:	1b64      	subs	r4, r4, r5
 8003fbe:	10a4      	asrs	r4, r4, #2
 8003fc0:	2600      	movs	r6, #0
 8003fc2:	42a6      	cmp	r6, r4
 8003fc4:	d105      	bne.n	8003fd2 <__libc_init_array+0x2e>
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fcc:	4798      	blx	r3
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7ee      	b.n	8003fb0 <__libc_init_array+0xc>
 8003fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd6:	4798      	blx	r3
 8003fd8:	3601      	adds	r6, #1
 8003fda:	e7f2      	b.n	8003fc2 <__libc_init_array+0x1e>
 8003fdc:	08007d3c 	.word	0x08007d3c
 8003fe0:	08007d3c 	.word	0x08007d3c
 8003fe4:	08007d3c 	.word	0x08007d3c
 8003fe8:	08007d40 	.word	0x08007d40

08003fec <__retarget_lock_init_recursive>:
 8003fec:	4770      	bx	lr

08003fee <__retarget_lock_acquire_recursive>:
 8003fee:	4770      	bx	lr

08003ff0 <__retarget_lock_release_recursive>:
 8003ff0:	4770      	bx	lr
	...

08003ff4 <malloc>:
 8003ff4:	4b02      	ldr	r3, [pc, #8]	; (8004000 <malloc+0xc>)
 8003ff6:	4601      	mov	r1, r0
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	f000 b857 	b.w	80040ac <_malloc_r>
 8003ffe:	bf00      	nop
 8004000:	20000030 	.word	0x20000030

08004004 <memset>:
 8004004:	4402      	add	r2, r0
 8004006:	4603      	mov	r3, r0
 8004008:	4293      	cmp	r3, r2
 800400a:	d100      	bne.n	800400e <memset+0xa>
 800400c:	4770      	bx	lr
 800400e:	f803 1b01 	strb.w	r1, [r3], #1
 8004012:	e7f9      	b.n	8004008 <memset+0x4>

08004014 <_free_r>:
 8004014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004016:	2900      	cmp	r1, #0
 8004018:	d044      	beq.n	80040a4 <_free_r+0x90>
 800401a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800401e:	9001      	str	r0, [sp, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f1a1 0404 	sub.w	r4, r1, #4
 8004026:	bfb8      	it	lt
 8004028:	18e4      	addlt	r4, r4, r3
 800402a:	f002 f809 	bl	8006040 <__malloc_lock>
 800402e:	4a1e      	ldr	r2, [pc, #120]	; (80040a8 <_free_r+0x94>)
 8004030:	9801      	ldr	r0, [sp, #4]
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	b933      	cbnz	r3, 8004044 <_free_r+0x30>
 8004036:	6063      	str	r3, [r4, #4]
 8004038:	6014      	str	r4, [r2, #0]
 800403a:	b003      	add	sp, #12
 800403c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004040:	f002 b804 	b.w	800604c <__malloc_unlock>
 8004044:	42a3      	cmp	r3, r4
 8004046:	d908      	bls.n	800405a <_free_r+0x46>
 8004048:	6825      	ldr	r5, [r4, #0]
 800404a:	1961      	adds	r1, r4, r5
 800404c:	428b      	cmp	r3, r1
 800404e:	bf01      	itttt	eq
 8004050:	6819      	ldreq	r1, [r3, #0]
 8004052:	685b      	ldreq	r3, [r3, #4]
 8004054:	1949      	addeq	r1, r1, r5
 8004056:	6021      	streq	r1, [r4, #0]
 8004058:	e7ed      	b.n	8004036 <_free_r+0x22>
 800405a:	461a      	mov	r2, r3
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	b10b      	cbz	r3, 8004064 <_free_r+0x50>
 8004060:	42a3      	cmp	r3, r4
 8004062:	d9fa      	bls.n	800405a <_free_r+0x46>
 8004064:	6811      	ldr	r1, [r2, #0]
 8004066:	1855      	adds	r5, r2, r1
 8004068:	42a5      	cmp	r5, r4
 800406a:	d10b      	bne.n	8004084 <_free_r+0x70>
 800406c:	6824      	ldr	r4, [r4, #0]
 800406e:	4421      	add	r1, r4
 8004070:	1854      	adds	r4, r2, r1
 8004072:	42a3      	cmp	r3, r4
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	d1e0      	bne.n	800403a <_free_r+0x26>
 8004078:	681c      	ldr	r4, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	6053      	str	r3, [r2, #4]
 800407e:	4421      	add	r1, r4
 8004080:	6011      	str	r1, [r2, #0]
 8004082:	e7da      	b.n	800403a <_free_r+0x26>
 8004084:	d902      	bls.n	800408c <_free_r+0x78>
 8004086:	230c      	movs	r3, #12
 8004088:	6003      	str	r3, [r0, #0]
 800408a:	e7d6      	b.n	800403a <_free_r+0x26>
 800408c:	6825      	ldr	r5, [r4, #0]
 800408e:	1961      	adds	r1, r4, r5
 8004090:	428b      	cmp	r3, r1
 8004092:	bf04      	itt	eq
 8004094:	6819      	ldreq	r1, [r3, #0]
 8004096:	685b      	ldreq	r3, [r3, #4]
 8004098:	6063      	str	r3, [r4, #4]
 800409a:	bf04      	itt	eq
 800409c:	1949      	addeq	r1, r1, r5
 800409e:	6021      	streq	r1, [r4, #0]
 80040a0:	6054      	str	r4, [r2, #4]
 80040a2:	e7ca      	b.n	800403a <_free_r+0x26>
 80040a4:	b003      	add	sp, #12
 80040a6:	bd30      	pop	{r4, r5, pc}
 80040a8:	20000338 	.word	0x20000338

080040ac <_malloc_r>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	1ccd      	adds	r5, r1, #3
 80040b0:	f025 0503 	bic.w	r5, r5, #3
 80040b4:	3508      	adds	r5, #8
 80040b6:	2d0c      	cmp	r5, #12
 80040b8:	bf38      	it	cc
 80040ba:	250c      	movcc	r5, #12
 80040bc:	2d00      	cmp	r5, #0
 80040be:	4606      	mov	r6, r0
 80040c0:	db01      	blt.n	80040c6 <_malloc_r+0x1a>
 80040c2:	42a9      	cmp	r1, r5
 80040c4:	d903      	bls.n	80040ce <_malloc_r+0x22>
 80040c6:	230c      	movs	r3, #12
 80040c8:	6033      	str	r3, [r6, #0]
 80040ca:	2000      	movs	r0, #0
 80040cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ce:	f001 ffb7 	bl	8006040 <__malloc_lock>
 80040d2:	4921      	ldr	r1, [pc, #132]	; (8004158 <_malloc_r+0xac>)
 80040d4:	680a      	ldr	r2, [r1, #0]
 80040d6:	4614      	mov	r4, r2
 80040d8:	b99c      	cbnz	r4, 8004102 <_malloc_r+0x56>
 80040da:	4f20      	ldr	r7, [pc, #128]	; (800415c <_malloc_r+0xb0>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	b923      	cbnz	r3, 80040ea <_malloc_r+0x3e>
 80040e0:	4621      	mov	r1, r4
 80040e2:	4630      	mov	r0, r6
 80040e4:	f000 fe18 	bl	8004d18 <_sbrk_r>
 80040e8:	6038      	str	r0, [r7, #0]
 80040ea:	4629      	mov	r1, r5
 80040ec:	4630      	mov	r0, r6
 80040ee:	f000 fe13 	bl	8004d18 <_sbrk_r>
 80040f2:	1c43      	adds	r3, r0, #1
 80040f4:	d123      	bne.n	800413e <_malloc_r+0x92>
 80040f6:	230c      	movs	r3, #12
 80040f8:	6033      	str	r3, [r6, #0]
 80040fa:	4630      	mov	r0, r6
 80040fc:	f001 ffa6 	bl	800604c <__malloc_unlock>
 8004100:	e7e3      	b.n	80040ca <_malloc_r+0x1e>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	1b5b      	subs	r3, r3, r5
 8004106:	d417      	bmi.n	8004138 <_malloc_r+0x8c>
 8004108:	2b0b      	cmp	r3, #11
 800410a:	d903      	bls.n	8004114 <_malloc_r+0x68>
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	441c      	add	r4, r3
 8004110:	6025      	str	r5, [r4, #0]
 8004112:	e004      	b.n	800411e <_malloc_r+0x72>
 8004114:	6863      	ldr	r3, [r4, #4]
 8004116:	42a2      	cmp	r2, r4
 8004118:	bf0c      	ite	eq
 800411a:	600b      	streq	r3, [r1, #0]
 800411c:	6053      	strne	r3, [r2, #4]
 800411e:	4630      	mov	r0, r6
 8004120:	f001 ff94 	bl	800604c <__malloc_unlock>
 8004124:	f104 000b 	add.w	r0, r4, #11
 8004128:	1d23      	adds	r3, r4, #4
 800412a:	f020 0007 	bic.w	r0, r0, #7
 800412e:	1ac2      	subs	r2, r0, r3
 8004130:	d0cc      	beq.n	80040cc <_malloc_r+0x20>
 8004132:	1a1b      	subs	r3, r3, r0
 8004134:	50a3      	str	r3, [r4, r2]
 8004136:	e7c9      	b.n	80040cc <_malloc_r+0x20>
 8004138:	4622      	mov	r2, r4
 800413a:	6864      	ldr	r4, [r4, #4]
 800413c:	e7cc      	b.n	80040d8 <_malloc_r+0x2c>
 800413e:	1cc4      	adds	r4, r0, #3
 8004140:	f024 0403 	bic.w	r4, r4, #3
 8004144:	42a0      	cmp	r0, r4
 8004146:	d0e3      	beq.n	8004110 <_malloc_r+0x64>
 8004148:	1a21      	subs	r1, r4, r0
 800414a:	4630      	mov	r0, r6
 800414c:	f000 fde4 	bl	8004d18 <_sbrk_r>
 8004150:	3001      	adds	r0, #1
 8004152:	d1dd      	bne.n	8004110 <_malloc_r+0x64>
 8004154:	e7cf      	b.n	80040f6 <_malloc_r+0x4a>
 8004156:	bf00      	nop
 8004158:	20000338 	.word	0x20000338
 800415c:	2000033c 	.word	0x2000033c

08004160 <__cvt>:
 8004160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	ec55 4b10 	vmov	r4, r5, d0
 8004168:	2d00      	cmp	r5, #0
 800416a:	460e      	mov	r6, r1
 800416c:	4619      	mov	r1, r3
 800416e:	462b      	mov	r3, r5
 8004170:	bfbb      	ittet	lt
 8004172:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004176:	461d      	movlt	r5, r3
 8004178:	2300      	movge	r3, #0
 800417a:	232d      	movlt	r3, #45	; 0x2d
 800417c:	700b      	strb	r3, [r1, #0]
 800417e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004180:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004184:	4691      	mov	r9, r2
 8004186:	f023 0820 	bic.w	r8, r3, #32
 800418a:	bfbc      	itt	lt
 800418c:	4622      	movlt	r2, r4
 800418e:	4614      	movlt	r4, r2
 8004190:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004194:	d005      	beq.n	80041a2 <__cvt+0x42>
 8004196:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800419a:	d100      	bne.n	800419e <__cvt+0x3e>
 800419c:	3601      	adds	r6, #1
 800419e:	2102      	movs	r1, #2
 80041a0:	e000      	b.n	80041a4 <__cvt+0x44>
 80041a2:	2103      	movs	r1, #3
 80041a4:	ab03      	add	r3, sp, #12
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	ab02      	add	r3, sp, #8
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	ec45 4b10 	vmov	d0, r4, r5
 80041b0:	4653      	mov	r3, sl
 80041b2:	4632      	mov	r2, r6
 80041b4:	f000 ff14 	bl	8004fe0 <_dtoa_r>
 80041b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80041bc:	4607      	mov	r7, r0
 80041be:	d102      	bne.n	80041c6 <__cvt+0x66>
 80041c0:	f019 0f01 	tst.w	r9, #1
 80041c4:	d022      	beq.n	800420c <__cvt+0xac>
 80041c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80041ca:	eb07 0906 	add.w	r9, r7, r6
 80041ce:	d110      	bne.n	80041f2 <__cvt+0x92>
 80041d0:	783b      	ldrb	r3, [r7, #0]
 80041d2:	2b30      	cmp	r3, #48	; 0x30
 80041d4:	d10a      	bne.n	80041ec <__cvt+0x8c>
 80041d6:	2200      	movs	r2, #0
 80041d8:	2300      	movs	r3, #0
 80041da:	4620      	mov	r0, r4
 80041dc:	4629      	mov	r1, r5
 80041de:	f7fc fc53 	bl	8000a88 <__aeabi_dcmpeq>
 80041e2:	b918      	cbnz	r0, 80041ec <__cvt+0x8c>
 80041e4:	f1c6 0601 	rsb	r6, r6, #1
 80041e8:	f8ca 6000 	str.w	r6, [sl]
 80041ec:	f8da 3000 	ldr.w	r3, [sl]
 80041f0:	4499      	add	r9, r3
 80041f2:	2200      	movs	r2, #0
 80041f4:	2300      	movs	r3, #0
 80041f6:	4620      	mov	r0, r4
 80041f8:	4629      	mov	r1, r5
 80041fa:	f7fc fc45 	bl	8000a88 <__aeabi_dcmpeq>
 80041fe:	b108      	cbz	r0, 8004204 <__cvt+0xa4>
 8004200:	f8cd 900c 	str.w	r9, [sp, #12]
 8004204:	2230      	movs	r2, #48	; 0x30
 8004206:	9b03      	ldr	r3, [sp, #12]
 8004208:	454b      	cmp	r3, r9
 800420a:	d307      	bcc.n	800421c <__cvt+0xbc>
 800420c:	9b03      	ldr	r3, [sp, #12]
 800420e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004210:	1bdb      	subs	r3, r3, r7
 8004212:	4638      	mov	r0, r7
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	b004      	add	sp, #16
 8004218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421c:	1c59      	adds	r1, r3, #1
 800421e:	9103      	str	r1, [sp, #12]
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	e7f0      	b.n	8004206 <__cvt+0xa6>

08004224 <__exponent>:
 8004224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004226:	4603      	mov	r3, r0
 8004228:	2900      	cmp	r1, #0
 800422a:	bfb8      	it	lt
 800422c:	4249      	neglt	r1, r1
 800422e:	f803 2b02 	strb.w	r2, [r3], #2
 8004232:	bfb4      	ite	lt
 8004234:	222d      	movlt	r2, #45	; 0x2d
 8004236:	222b      	movge	r2, #43	; 0x2b
 8004238:	2909      	cmp	r1, #9
 800423a:	7042      	strb	r2, [r0, #1]
 800423c:	dd2a      	ble.n	8004294 <__exponent+0x70>
 800423e:	f10d 0407 	add.w	r4, sp, #7
 8004242:	46a4      	mov	ip, r4
 8004244:	270a      	movs	r7, #10
 8004246:	46a6      	mov	lr, r4
 8004248:	460a      	mov	r2, r1
 800424a:	fb91 f6f7 	sdiv	r6, r1, r7
 800424e:	fb07 1516 	mls	r5, r7, r6, r1
 8004252:	3530      	adds	r5, #48	; 0x30
 8004254:	2a63      	cmp	r2, #99	; 0x63
 8004256:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800425a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800425e:	4631      	mov	r1, r6
 8004260:	dcf1      	bgt.n	8004246 <__exponent+0x22>
 8004262:	3130      	adds	r1, #48	; 0x30
 8004264:	f1ae 0502 	sub.w	r5, lr, #2
 8004268:	f804 1c01 	strb.w	r1, [r4, #-1]
 800426c:	1c44      	adds	r4, r0, #1
 800426e:	4629      	mov	r1, r5
 8004270:	4561      	cmp	r1, ip
 8004272:	d30a      	bcc.n	800428a <__exponent+0x66>
 8004274:	f10d 0209 	add.w	r2, sp, #9
 8004278:	eba2 020e 	sub.w	r2, r2, lr
 800427c:	4565      	cmp	r5, ip
 800427e:	bf88      	it	hi
 8004280:	2200      	movhi	r2, #0
 8004282:	4413      	add	r3, r2
 8004284:	1a18      	subs	r0, r3, r0
 8004286:	b003      	add	sp, #12
 8004288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800428e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004292:	e7ed      	b.n	8004270 <__exponent+0x4c>
 8004294:	2330      	movs	r3, #48	; 0x30
 8004296:	3130      	adds	r1, #48	; 0x30
 8004298:	7083      	strb	r3, [r0, #2]
 800429a:	70c1      	strb	r1, [r0, #3]
 800429c:	1d03      	adds	r3, r0, #4
 800429e:	e7f1      	b.n	8004284 <__exponent+0x60>

080042a0 <_printf_float>:
 80042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a4:	ed2d 8b02 	vpush	{d8}
 80042a8:	b08d      	sub	sp, #52	; 0x34
 80042aa:	460c      	mov	r4, r1
 80042ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80042b0:	4616      	mov	r6, r2
 80042b2:	461f      	mov	r7, r3
 80042b4:	4605      	mov	r5, r0
 80042b6:	f001 fe39 	bl	8005f2c <_localeconv_r>
 80042ba:	f8d0 a000 	ldr.w	sl, [r0]
 80042be:	4650      	mov	r0, sl
 80042c0:	f7fb ff66 	bl	8000190 <strlen>
 80042c4:	2300      	movs	r3, #0
 80042c6:	930a      	str	r3, [sp, #40]	; 0x28
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	9305      	str	r3, [sp, #20]
 80042cc:	f8d8 3000 	ldr.w	r3, [r8]
 80042d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80042d4:	3307      	adds	r3, #7
 80042d6:	f023 0307 	bic.w	r3, r3, #7
 80042da:	f103 0208 	add.w	r2, r3, #8
 80042de:	f8c8 2000 	str.w	r2, [r8]
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80042ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80042ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042f2:	9307      	str	r3, [sp, #28]
 80042f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80042f8:	ee08 0a10 	vmov	s16, r0
 80042fc:	4b9f      	ldr	r3, [pc, #636]	; (800457c <_printf_float+0x2dc>)
 80042fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004306:	f7fc fbf1 	bl	8000aec <__aeabi_dcmpun>
 800430a:	bb88      	cbnz	r0, 8004370 <_printf_float+0xd0>
 800430c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004310:	4b9a      	ldr	r3, [pc, #616]	; (800457c <_printf_float+0x2dc>)
 8004312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004316:	f7fc fbcb 	bl	8000ab0 <__aeabi_dcmple>
 800431a:	bb48      	cbnz	r0, 8004370 <_printf_float+0xd0>
 800431c:	2200      	movs	r2, #0
 800431e:	2300      	movs	r3, #0
 8004320:	4640      	mov	r0, r8
 8004322:	4649      	mov	r1, r9
 8004324:	f7fc fbba 	bl	8000a9c <__aeabi_dcmplt>
 8004328:	b110      	cbz	r0, 8004330 <_printf_float+0x90>
 800432a:	232d      	movs	r3, #45	; 0x2d
 800432c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004330:	4b93      	ldr	r3, [pc, #588]	; (8004580 <_printf_float+0x2e0>)
 8004332:	4894      	ldr	r0, [pc, #592]	; (8004584 <_printf_float+0x2e4>)
 8004334:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004338:	bf94      	ite	ls
 800433a:	4698      	movls	r8, r3
 800433c:	4680      	movhi	r8, r0
 800433e:	2303      	movs	r3, #3
 8004340:	6123      	str	r3, [r4, #16]
 8004342:	9b05      	ldr	r3, [sp, #20]
 8004344:	f023 0204 	bic.w	r2, r3, #4
 8004348:	6022      	str	r2, [r4, #0]
 800434a:	f04f 0900 	mov.w	r9, #0
 800434e:	9700      	str	r7, [sp, #0]
 8004350:	4633      	mov	r3, r6
 8004352:	aa0b      	add	r2, sp, #44	; 0x2c
 8004354:	4621      	mov	r1, r4
 8004356:	4628      	mov	r0, r5
 8004358:	f000 f9d8 	bl	800470c <_printf_common>
 800435c:	3001      	adds	r0, #1
 800435e:	f040 8090 	bne.w	8004482 <_printf_float+0x1e2>
 8004362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004366:	b00d      	add	sp, #52	; 0x34
 8004368:	ecbd 8b02 	vpop	{d8}
 800436c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	4640      	mov	r0, r8
 8004376:	4649      	mov	r1, r9
 8004378:	f7fc fbb8 	bl	8000aec <__aeabi_dcmpun>
 800437c:	b140      	cbz	r0, 8004390 <_printf_float+0xf0>
 800437e:	464b      	mov	r3, r9
 8004380:	2b00      	cmp	r3, #0
 8004382:	bfbc      	itt	lt
 8004384:	232d      	movlt	r3, #45	; 0x2d
 8004386:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800438a:	487f      	ldr	r0, [pc, #508]	; (8004588 <_printf_float+0x2e8>)
 800438c:	4b7f      	ldr	r3, [pc, #508]	; (800458c <_printf_float+0x2ec>)
 800438e:	e7d1      	b.n	8004334 <_printf_float+0x94>
 8004390:	6863      	ldr	r3, [r4, #4]
 8004392:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004396:	9206      	str	r2, [sp, #24]
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	d13f      	bne.n	800441c <_printf_float+0x17c>
 800439c:	2306      	movs	r3, #6
 800439e:	6063      	str	r3, [r4, #4]
 80043a0:	9b05      	ldr	r3, [sp, #20]
 80043a2:	6861      	ldr	r1, [r4, #4]
 80043a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80043a8:	2300      	movs	r3, #0
 80043aa:	9303      	str	r3, [sp, #12]
 80043ac:	ab0a      	add	r3, sp, #40	; 0x28
 80043ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80043b2:	ab09      	add	r3, sp, #36	; 0x24
 80043b4:	ec49 8b10 	vmov	d0, r8, r9
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	6022      	str	r2, [r4, #0]
 80043bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80043c0:	4628      	mov	r0, r5
 80043c2:	f7ff fecd 	bl	8004160 <__cvt>
 80043c6:	9b06      	ldr	r3, [sp, #24]
 80043c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043ca:	2b47      	cmp	r3, #71	; 0x47
 80043cc:	4680      	mov	r8, r0
 80043ce:	d108      	bne.n	80043e2 <_printf_float+0x142>
 80043d0:	1cc8      	adds	r0, r1, #3
 80043d2:	db02      	blt.n	80043da <_printf_float+0x13a>
 80043d4:	6863      	ldr	r3, [r4, #4]
 80043d6:	4299      	cmp	r1, r3
 80043d8:	dd41      	ble.n	800445e <_printf_float+0x1be>
 80043da:	f1ab 0b02 	sub.w	fp, fp, #2
 80043de:	fa5f fb8b 	uxtb.w	fp, fp
 80043e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043e6:	d820      	bhi.n	800442a <_printf_float+0x18a>
 80043e8:	3901      	subs	r1, #1
 80043ea:	465a      	mov	r2, fp
 80043ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80043f0:	9109      	str	r1, [sp, #36]	; 0x24
 80043f2:	f7ff ff17 	bl	8004224 <__exponent>
 80043f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043f8:	1813      	adds	r3, r2, r0
 80043fa:	2a01      	cmp	r2, #1
 80043fc:	4681      	mov	r9, r0
 80043fe:	6123      	str	r3, [r4, #16]
 8004400:	dc02      	bgt.n	8004408 <_printf_float+0x168>
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	07d2      	lsls	r2, r2, #31
 8004406:	d501      	bpl.n	800440c <_printf_float+0x16c>
 8004408:	3301      	adds	r3, #1
 800440a:	6123      	str	r3, [r4, #16]
 800440c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004410:	2b00      	cmp	r3, #0
 8004412:	d09c      	beq.n	800434e <_printf_float+0xae>
 8004414:	232d      	movs	r3, #45	; 0x2d
 8004416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800441a:	e798      	b.n	800434e <_printf_float+0xae>
 800441c:	9a06      	ldr	r2, [sp, #24]
 800441e:	2a47      	cmp	r2, #71	; 0x47
 8004420:	d1be      	bne.n	80043a0 <_printf_float+0x100>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1bc      	bne.n	80043a0 <_printf_float+0x100>
 8004426:	2301      	movs	r3, #1
 8004428:	e7b9      	b.n	800439e <_printf_float+0xfe>
 800442a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800442e:	d118      	bne.n	8004462 <_printf_float+0x1c2>
 8004430:	2900      	cmp	r1, #0
 8004432:	6863      	ldr	r3, [r4, #4]
 8004434:	dd0b      	ble.n	800444e <_printf_float+0x1ae>
 8004436:	6121      	str	r1, [r4, #16]
 8004438:	b913      	cbnz	r3, 8004440 <_printf_float+0x1a0>
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	07d0      	lsls	r0, r2, #31
 800443e:	d502      	bpl.n	8004446 <_printf_float+0x1a6>
 8004440:	3301      	adds	r3, #1
 8004442:	440b      	add	r3, r1
 8004444:	6123      	str	r3, [r4, #16]
 8004446:	65a1      	str	r1, [r4, #88]	; 0x58
 8004448:	f04f 0900 	mov.w	r9, #0
 800444c:	e7de      	b.n	800440c <_printf_float+0x16c>
 800444e:	b913      	cbnz	r3, 8004456 <_printf_float+0x1b6>
 8004450:	6822      	ldr	r2, [r4, #0]
 8004452:	07d2      	lsls	r2, r2, #31
 8004454:	d501      	bpl.n	800445a <_printf_float+0x1ba>
 8004456:	3302      	adds	r3, #2
 8004458:	e7f4      	b.n	8004444 <_printf_float+0x1a4>
 800445a:	2301      	movs	r3, #1
 800445c:	e7f2      	b.n	8004444 <_printf_float+0x1a4>
 800445e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004464:	4299      	cmp	r1, r3
 8004466:	db05      	blt.n	8004474 <_printf_float+0x1d4>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	6121      	str	r1, [r4, #16]
 800446c:	07d8      	lsls	r0, r3, #31
 800446e:	d5ea      	bpl.n	8004446 <_printf_float+0x1a6>
 8004470:	1c4b      	adds	r3, r1, #1
 8004472:	e7e7      	b.n	8004444 <_printf_float+0x1a4>
 8004474:	2900      	cmp	r1, #0
 8004476:	bfd4      	ite	le
 8004478:	f1c1 0202 	rsble	r2, r1, #2
 800447c:	2201      	movgt	r2, #1
 800447e:	4413      	add	r3, r2
 8004480:	e7e0      	b.n	8004444 <_printf_float+0x1a4>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	055a      	lsls	r2, r3, #21
 8004486:	d407      	bmi.n	8004498 <_printf_float+0x1f8>
 8004488:	6923      	ldr	r3, [r4, #16]
 800448a:	4642      	mov	r2, r8
 800448c:	4631      	mov	r1, r6
 800448e:	4628      	mov	r0, r5
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	d12c      	bne.n	80044f0 <_printf_float+0x250>
 8004496:	e764      	b.n	8004362 <_printf_float+0xc2>
 8004498:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800449c:	f240 80e0 	bls.w	8004660 <_printf_float+0x3c0>
 80044a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044a4:	2200      	movs	r2, #0
 80044a6:	2300      	movs	r3, #0
 80044a8:	f7fc faee 	bl	8000a88 <__aeabi_dcmpeq>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d034      	beq.n	800451a <_printf_float+0x27a>
 80044b0:	4a37      	ldr	r2, [pc, #220]	; (8004590 <_printf_float+0x2f0>)
 80044b2:	2301      	movs	r3, #1
 80044b4:	4631      	mov	r1, r6
 80044b6:	4628      	mov	r0, r5
 80044b8:	47b8      	blx	r7
 80044ba:	3001      	adds	r0, #1
 80044bc:	f43f af51 	beq.w	8004362 <_printf_float+0xc2>
 80044c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044c4:	429a      	cmp	r2, r3
 80044c6:	db02      	blt.n	80044ce <_printf_float+0x22e>
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	07d8      	lsls	r0, r3, #31
 80044cc:	d510      	bpl.n	80044f0 <_printf_float+0x250>
 80044ce:	ee18 3a10 	vmov	r3, s16
 80044d2:	4652      	mov	r2, sl
 80044d4:	4631      	mov	r1, r6
 80044d6:	4628      	mov	r0, r5
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	f43f af41 	beq.w	8004362 <_printf_float+0xc2>
 80044e0:	f04f 0800 	mov.w	r8, #0
 80044e4:	f104 091a 	add.w	r9, r4, #26
 80044e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ea:	3b01      	subs	r3, #1
 80044ec:	4543      	cmp	r3, r8
 80044ee:	dc09      	bgt.n	8004504 <_printf_float+0x264>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	079b      	lsls	r3, r3, #30
 80044f4:	f100 8105 	bmi.w	8004702 <_printf_float+0x462>
 80044f8:	68e0      	ldr	r0, [r4, #12]
 80044fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044fc:	4298      	cmp	r0, r3
 80044fe:	bfb8      	it	lt
 8004500:	4618      	movlt	r0, r3
 8004502:	e730      	b.n	8004366 <_printf_float+0xc6>
 8004504:	2301      	movs	r3, #1
 8004506:	464a      	mov	r2, r9
 8004508:	4631      	mov	r1, r6
 800450a:	4628      	mov	r0, r5
 800450c:	47b8      	blx	r7
 800450e:	3001      	adds	r0, #1
 8004510:	f43f af27 	beq.w	8004362 <_printf_float+0xc2>
 8004514:	f108 0801 	add.w	r8, r8, #1
 8004518:	e7e6      	b.n	80044e8 <_printf_float+0x248>
 800451a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800451c:	2b00      	cmp	r3, #0
 800451e:	dc39      	bgt.n	8004594 <_printf_float+0x2f4>
 8004520:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <_printf_float+0x2f0>)
 8004522:	2301      	movs	r3, #1
 8004524:	4631      	mov	r1, r6
 8004526:	4628      	mov	r0, r5
 8004528:	47b8      	blx	r7
 800452a:	3001      	adds	r0, #1
 800452c:	f43f af19 	beq.w	8004362 <_printf_float+0xc2>
 8004530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004534:	4313      	orrs	r3, r2
 8004536:	d102      	bne.n	800453e <_printf_float+0x29e>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	07d9      	lsls	r1, r3, #31
 800453c:	d5d8      	bpl.n	80044f0 <_printf_float+0x250>
 800453e:	ee18 3a10 	vmov	r3, s16
 8004542:	4652      	mov	r2, sl
 8004544:	4631      	mov	r1, r6
 8004546:	4628      	mov	r0, r5
 8004548:	47b8      	blx	r7
 800454a:	3001      	adds	r0, #1
 800454c:	f43f af09 	beq.w	8004362 <_printf_float+0xc2>
 8004550:	f04f 0900 	mov.w	r9, #0
 8004554:	f104 0a1a 	add.w	sl, r4, #26
 8004558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800455a:	425b      	negs	r3, r3
 800455c:	454b      	cmp	r3, r9
 800455e:	dc01      	bgt.n	8004564 <_printf_float+0x2c4>
 8004560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004562:	e792      	b.n	800448a <_printf_float+0x1ea>
 8004564:	2301      	movs	r3, #1
 8004566:	4652      	mov	r2, sl
 8004568:	4631      	mov	r1, r6
 800456a:	4628      	mov	r0, r5
 800456c:	47b8      	blx	r7
 800456e:	3001      	adds	r0, #1
 8004570:	f43f aef7 	beq.w	8004362 <_printf_float+0xc2>
 8004574:	f109 0901 	add.w	r9, r9, #1
 8004578:	e7ee      	b.n	8004558 <_printf_float+0x2b8>
 800457a:	bf00      	nop
 800457c:	7fefffff 	.word	0x7fefffff
 8004580:	08007984 	.word	0x08007984
 8004584:	08007988 	.word	0x08007988
 8004588:	08007990 	.word	0x08007990
 800458c:	0800798c 	.word	0x0800798c
 8004590:	08007994 	.word	0x08007994
 8004594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004598:	429a      	cmp	r2, r3
 800459a:	bfa8      	it	ge
 800459c:	461a      	movge	r2, r3
 800459e:	2a00      	cmp	r2, #0
 80045a0:	4691      	mov	r9, r2
 80045a2:	dc37      	bgt.n	8004614 <_printf_float+0x374>
 80045a4:	f04f 0b00 	mov.w	fp, #0
 80045a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045ac:	f104 021a 	add.w	r2, r4, #26
 80045b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045b2:	9305      	str	r3, [sp, #20]
 80045b4:	eba3 0309 	sub.w	r3, r3, r9
 80045b8:	455b      	cmp	r3, fp
 80045ba:	dc33      	bgt.n	8004624 <_printf_float+0x384>
 80045bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045c0:	429a      	cmp	r2, r3
 80045c2:	db3b      	blt.n	800463c <_printf_float+0x39c>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	07da      	lsls	r2, r3, #31
 80045c8:	d438      	bmi.n	800463c <_printf_float+0x39c>
 80045ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045cc:	9a05      	ldr	r2, [sp, #20]
 80045ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045d0:	1a9a      	subs	r2, r3, r2
 80045d2:	eba3 0901 	sub.w	r9, r3, r1
 80045d6:	4591      	cmp	r9, r2
 80045d8:	bfa8      	it	ge
 80045da:	4691      	movge	r9, r2
 80045dc:	f1b9 0f00 	cmp.w	r9, #0
 80045e0:	dc35      	bgt.n	800464e <_printf_float+0x3ae>
 80045e2:	f04f 0800 	mov.w	r8, #0
 80045e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045ea:	f104 0a1a 	add.w	sl, r4, #26
 80045ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045f2:	1a9b      	subs	r3, r3, r2
 80045f4:	eba3 0309 	sub.w	r3, r3, r9
 80045f8:	4543      	cmp	r3, r8
 80045fa:	f77f af79 	ble.w	80044f0 <_printf_float+0x250>
 80045fe:	2301      	movs	r3, #1
 8004600:	4652      	mov	r2, sl
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	f43f aeaa 	beq.w	8004362 <_printf_float+0xc2>
 800460e:	f108 0801 	add.w	r8, r8, #1
 8004612:	e7ec      	b.n	80045ee <_printf_float+0x34e>
 8004614:	4613      	mov	r3, r2
 8004616:	4631      	mov	r1, r6
 8004618:	4642      	mov	r2, r8
 800461a:	4628      	mov	r0, r5
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	d1c0      	bne.n	80045a4 <_printf_float+0x304>
 8004622:	e69e      	b.n	8004362 <_printf_float+0xc2>
 8004624:	2301      	movs	r3, #1
 8004626:	4631      	mov	r1, r6
 8004628:	4628      	mov	r0, r5
 800462a:	9205      	str	r2, [sp, #20]
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	f43f ae97 	beq.w	8004362 <_printf_float+0xc2>
 8004634:	9a05      	ldr	r2, [sp, #20]
 8004636:	f10b 0b01 	add.w	fp, fp, #1
 800463a:	e7b9      	b.n	80045b0 <_printf_float+0x310>
 800463c:	ee18 3a10 	vmov	r3, s16
 8004640:	4652      	mov	r2, sl
 8004642:	4631      	mov	r1, r6
 8004644:	4628      	mov	r0, r5
 8004646:	47b8      	blx	r7
 8004648:	3001      	adds	r0, #1
 800464a:	d1be      	bne.n	80045ca <_printf_float+0x32a>
 800464c:	e689      	b.n	8004362 <_printf_float+0xc2>
 800464e:	9a05      	ldr	r2, [sp, #20]
 8004650:	464b      	mov	r3, r9
 8004652:	4442      	add	r2, r8
 8004654:	4631      	mov	r1, r6
 8004656:	4628      	mov	r0, r5
 8004658:	47b8      	blx	r7
 800465a:	3001      	adds	r0, #1
 800465c:	d1c1      	bne.n	80045e2 <_printf_float+0x342>
 800465e:	e680      	b.n	8004362 <_printf_float+0xc2>
 8004660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004662:	2a01      	cmp	r2, #1
 8004664:	dc01      	bgt.n	800466a <_printf_float+0x3ca>
 8004666:	07db      	lsls	r3, r3, #31
 8004668:	d538      	bpl.n	80046dc <_printf_float+0x43c>
 800466a:	2301      	movs	r3, #1
 800466c:	4642      	mov	r2, r8
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	47b8      	blx	r7
 8004674:	3001      	adds	r0, #1
 8004676:	f43f ae74 	beq.w	8004362 <_printf_float+0xc2>
 800467a:	ee18 3a10 	vmov	r3, s16
 800467e:	4652      	mov	r2, sl
 8004680:	4631      	mov	r1, r6
 8004682:	4628      	mov	r0, r5
 8004684:	47b8      	blx	r7
 8004686:	3001      	adds	r0, #1
 8004688:	f43f ae6b 	beq.w	8004362 <_printf_float+0xc2>
 800468c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004690:	2200      	movs	r2, #0
 8004692:	2300      	movs	r3, #0
 8004694:	f7fc f9f8 	bl	8000a88 <__aeabi_dcmpeq>
 8004698:	b9d8      	cbnz	r0, 80046d2 <_printf_float+0x432>
 800469a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800469c:	f108 0201 	add.w	r2, r8, #1
 80046a0:	3b01      	subs	r3, #1
 80046a2:	4631      	mov	r1, r6
 80046a4:	4628      	mov	r0, r5
 80046a6:	47b8      	blx	r7
 80046a8:	3001      	adds	r0, #1
 80046aa:	d10e      	bne.n	80046ca <_printf_float+0x42a>
 80046ac:	e659      	b.n	8004362 <_printf_float+0xc2>
 80046ae:	2301      	movs	r3, #1
 80046b0:	4652      	mov	r2, sl
 80046b2:	4631      	mov	r1, r6
 80046b4:	4628      	mov	r0, r5
 80046b6:	47b8      	blx	r7
 80046b8:	3001      	adds	r0, #1
 80046ba:	f43f ae52 	beq.w	8004362 <_printf_float+0xc2>
 80046be:	f108 0801 	add.w	r8, r8, #1
 80046c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c4:	3b01      	subs	r3, #1
 80046c6:	4543      	cmp	r3, r8
 80046c8:	dcf1      	bgt.n	80046ae <_printf_float+0x40e>
 80046ca:	464b      	mov	r3, r9
 80046cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80046d0:	e6dc      	b.n	800448c <_printf_float+0x1ec>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	f104 0a1a 	add.w	sl, r4, #26
 80046da:	e7f2      	b.n	80046c2 <_printf_float+0x422>
 80046dc:	2301      	movs	r3, #1
 80046de:	4642      	mov	r2, r8
 80046e0:	e7df      	b.n	80046a2 <_printf_float+0x402>
 80046e2:	2301      	movs	r3, #1
 80046e4:	464a      	mov	r2, r9
 80046e6:	4631      	mov	r1, r6
 80046e8:	4628      	mov	r0, r5
 80046ea:	47b8      	blx	r7
 80046ec:	3001      	adds	r0, #1
 80046ee:	f43f ae38 	beq.w	8004362 <_printf_float+0xc2>
 80046f2:	f108 0801 	add.w	r8, r8, #1
 80046f6:	68e3      	ldr	r3, [r4, #12]
 80046f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046fa:	1a5b      	subs	r3, r3, r1
 80046fc:	4543      	cmp	r3, r8
 80046fe:	dcf0      	bgt.n	80046e2 <_printf_float+0x442>
 8004700:	e6fa      	b.n	80044f8 <_printf_float+0x258>
 8004702:	f04f 0800 	mov.w	r8, #0
 8004706:	f104 0919 	add.w	r9, r4, #25
 800470a:	e7f4      	b.n	80046f6 <_printf_float+0x456>

0800470c <_printf_common>:
 800470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004710:	4616      	mov	r6, r2
 8004712:	4699      	mov	r9, r3
 8004714:	688a      	ldr	r2, [r1, #8]
 8004716:	690b      	ldr	r3, [r1, #16]
 8004718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800471c:	4293      	cmp	r3, r2
 800471e:	bfb8      	it	lt
 8004720:	4613      	movlt	r3, r2
 8004722:	6033      	str	r3, [r6, #0]
 8004724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004728:	4607      	mov	r7, r0
 800472a:	460c      	mov	r4, r1
 800472c:	b10a      	cbz	r2, 8004732 <_printf_common+0x26>
 800472e:	3301      	adds	r3, #1
 8004730:	6033      	str	r3, [r6, #0]
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	0699      	lsls	r1, r3, #26
 8004736:	bf42      	ittt	mi
 8004738:	6833      	ldrmi	r3, [r6, #0]
 800473a:	3302      	addmi	r3, #2
 800473c:	6033      	strmi	r3, [r6, #0]
 800473e:	6825      	ldr	r5, [r4, #0]
 8004740:	f015 0506 	ands.w	r5, r5, #6
 8004744:	d106      	bne.n	8004754 <_printf_common+0x48>
 8004746:	f104 0a19 	add.w	sl, r4, #25
 800474a:	68e3      	ldr	r3, [r4, #12]
 800474c:	6832      	ldr	r2, [r6, #0]
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	42ab      	cmp	r3, r5
 8004752:	dc26      	bgt.n	80047a2 <_printf_common+0x96>
 8004754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004758:	1e13      	subs	r3, r2, #0
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	bf18      	it	ne
 800475e:	2301      	movne	r3, #1
 8004760:	0692      	lsls	r2, r2, #26
 8004762:	d42b      	bmi.n	80047bc <_printf_common+0xb0>
 8004764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004768:	4649      	mov	r1, r9
 800476a:	4638      	mov	r0, r7
 800476c:	47c0      	blx	r8
 800476e:	3001      	adds	r0, #1
 8004770:	d01e      	beq.n	80047b0 <_printf_common+0xa4>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	68e5      	ldr	r5, [r4, #12]
 8004776:	6832      	ldr	r2, [r6, #0]
 8004778:	f003 0306 	and.w	r3, r3, #6
 800477c:	2b04      	cmp	r3, #4
 800477e:	bf08      	it	eq
 8004780:	1aad      	subeq	r5, r5, r2
 8004782:	68a3      	ldr	r3, [r4, #8]
 8004784:	6922      	ldr	r2, [r4, #16]
 8004786:	bf0c      	ite	eq
 8004788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800478c:	2500      	movne	r5, #0
 800478e:	4293      	cmp	r3, r2
 8004790:	bfc4      	itt	gt
 8004792:	1a9b      	subgt	r3, r3, r2
 8004794:	18ed      	addgt	r5, r5, r3
 8004796:	2600      	movs	r6, #0
 8004798:	341a      	adds	r4, #26
 800479a:	42b5      	cmp	r5, r6
 800479c:	d11a      	bne.n	80047d4 <_printf_common+0xc8>
 800479e:	2000      	movs	r0, #0
 80047a0:	e008      	b.n	80047b4 <_printf_common+0xa8>
 80047a2:	2301      	movs	r3, #1
 80047a4:	4652      	mov	r2, sl
 80047a6:	4649      	mov	r1, r9
 80047a8:	4638      	mov	r0, r7
 80047aa:	47c0      	blx	r8
 80047ac:	3001      	adds	r0, #1
 80047ae:	d103      	bne.n	80047b8 <_printf_common+0xac>
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b8:	3501      	adds	r5, #1
 80047ba:	e7c6      	b.n	800474a <_printf_common+0x3e>
 80047bc:	18e1      	adds	r1, r4, r3
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	2030      	movs	r0, #48	; 0x30
 80047c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047c6:	4422      	add	r2, r4
 80047c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047d0:	3302      	adds	r3, #2
 80047d2:	e7c7      	b.n	8004764 <_printf_common+0x58>
 80047d4:	2301      	movs	r3, #1
 80047d6:	4622      	mov	r2, r4
 80047d8:	4649      	mov	r1, r9
 80047da:	4638      	mov	r0, r7
 80047dc:	47c0      	blx	r8
 80047de:	3001      	adds	r0, #1
 80047e0:	d0e6      	beq.n	80047b0 <_printf_common+0xa4>
 80047e2:	3601      	adds	r6, #1
 80047e4:	e7d9      	b.n	800479a <_printf_common+0x8e>
	...

080047e8 <_printf_i>:
 80047e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047ec:	7e0f      	ldrb	r7, [r1, #24]
 80047ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047f0:	2f78      	cmp	r7, #120	; 0x78
 80047f2:	4691      	mov	r9, r2
 80047f4:	4680      	mov	r8, r0
 80047f6:	460c      	mov	r4, r1
 80047f8:	469a      	mov	sl, r3
 80047fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047fe:	d807      	bhi.n	8004810 <_printf_i+0x28>
 8004800:	2f62      	cmp	r7, #98	; 0x62
 8004802:	d80a      	bhi.n	800481a <_printf_i+0x32>
 8004804:	2f00      	cmp	r7, #0
 8004806:	f000 80d8 	beq.w	80049ba <_printf_i+0x1d2>
 800480a:	2f58      	cmp	r7, #88	; 0x58
 800480c:	f000 80a3 	beq.w	8004956 <_printf_i+0x16e>
 8004810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004818:	e03a      	b.n	8004890 <_printf_i+0xa8>
 800481a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800481e:	2b15      	cmp	r3, #21
 8004820:	d8f6      	bhi.n	8004810 <_printf_i+0x28>
 8004822:	a101      	add	r1, pc, #4	; (adr r1, 8004828 <_printf_i+0x40>)
 8004824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004828:	08004881 	.word	0x08004881
 800482c:	08004895 	.word	0x08004895
 8004830:	08004811 	.word	0x08004811
 8004834:	08004811 	.word	0x08004811
 8004838:	08004811 	.word	0x08004811
 800483c:	08004811 	.word	0x08004811
 8004840:	08004895 	.word	0x08004895
 8004844:	08004811 	.word	0x08004811
 8004848:	08004811 	.word	0x08004811
 800484c:	08004811 	.word	0x08004811
 8004850:	08004811 	.word	0x08004811
 8004854:	080049a1 	.word	0x080049a1
 8004858:	080048c5 	.word	0x080048c5
 800485c:	08004983 	.word	0x08004983
 8004860:	08004811 	.word	0x08004811
 8004864:	08004811 	.word	0x08004811
 8004868:	080049c3 	.word	0x080049c3
 800486c:	08004811 	.word	0x08004811
 8004870:	080048c5 	.word	0x080048c5
 8004874:	08004811 	.word	0x08004811
 8004878:	08004811 	.word	0x08004811
 800487c:	0800498b 	.word	0x0800498b
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	1d1a      	adds	r2, r3, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	602a      	str	r2, [r5, #0]
 8004888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800488c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004890:	2301      	movs	r3, #1
 8004892:	e0a3      	b.n	80049dc <_printf_i+0x1f4>
 8004894:	6820      	ldr	r0, [r4, #0]
 8004896:	6829      	ldr	r1, [r5, #0]
 8004898:	0606      	lsls	r6, r0, #24
 800489a:	f101 0304 	add.w	r3, r1, #4
 800489e:	d50a      	bpl.n	80048b6 <_printf_i+0xce>
 80048a0:	680e      	ldr	r6, [r1, #0]
 80048a2:	602b      	str	r3, [r5, #0]
 80048a4:	2e00      	cmp	r6, #0
 80048a6:	da03      	bge.n	80048b0 <_printf_i+0xc8>
 80048a8:	232d      	movs	r3, #45	; 0x2d
 80048aa:	4276      	negs	r6, r6
 80048ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b0:	485e      	ldr	r0, [pc, #376]	; (8004a2c <_printf_i+0x244>)
 80048b2:	230a      	movs	r3, #10
 80048b4:	e019      	b.n	80048ea <_printf_i+0x102>
 80048b6:	680e      	ldr	r6, [r1, #0]
 80048b8:	602b      	str	r3, [r5, #0]
 80048ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048be:	bf18      	it	ne
 80048c0:	b236      	sxthne	r6, r6
 80048c2:	e7ef      	b.n	80048a4 <_printf_i+0xbc>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	6820      	ldr	r0, [r4, #0]
 80048c8:	1d19      	adds	r1, r3, #4
 80048ca:	6029      	str	r1, [r5, #0]
 80048cc:	0601      	lsls	r1, r0, #24
 80048ce:	d501      	bpl.n	80048d4 <_printf_i+0xec>
 80048d0:	681e      	ldr	r6, [r3, #0]
 80048d2:	e002      	b.n	80048da <_printf_i+0xf2>
 80048d4:	0646      	lsls	r6, r0, #25
 80048d6:	d5fb      	bpl.n	80048d0 <_printf_i+0xe8>
 80048d8:	881e      	ldrh	r6, [r3, #0]
 80048da:	4854      	ldr	r0, [pc, #336]	; (8004a2c <_printf_i+0x244>)
 80048dc:	2f6f      	cmp	r7, #111	; 0x6f
 80048de:	bf0c      	ite	eq
 80048e0:	2308      	moveq	r3, #8
 80048e2:	230a      	movne	r3, #10
 80048e4:	2100      	movs	r1, #0
 80048e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ea:	6865      	ldr	r5, [r4, #4]
 80048ec:	60a5      	str	r5, [r4, #8]
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	bfa2      	ittt	ge
 80048f2:	6821      	ldrge	r1, [r4, #0]
 80048f4:	f021 0104 	bicge.w	r1, r1, #4
 80048f8:	6021      	strge	r1, [r4, #0]
 80048fa:	b90e      	cbnz	r6, 8004900 <_printf_i+0x118>
 80048fc:	2d00      	cmp	r5, #0
 80048fe:	d04d      	beq.n	800499c <_printf_i+0x1b4>
 8004900:	4615      	mov	r5, r2
 8004902:	fbb6 f1f3 	udiv	r1, r6, r3
 8004906:	fb03 6711 	mls	r7, r3, r1, r6
 800490a:	5dc7      	ldrb	r7, [r0, r7]
 800490c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004910:	4637      	mov	r7, r6
 8004912:	42bb      	cmp	r3, r7
 8004914:	460e      	mov	r6, r1
 8004916:	d9f4      	bls.n	8004902 <_printf_i+0x11a>
 8004918:	2b08      	cmp	r3, #8
 800491a:	d10b      	bne.n	8004934 <_printf_i+0x14c>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	07de      	lsls	r6, r3, #31
 8004920:	d508      	bpl.n	8004934 <_printf_i+0x14c>
 8004922:	6923      	ldr	r3, [r4, #16]
 8004924:	6861      	ldr	r1, [r4, #4]
 8004926:	4299      	cmp	r1, r3
 8004928:	bfde      	ittt	le
 800492a:	2330      	movle	r3, #48	; 0x30
 800492c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004930:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004934:	1b52      	subs	r2, r2, r5
 8004936:	6122      	str	r2, [r4, #16]
 8004938:	f8cd a000 	str.w	sl, [sp]
 800493c:	464b      	mov	r3, r9
 800493e:	aa03      	add	r2, sp, #12
 8004940:	4621      	mov	r1, r4
 8004942:	4640      	mov	r0, r8
 8004944:	f7ff fee2 	bl	800470c <_printf_common>
 8004948:	3001      	adds	r0, #1
 800494a:	d14c      	bne.n	80049e6 <_printf_i+0x1fe>
 800494c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004950:	b004      	add	sp, #16
 8004952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004956:	4835      	ldr	r0, [pc, #212]	; (8004a2c <_printf_i+0x244>)
 8004958:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800495c:	6829      	ldr	r1, [r5, #0]
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	f851 6b04 	ldr.w	r6, [r1], #4
 8004964:	6029      	str	r1, [r5, #0]
 8004966:	061d      	lsls	r5, r3, #24
 8004968:	d514      	bpl.n	8004994 <_printf_i+0x1ac>
 800496a:	07df      	lsls	r7, r3, #31
 800496c:	bf44      	itt	mi
 800496e:	f043 0320 	orrmi.w	r3, r3, #32
 8004972:	6023      	strmi	r3, [r4, #0]
 8004974:	b91e      	cbnz	r6, 800497e <_printf_i+0x196>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	f023 0320 	bic.w	r3, r3, #32
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	2310      	movs	r3, #16
 8004980:	e7b0      	b.n	80048e4 <_printf_i+0xfc>
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	f043 0320 	orr.w	r3, r3, #32
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	2378      	movs	r3, #120	; 0x78
 800498c:	4828      	ldr	r0, [pc, #160]	; (8004a30 <_printf_i+0x248>)
 800498e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004992:	e7e3      	b.n	800495c <_printf_i+0x174>
 8004994:	0659      	lsls	r1, r3, #25
 8004996:	bf48      	it	mi
 8004998:	b2b6      	uxthmi	r6, r6
 800499a:	e7e6      	b.n	800496a <_printf_i+0x182>
 800499c:	4615      	mov	r5, r2
 800499e:	e7bb      	b.n	8004918 <_printf_i+0x130>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	6826      	ldr	r6, [r4, #0]
 80049a4:	6961      	ldr	r1, [r4, #20]
 80049a6:	1d18      	adds	r0, r3, #4
 80049a8:	6028      	str	r0, [r5, #0]
 80049aa:	0635      	lsls	r5, r6, #24
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	d501      	bpl.n	80049b4 <_printf_i+0x1cc>
 80049b0:	6019      	str	r1, [r3, #0]
 80049b2:	e002      	b.n	80049ba <_printf_i+0x1d2>
 80049b4:	0670      	lsls	r0, r6, #25
 80049b6:	d5fb      	bpl.n	80049b0 <_printf_i+0x1c8>
 80049b8:	8019      	strh	r1, [r3, #0]
 80049ba:	2300      	movs	r3, #0
 80049bc:	6123      	str	r3, [r4, #16]
 80049be:	4615      	mov	r5, r2
 80049c0:	e7ba      	b.n	8004938 <_printf_i+0x150>
 80049c2:	682b      	ldr	r3, [r5, #0]
 80049c4:	1d1a      	adds	r2, r3, #4
 80049c6:	602a      	str	r2, [r5, #0]
 80049c8:	681d      	ldr	r5, [r3, #0]
 80049ca:	6862      	ldr	r2, [r4, #4]
 80049cc:	2100      	movs	r1, #0
 80049ce:	4628      	mov	r0, r5
 80049d0:	f7fb fbe6 	bl	80001a0 <memchr>
 80049d4:	b108      	cbz	r0, 80049da <_printf_i+0x1f2>
 80049d6:	1b40      	subs	r0, r0, r5
 80049d8:	6060      	str	r0, [r4, #4]
 80049da:	6863      	ldr	r3, [r4, #4]
 80049dc:	6123      	str	r3, [r4, #16]
 80049de:	2300      	movs	r3, #0
 80049e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e4:	e7a8      	b.n	8004938 <_printf_i+0x150>
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	462a      	mov	r2, r5
 80049ea:	4649      	mov	r1, r9
 80049ec:	4640      	mov	r0, r8
 80049ee:	47d0      	blx	sl
 80049f0:	3001      	adds	r0, #1
 80049f2:	d0ab      	beq.n	800494c <_printf_i+0x164>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	079b      	lsls	r3, r3, #30
 80049f8:	d413      	bmi.n	8004a22 <_printf_i+0x23a>
 80049fa:	68e0      	ldr	r0, [r4, #12]
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	4298      	cmp	r0, r3
 8004a00:	bfb8      	it	lt
 8004a02:	4618      	movlt	r0, r3
 8004a04:	e7a4      	b.n	8004950 <_printf_i+0x168>
 8004a06:	2301      	movs	r3, #1
 8004a08:	4632      	mov	r2, r6
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	47d0      	blx	sl
 8004a10:	3001      	adds	r0, #1
 8004a12:	d09b      	beq.n	800494c <_printf_i+0x164>
 8004a14:	3501      	adds	r5, #1
 8004a16:	68e3      	ldr	r3, [r4, #12]
 8004a18:	9903      	ldr	r1, [sp, #12]
 8004a1a:	1a5b      	subs	r3, r3, r1
 8004a1c:	42ab      	cmp	r3, r5
 8004a1e:	dcf2      	bgt.n	8004a06 <_printf_i+0x21e>
 8004a20:	e7eb      	b.n	80049fa <_printf_i+0x212>
 8004a22:	2500      	movs	r5, #0
 8004a24:	f104 0619 	add.w	r6, r4, #25
 8004a28:	e7f5      	b.n	8004a16 <_printf_i+0x22e>
 8004a2a:	bf00      	nop
 8004a2c:	08007996 	.word	0x08007996
 8004a30:	080079a7 	.word	0x080079a7

08004a34 <__sfputc_r>:
 8004a34:	6893      	ldr	r3, [r2, #8]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	b410      	push	{r4}
 8004a3c:	6093      	str	r3, [r2, #8]
 8004a3e:	da08      	bge.n	8004a52 <__sfputc_r+0x1e>
 8004a40:	6994      	ldr	r4, [r2, #24]
 8004a42:	42a3      	cmp	r3, r4
 8004a44:	db01      	blt.n	8004a4a <__sfputc_r+0x16>
 8004a46:	290a      	cmp	r1, #10
 8004a48:	d103      	bne.n	8004a52 <__sfputc_r+0x1e>
 8004a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a4e:	f000 b973 	b.w	8004d38 <__swbuf_r>
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	1c58      	adds	r0, r3, #1
 8004a56:	6010      	str	r0, [r2, #0]
 8004a58:	7019      	strb	r1, [r3, #0]
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <__sfputs_r>:
 8004a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a64:	4606      	mov	r6, r0
 8004a66:	460f      	mov	r7, r1
 8004a68:	4614      	mov	r4, r2
 8004a6a:	18d5      	adds	r5, r2, r3
 8004a6c:	42ac      	cmp	r4, r5
 8004a6e:	d101      	bne.n	8004a74 <__sfputs_r+0x12>
 8004a70:	2000      	movs	r0, #0
 8004a72:	e007      	b.n	8004a84 <__sfputs_r+0x22>
 8004a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a78:	463a      	mov	r2, r7
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f7ff ffda 	bl	8004a34 <__sfputc_r>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d1f3      	bne.n	8004a6c <__sfputs_r+0xa>
 8004a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a88 <_vfiprintf_r>:
 8004a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8c:	460d      	mov	r5, r1
 8004a8e:	b09d      	sub	sp, #116	; 0x74
 8004a90:	4614      	mov	r4, r2
 8004a92:	4698      	mov	r8, r3
 8004a94:	4606      	mov	r6, r0
 8004a96:	b118      	cbz	r0, 8004aa0 <_vfiprintf_r+0x18>
 8004a98:	6983      	ldr	r3, [r0, #24]
 8004a9a:	b90b      	cbnz	r3, 8004aa0 <_vfiprintf_r+0x18>
 8004a9c:	f001 f9a8 	bl	8005df0 <__sinit>
 8004aa0:	4b89      	ldr	r3, [pc, #548]	; (8004cc8 <_vfiprintf_r+0x240>)
 8004aa2:	429d      	cmp	r5, r3
 8004aa4:	d11b      	bne.n	8004ade <_vfiprintf_r+0x56>
 8004aa6:	6875      	ldr	r5, [r6, #4]
 8004aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004aaa:	07d9      	lsls	r1, r3, #31
 8004aac:	d405      	bmi.n	8004aba <_vfiprintf_r+0x32>
 8004aae:	89ab      	ldrh	r3, [r5, #12]
 8004ab0:	059a      	lsls	r2, r3, #22
 8004ab2:	d402      	bmi.n	8004aba <_vfiprintf_r+0x32>
 8004ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ab6:	f7ff fa9a 	bl	8003fee <__retarget_lock_acquire_recursive>
 8004aba:	89ab      	ldrh	r3, [r5, #12]
 8004abc:	071b      	lsls	r3, r3, #28
 8004abe:	d501      	bpl.n	8004ac4 <_vfiprintf_r+0x3c>
 8004ac0:	692b      	ldr	r3, [r5, #16]
 8004ac2:	b9eb      	cbnz	r3, 8004b00 <_vfiprintf_r+0x78>
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f000 f988 	bl	8004ddc <__swsetup_r>
 8004acc:	b1c0      	cbz	r0, 8004b00 <_vfiprintf_r+0x78>
 8004ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ad0:	07dc      	lsls	r4, r3, #31
 8004ad2:	d50e      	bpl.n	8004af2 <_vfiprintf_r+0x6a>
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad8:	b01d      	add	sp, #116	; 0x74
 8004ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ade:	4b7b      	ldr	r3, [pc, #492]	; (8004ccc <_vfiprintf_r+0x244>)
 8004ae0:	429d      	cmp	r5, r3
 8004ae2:	d101      	bne.n	8004ae8 <_vfiprintf_r+0x60>
 8004ae4:	68b5      	ldr	r5, [r6, #8]
 8004ae6:	e7df      	b.n	8004aa8 <_vfiprintf_r+0x20>
 8004ae8:	4b79      	ldr	r3, [pc, #484]	; (8004cd0 <_vfiprintf_r+0x248>)
 8004aea:	429d      	cmp	r5, r3
 8004aec:	bf08      	it	eq
 8004aee:	68f5      	ldreq	r5, [r6, #12]
 8004af0:	e7da      	b.n	8004aa8 <_vfiprintf_r+0x20>
 8004af2:	89ab      	ldrh	r3, [r5, #12]
 8004af4:	0598      	lsls	r0, r3, #22
 8004af6:	d4ed      	bmi.n	8004ad4 <_vfiprintf_r+0x4c>
 8004af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004afa:	f7ff fa79 	bl	8003ff0 <__retarget_lock_release_recursive>
 8004afe:	e7e9      	b.n	8004ad4 <_vfiprintf_r+0x4c>
 8004b00:	2300      	movs	r3, #0
 8004b02:	9309      	str	r3, [sp, #36]	; 0x24
 8004b04:	2320      	movs	r3, #32
 8004b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b0e:	2330      	movs	r3, #48	; 0x30
 8004b10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004cd4 <_vfiprintf_r+0x24c>
 8004b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b18:	f04f 0901 	mov.w	r9, #1
 8004b1c:	4623      	mov	r3, r4
 8004b1e:	469a      	mov	sl, r3
 8004b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b24:	b10a      	cbz	r2, 8004b2a <_vfiprintf_r+0xa2>
 8004b26:	2a25      	cmp	r2, #37	; 0x25
 8004b28:	d1f9      	bne.n	8004b1e <_vfiprintf_r+0x96>
 8004b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8004b2e:	d00b      	beq.n	8004b48 <_vfiprintf_r+0xc0>
 8004b30:	465b      	mov	r3, fp
 8004b32:	4622      	mov	r2, r4
 8004b34:	4629      	mov	r1, r5
 8004b36:	4630      	mov	r0, r6
 8004b38:	f7ff ff93 	bl	8004a62 <__sfputs_r>
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	f000 80aa 	beq.w	8004c96 <_vfiprintf_r+0x20e>
 8004b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b44:	445a      	add	r2, fp
 8004b46:	9209      	str	r2, [sp, #36]	; 0x24
 8004b48:	f89a 3000 	ldrb.w	r3, [sl]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80a2 	beq.w	8004c96 <_vfiprintf_r+0x20e>
 8004b52:	2300      	movs	r3, #0
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b5c:	f10a 0a01 	add.w	sl, sl, #1
 8004b60:	9304      	str	r3, [sp, #16]
 8004b62:	9307      	str	r3, [sp, #28]
 8004b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b68:	931a      	str	r3, [sp, #104]	; 0x68
 8004b6a:	4654      	mov	r4, sl
 8004b6c:	2205      	movs	r2, #5
 8004b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b72:	4858      	ldr	r0, [pc, #352]	; (8004cd4 <_vfiprintf_r+0x24c>)
 8004b74:	f7fb fb14 	bl	80001a0 <memchr>
 8004b78:	9a04      	ldr	r2, [sp, #16]
 8004b7a:	b9d8      	cbnz	r0, 8004bb4 <_vfiprintf_r+0x12c>
 8004b7c:	06d1      	lsls	r1, r2, #27
 8004b7e:	bf44      	itt	mi
 8004b80:	2320      	movmi	r3, #32
 8004b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b86:	0713      	lsls	r3, r2, #28
 8004b88:	bf44      	itt	mi
 8004b8a:	232b      	movmi	r3, #43	; 0x2b
 8004b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b90:	f89a 3000 	ldrb.w	r3, [sl]
 8004b94:	2b2a      	cmp	r3, #42	; 0x2a
 8004b96:	d015      	beq.n	8004bc4 <_vfiprintf_r+0x13c>
 8004b98:	9a07      	ldr	r2, [sp, #28]
 8004b9a:	4654      	mov	r4, sl
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	f04f 0c0a 	mov.w	ip, #10
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ba8:	3b30      	subs	r3, #48	; 0x30
 8004baa:	2b09      	cmp	r3, #9
 8004bac:	d94e      	bls.n	8004c4c <_vfiprintf_r+0x1c4>
 8004bae:	b1b0      	cbz	r0, 8004bde <_vfiprintf_r+0x156>
 8004bb0:	9207      	str	r2, [sp, #28]
 8004bb2:	e014      	b.n	8004bde <_vfiprintf_r+0x156>
 8004bb4:	eba0 0308 	sub.w	r3, r0, r8
 8004bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	9304      	str	r3, [sp, #16]
 8004bc0:	46a2      	mov	sl, r4
 8004bc2:	e7d2      	b.n	8004b6a <_vfiprintf_r+0xe2>
 8004bc4:	9b03      	ldr	r3, [sp, #12]
 8004bc6:	1d19      	adds	r1, r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	9103      	str	r1, [sp, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bfbb      	ittet	lt
 8004bd0:	425b      	neglt	r3, r3
 8004bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8004bd6:	9307      	strge	r3, [sp, #28]
 8004bd8:	9307      	strlt	r3, [sp, #28]
 8004bda:	bfb8      	it	lt
 8004bdc:	9204      	strlt	r2, [sp, #16]
 8004bde:	7823      	ldrb	r3, [r4, #0]
 8004be0:	2b2e      	cmp	r3, #46	; 0x2e
 8004be2:	d10c      	bne.n	8004bfe <_vfiprintf_r+0x176>
 8004be4:	7863      	ldrb	r3, [r4, #1]
 8004be6:	2b2a      	cmp	r3, #42	; 0x2a
 8004be8:	d135      	bne.n	8004c56 <_vfiprintf_r+0x1ce>
 8004bea:	9b03      	ldr	r3, [sp, #12]
 8004bec:	1d1a      	adds	r2, r3, #4
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	9203      	str	r2, [sp, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bfb8      	it	lt
 8004bf6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004bfa:	3402      	adds	r4, #2
 8004bfc:	9305      	str	r3, [sp, #20]
 8004bfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ce4 <_vfiprintf_r+0x25c>
 8004c02:	7821      	ldrb	r1, [r4, #0]
 8004c04:	2203      	movs	r2, #3
 8004c06:	4650      	mov	r0, sl
 8004c08:	f7fb faca 	bl	80001a0 <memchr>
 8004c0c:	b140      	cbz	r0, 8004c20 <_vfiprintf_r+0x198>
 8004c0e:	2340      	movs	r3, #64	; 0x40
 8004c10:	eba0 000a 	sub.w	r0, r0, sl
 8004c14:	fa03 f000 	lsl.w	r0, r3, r0
 8004c18:	9b04      	ldr	r3, [sp, #16]
 8004c1a:	4303      	orrs	r3, r0
 8004c1c:	3401      	adds	r4, #1
 8004c1e:	9304      	str	r3, [sp, #16]
 8004c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c24:	482c      	ldr	r0, [pc, #176]	; (8004cd8 <_vfiprintf_r+0x250>)
 8004c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c2a:	2206      	movs	r2, #6
 8004c2c:	f7fb fab8 	bl	80001a0 <memchr>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	d03f      	beq.n	8004cb4 <_vfiprintf_r+0x22c>
 8004c34:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <_vfiprintf_r+0x254>)
 8004c36:	bb1b      	cbnz	r3, 8004c80 <_vfiprintf_r+0x1f8>
 8004c38:	9b03      	ldr	r3, [sp, #12]
 8004c3a:	3307      	adds	r3, #7
 8004c3c:	f023 0307 	bic.w	r3, r3, #7
 8004c40:	3308      	adds	r3, #8
 8004c42:	9303      	str	r3, [sp, #12]
 8004c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c46:	443b      	add	r3, r7
 8004c48:	9309      	str	r3, [sp, #36]	; 0x24
 8004c4a:	e767      	b.n	8004b1c <_vfiprintf_r+0x94>
 8004c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c50:	460c      	mov	r4, r1
 8004c52:	2001      	movs	r0, #1
 8004c54:	e7a5      	b.n	8004ba2 <_vfiprintf_r+0x11a>
 8004c56:	2300      	movs	r3, #0
 8004c58:	3401      	adds	r4, #1
 8004c5a:	9305      	str	r3, [sp, #20]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f04f 0c0a 	mov.w	ip, #10
 8004c62:	4620      	mov	r0, r4
 8004c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c68:	3a30      	subs	r2, #48	; 0x30
 8004c6a:	2a09      	cmp	r2, #9
 8004c6c:	d903      	bls.n	8004c76 <_vfiprintf_r+0x1ee>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0c5      	beq.n	8004bfe <_vfiprintf_r+0x176>
 8004c72:	9105      	str	r1, [sp, #20]
 8004c74:	e7c3      	b.n	8004bfe <_vfiprintf_r+0x176>
 8004c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e7f0      	b.n	8004c62 <_vfiprintf_r+0x1da>
 8004c80:	ab03      	add	r3, sp, #12
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	462a      	mov	r2, r5
 8004c86:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <_vfiprintf_r+0x258>)
 8004c88:	a904      	add	r1, sp, #16
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff fb08 	bl	80042a0 <_printf_float>
 8004c90:	4607      	mov	r7, r0
 8004c92:	1c78      	adds	r0, r7, #1
 8004c94:	d1d6      	bne.n	8004c44 <_vfiprintf_r+0x1bc>
 8004c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c98:	07d9      	lsls	r1, r3, #31
 8004c9a:	d405      	bmi.n	8004ca8 <_vfiprintf_r+0x220>
 8004c9c:	89ab      	ldrh	r3, [r5, #12]
 8004c9e:	059a      	lsls	r2, r3, #22
 8004ca0:	d402      	bmi.n	8004ca8 <_vfiprintf_r+0x220>
 8004ca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ca4:	f7ff f9a4 	bl	8003ff0 <__retarget_lock_release_recursive>
 8004ca8:	89ab      	ldrh	r3, [r5, #12]
 8004caa:	065b      	lsls	r3, r3, #25
 8004cac:	f53f af12 	bmi.w	8004ad4 <_vfiprintf_r+0x4c>
 8004cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cb2:	e711      	b.n	8004ad8 <_vfiprintf_r+0x50>
 8004cb4:	ab03      	add	r3, sp, #12
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	462a      	mov	r2, r5
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <_vfiprintf_r+0x258>)
 8004cbc:	a904      	add	r1, sp, #16
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f7ff fd92 	bl	80047e8 <_printf_i>
 8004cc4:	e7e4      	b.n	8004c90 <_vfiprintf_r+0x208>
 8004cc6:	bf00      	nop
 8004cc8:	08007a60 	.word	0x08007a60
 8004ccc:	08007a80 	.word	0x08007a80
 8004cd0:	08007a40 	.word	0x08007a40
 8004cd4:	080079b8 	.word	0x080079b8
 8004cd8:	080079c2 	.word	0x080079c2
 8004cdc:	080042a1 	.word	0x080042a1
 8004ce0:	08004a63 	.word	0x08004a63
 8004ce4:	080079be 	.word	0x080079be

08004ce8 <iprintf>:
 8004ce8:	b40f      	push	{r0, r1, r2, r3}
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <iprintf+0x2c>)
 8004cec:	b513      	push	{r0, r1, r4, lr}
 8004cee:	681c      	ldr	r4, [r3, #0]
 8004cf0:	b124      	cbz	r4, 8004cfc <iprintf+0x14>
 8004cf2:	69a3      	ldr	r3, [r4, #24]
 8004cf4:	b913      	cbnz	r3, 8004cfc <iprintf+0x14>
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f001 f87a 	bl	8005df0 <__sinit>
 8004cfc:	ab05      	add	r3, sp, #20
 8004cfe:	9a04      	ldr	r2, [sp, #16]
 8004d00:	68a1      	ldr	r1, [r4, #8]
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7ff febf 	bl	8004a88 <_vfiprintf_r>
 8004d0a:	b002      	add	sp, #8
 8004d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d10:	b004      	add	sp, #16
 8004d12:	4770      	bx	lr
 8004d14:	20000030 	.word	0x20000030

08004d18 <_sbrk_r>:
 8004d18:	b538      	push	{r3, r4, r5, lr}
 8004d1a:	4d06      	ldr	r5, [pc, #24]	; (8004d34 <_sbrk_r+0x1c>)
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4604      	mov	r4, r0
 8004d20:	4608      	mov	r0, r1
 8004d22:	602b      	str	r3, [r5, #0]
 8004d24:	f7fd f874 	bl	8001e10 <_sbrk>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d102      	bne.n	8004d32 <_sbrk_r+0x1a>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	b103      	cbz	r3, 8004d32 <_sbrk_r+0x1a>
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	20000340 	.word	0x20000340

08004d38 <__swbuf_r>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	460e      	mov	r6, r1
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	4605      	mov	r5, r0
 8004d40:	b118      	cbz	r0, 8004d4a <__swbuf_r+0x12>
 8004d42:	6983      	ldr	r3, [r0, #24]
 8004d44:	b90b      	cbnz	r3, 8004d4a <__swbuf_r+0x12>
 8004d46:	f001 f853 	bl	8005df0 <__sinit>
 8004d4a:	4b21      	ldr	r3, [pc, #132]	; (8004dd0 <__swbuf_r+0x98>)
 8004d4c:	429c      	cmp	r4, r3
 8004d4e:	d12b      	bne.n	8004da8 <__swbuf_r+0x70>
 8004d50:	686c      	ldr	r4, [r5, #4]
 8004d52:	69a3      	ldr	r3, [r4, #24]
 8004d54:	60a3      	str	r3, [r4, #8]
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	071a      	lsls	r2, r3, #28
 8004d5a:	d52f      	bpl.n	8004dbc <__swbuf_r+0x84>
 8004d5c:	6923      	ldr	r3, [r4, #16]
 8004d5e:	b36b      	cbz	r3, 8004dbc <__swbuf_r+0x84>
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	6820      	ldr	r0, [r4, #0]
 8004d64:	1ac0      	subs	r0, r0, r3
 8004d66:	6963      	ldr	r3, [r4, #20]
 8004d68:	b2f6      	uxtb	r6, r6
 8004d6a:	4283      	cmp	r3, r0
 8004d6c:	4637      	mov	r7, r6
 8004d6e:	dc04      	bgt.n	8004d7a <__swbuf_r+0x42>
 8004d70:	4621      	mov	r1, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 ffa8 	bl	8005cc8 <_fflush_r>
 8004d78:	bb30      	cbnz	r0, 8004dc8 <__swbuf_r+0x90>
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	60a3      	str	r3, [r4, #8]
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	6022      	str	r2, [r4, #0]
 8004d86:	701e      	strb	r6, [r3, #0]
 8004d88:	6963      	ldr	r3, [r4, #20]
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	4283      	cmp	r3, r0
 8004d8e:	d004      	beq.n	8004d9a <__swbuf_r+0x62>
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	07db      	lsls	r3, r3, #31
 8004d94:	d506      	bpl.n	8004da4 <__swbuf_r+0x6c>
 8004d96:	2e0a      	cmp	r6, #10
 8004d98:	d104      	bne.n	8004da4 <__swbuf_r+0x6c>
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f000 ff93 	bl	8005cc8 <_fflush_r>
 8004da2:	b988      	cbnz	r0, 8004dc8 <__swbuf_r+0x90>
 8004da4:	4638      	mov	r0, r7
 8004da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da8:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <__swbuf_r+0x9c>)
 8004daa:	429c      	cmp	r4, r3
 8004dac:	d101      	bne.n	8004db2 <__swbuf_r+0x7a>
 8004dae:	68ac      	ldr	r4, [r5, #8]
 8004db0:	e7cf      	b.n	8004d52 <__swbuf_r+0x1a>
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <__swbuf_r+0xa0>)
 8004db4:	429c      	cmp	r4, r3
 8004db6:	bf08      	it	eq
 8004db8:	68ec      	ldreq	r4, [r5, #12]
 8004dba:	e7ca      	b.n	8004d52 <__swbuf_r+0x1a>
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 f80c 	bl	8004ddc <__swsetup_r>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d0cb      	beq.n	8004d60 <__swbuf_r+0x28>
 8004dc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004dcc:	e7ea      	b.n	8004da4 <__swbuf_r+0x6c>
 8004dce:	bf00      	nop
 8004dd0:	08007a60 	.word	0x08007a60
 8004dd4:	08007a80 	.word	0x08007a80
 8004dd8:	08007a40 	.word	0x08007a40

08004ddc <__swsetup_r>:
 8004ddc:	4b32      	ldr	r3, [pc, #200]	; (8004ea8 <__swsetup_r+0xcc>)
 8004dde:	b570      	push	{r4, r5, r6, lr}
 8004de0:	681d      	ldr	r5, [r3, #0]
 8004de2:	4606      	mov	r6, r0
 8004de4:	460c      	mov	r4, r1
 8004de6:	b125      	cbz	r5, 8004df2 <__swsetup_r+0x16>
 8004de8:	69ab      	ldr	r3, [r5, #24]
 8004dea:	b913      	cbnz	r3, 8004df2 <__swsetup_r+0x16>
 8004dec:	4628      	mov	r0, r5
 8004dee:	f000 ffff 	bl	8005df0 <__sinit>
 8004df2:	4b2e      	ldr	r3, [pc, #184]	; (8004eac <__swsetup_r+0xd0>)
 8004df4:	429c      	cmp	r4, r3
 8004df6:	d10f      	bne.n	8004e18 <__swsetup_r+0x3c>
 8004df8:	686c      	ldr	r4, [r5, #4]
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e00:	0719      	lsls	r1, r3, #28
 8004e02:	d42c      	bmi.n	8004e5e <__swsetup_r+0x82>
 8004e04:	06dd      	lsls	r5, r3, #27
 8004e06:	d411      	bmi.n	8004e2c <__swsetup_r+0x50>
 8004e08:	2309      	movs	r3, #9
 8004e0a:	6033      	str	r3, [r6, #0]
 8004e0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e10:	81a3      	strh	r3, [r4, #12]
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e16:	e03e      	b.n	8004e96 <__swsetup_r+0xba>
 8004e18:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <__swsetup_r+0xd4>)
 8004e1a:	429c      	cmp	r4, r3
 8004e1c:	d101      	bne.n	8004e22 <__swsetup_r+0x46>
 8004e1e:	68ac      	ldr	r4, [r5, #8]
 8004e20:	e7eb      	b.n	8004dfa <__swsetup_r+0x1e>
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <__swsetup_r+0xd8>)
 8004e24:	429c      	cmp	r4, r3
 8004e26:	bf08      	it	eq
 8004e28:	68ec      	ldreq	r4, [r5, #12]
 8004e2a:	e7e6      	b.n	8004dfa <__swsetup_r+0x1e>
 8004e2c:	0758      	lsls	r0, r3, #29
 8004e2e:	d512      	bpl.n	8004e56 <__swsetup_r+0x7a>
 8004e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e32:	b141      	cbz	r1, 8004e46 <__swsetup_r+0x6a>
 8004e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e38:	4299      	cmp	r1, r3
 8004e3a:	d002      	beq.n	8004e42 <__swsetup_r+0x66>
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f7ff f8e9 	bl	8004014 <_free_r>
 8004e42:	2300      	movs	r3, #0
 8004e44:	6363      	str	r3, [r4, #52]	; 0x34
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e4c:	81a3      	strh	r3, [r4, #12]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6063      	str	r3, [r4, #4]
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	f043 0308 	orr.w	r3, r3, #8
 8004e5c:	81a3      	strh	r3, [r4, #12]
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	b94b      	cbnz	r3, 8004e76 <__swsetup_r+0x9a>
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e6c:	d003      	beq.n	8004e76 <__swsetup_r+0x9a>
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4630      	mov	r0, r6
 8004e72:	f001 f885 	bl	8005f80 <__smakebuf_r>
 8004e76:	89a0      	ldrh	r0, [r4, #12]
 8004e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e7c:	f010 0301 	ands.w	r3, r0, #1
 8004e80:	d00a      	beq.n	8004e98 <__swsetup_r+0xbc>
 8004e82:	2300      	movs	r3, #0
 8004e84:	60a3      	str	r3, [r4, #8]
 8004e86:	6963      	ldr	r3, [r4, #20]
 8004e88:	425b      	negs	r3, r3
 8004e8a:	61a3      	str	r3, [r4, #24]
 8004e8c:	6923      	ldr	r3, [r4, #16]
 8004e8e:	b943      	cbnz	r3, 8004ea2 <__swsetup_r+0xc6>
 8004e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e94:	d1ba      	bne.n	8004e0c <__swsetup_r+0x30>
 8004e96:	bd70      	pop	{r4, r5, r6, pc}
 8004e98:	0781      	lsls	r1, r0, #30
 8004e9a:	bf58      	it	pl
 8004e9c:	6963      	ldrpl	r3, [r4, #20]
 8004e9e:	60a3      	str	r3, [r4, #8]
 8004ea0:	e7f4      	b.n	8004e8c <__swsetup_r+0xb0>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e7f7      	b.n	8004e96 <__swsetup_r+0xba>
 8004ea6:	bf00      	nop
 8004ea8:	20000030 	.word	0x20000030
 8004eac:	08007a60 	.word	0x08007a60
 8004eb0:	08007a80 	.word	0x08007a80
 8004eb4:	08007a40 	.word	0x08007a40

08004eb8 <abort>:
 8004eb8:	b508      	push	{r3, lr}
 8004eba:	2006      	movs	r0, #6
 8004ebc:	f001 fc8e 	bl	80067dc <raise>
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f7fc ff67 	bl	8001d94 <_exit>

08004ec6 <quorem>:
 8004ec6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eca:	6903      	ldr	r3, [r0, #16]
 8004ecc:	690c      	ldr	r4, [r1, #16]
 8004ece:	42a3      	cmp	r3, r4
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	f2c0 8081 	blt.w	8004fd8 <quorem+0x112>
 8004ed6:	3c01      	subs	r4, #1
 8004ed8:	f101 0814 	add.w	r8, r1, #20
 8004edc:	f100 0514 	add.w	r5, r0, #20
 8004ee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004eea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ef6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004efa:	fbb2 f6f3 	udiv	r6, r2, r3
 8004efe:	d331      	bcc.n	8004f64 <quorem+0x9e>
 8004f00:	f04f 0e00 	mov.w	lr, #0
 8004f04:	4640      	mov	r0, r8
 8004f06:	46ac      	mov	ip, r5
 8004f08:	46f2      	mov	sl, lr
 8004f0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f0e:	b293      	uxth	r3, r2
 8004f10:	fb06 e303 	mla	r3, r6, r3, lr
 8004f14:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	ebaa 0303 	sub.w	r3, sl, r3
 8004f1e:	0c12      	lsrs	r2, r2, #16
 8004f20:	f8dc a000 	ldr.w	sl, [ip]
 8004f24:	fb06 e202 	mla	r2, r6, r2, lr
 8004f28:	fa13 f38a 	uxtah	r3, r3, sl
 8004f2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f30:	fa1f fa82 	uxth.w	sl, r2
 8004f34:	f8dc 2000 	ldr.w	r2, [ip]
 8004f38:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004f3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f46:	4581      	cmp	r9, r0
 8004f48:	f84c 3b04 	str.w	r3, [ip], #4
 8004f4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f50:	d2db      	bcs.n	8004f0a <quorem+0x44>
 8004f52:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f56:	b92b      	cbnz	r3, 8004f64 <quorem+0x9e>
 8004f58:	9b01      	ldr	r3, [sp, #4]
 8004f5a:	3b04      	subs	r3, #4
 8004f5c:	429d      	cmp	r5, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	d32e      	bcc.n	8004fc0 <quorem+0xfa>
 8004f62:	613c      	str	r4, [r7, #16]
 8004f64:	4638      	mov	r0, r7
 8004f66:	f001 faf9 	bl	800655c <__mcmp>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	db24      	blt.n	8004fb8 <quorem+0xf2>
 8004f6e:	3601      	adds	r6, #1
 8004f70:	4628      	mov	r0, r5
 8004f72:	f04f 0c00 	mov.w	ip, #0
 8004f76:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f7a:	f8d0 e000 	ldr.w	lr, [r0]
 8004f7e:	b293      	uxth	r3, r2
 8004f80:	ebac 0303 	sub.w	r3, ip, r3
 8004f84:	0c12      	lsrs	r2, r2, #16
 8004f86:	fa13 f38e 	uxtah	r3, r3, lr
 8004f8a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f98:	45c1      	cmp	r9, r8
 8004f9a:	f840 3b04 	str.w	r3, [r0], #4
 8004f9e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004fa2:	d2e8      	bcs.n	8004f76 <quorem+0xb0>
 8004fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fac:	b922      	cbnz	r2, 8004fb8 <quorem+0xf2>
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	429d      	cmp	r5, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	d30a      	bcc.n	8004fcc <quorem+0x106>
 8004fb6:	613c      	str	r4, [r7, #16]
 8004fb8:	4630      	mov	r0, r6
 8004fba:	b003      	add	sp, #12
 8004fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	3b04      	subs	r3, #4
 8004fc4:	2a00      	cmp	r2, #0
 8004fc6:	d1cc      	bne.n	8004f62 <quorem+0x9c>
 8004fc8:	3c01      	subs	r4, #1
 8004fca:	e7c7      	b.n	8004f5c <quorem+0x96>
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	3b04      	subs	r3, #4
 8004fd0:	2a00      	cmp	r2, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <quorem+0xf0>
 8004fd4:	3c01      	subs	r4, #1
 8004fd6:	e7eb      	b.n	8004fb0 <quorem+0xea>
 8004fd8:	2000      	movs	r0, #0
 8004fda:	e7ee      	b.n	8004fba <quorem+0xf4>
 8004fdc:	0000      	movs	r0, r0
	...

08004fe0 <_dtoa_r>:
 8004fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	ed2d 8b04 	vpush	{d8-d9}
 8004fe8:	ec57 6b10 	vmov	r6, r7, d0
 8004fec:	b093      	sub	sp, #76	; 0x4c
 8004fee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ff4:	9106      	str	r1, [sp, #24]
 8004ff6:	ee10 aa10 	vmov	sl, s0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8005000:	46bb      	mov	fp, r7
 8005002:	b975      	cbnz	r5, 8005022 <_dtoa_r+0x42>
 8005004:	2010      	movs	r0, #16
 8005006:	f7fe fff5 	bl	8003ff4 <malloc>
 800500a:	4602      	mov	r2, r0
 800500c:	6260      	str	r0, [r4, #36]	; 0x24
 800500e:	b920      	cbnz	r0, 800501a <_dtoa_r+0x3a>
 8005010:	4ba7      	ldr	r3, [pc, #668]	; (80052b0 <_dtoa_r+0x2d0>)
 8005012:	21ea      	movs	r1, #234	; 0xea
 8005014:	48a7      	ldr	r0, [pc, #668]	; (80052b4 <_dtoa_r+0x2d4>)
 8005016:	f7fe ff21 	bl	8003e5c <__assert_func>
 800501a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800501e:	6005      	str	r5, [r0, #0]
 8005020:	60c5      	str	r5, [r0, #12]
 8005022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	b151      	cbz	r1, 800503e <_dtoa_r+0x5e>
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	604a      	str	r2, [r1, #4]
 800502c:	2301      	movs	r3, #1
 800502e:	4093      	lsls	r3, r2
 8005030:	608b      	str	r3, [r1, #8]
 8005032:	4620      	mov	r0, r4
 8005034:	f001 f850 	bl	80060d8 <_Bfree>
 8005038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	1e3b      	subs	r3, r7, #0
 8005040:	bfaa      	itet	ge
 8005042:	2300      	movge	r3, #0
 8005044:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005048:	f8c8 3000 	strge.w	r3, [r8]
 800504c:	4b9a      	ldr	r3, [pc, #616]	; (80052b8 <_dtoa_r+0x2d8>)
 800504e:	bfbc      	itt	lt
 8005050:	2201      	movlt	r2, #1
 8005052:	f8c8 2000 	strlt.w	r2, [r8]
 8005056:	ea33 030b 	bics.w	r3, r3, fp
 800505a:	d11b      	bne.n	8005094 <_dtoa_r+0xb4>
 800505c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800505e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005068:	4333      	orrs	r3, r6
 800506a:	f000 8592 	beq.w	8005b92 <_dtoa_r+0xbb2>
 800506e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005070:	b963      	cbnz	r3, 800508c <_dtoa_r+0xac>
 8005072:	4b92      	ldr	r3, [pc, #584]	; (80052bc <_dtoa_r+0x2dc>)
 8005074:	e022      	b.n	80050bc <_dtoa_r+0xdc>
 8005076:	4b92      	ldr	r3, [pc, #584]	; (80052c0 <_dtoa_r+0x2e0>)
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	3308      	adds	r3, #8
 800507c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	9801      	ldr	r0, [sp, #4]
 8005082:	b013      	add	sp, #76	; 0x4c
 8005084:	ecbd 8b04 	vpop	{d8-d9}
 8005088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508c:	4b8b      	ldr	r3, [pc, #556]	; (80052bc <_dtoa_r+0x2dc>)
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	3303      	adds	r3, #3
 8005092:	e7f3      	b.n	800507c <_dtoa_r+0x9c>
 8005094:	2200      	movs	r2, #0
 8005096:	2300      	movs	r3, #0
 8005098:	4650      	mov	r0, sl
 800509a:	4659      	mov	r1, fp
 800509c:	f7fb fcf4 	bl	8000a88 <__aeabi_dcmpeq>
 80050a0:	ec4b ab19 	vmov	d9, sl, fp
 80050a4:	4680      	mov	r8, r0
 80050a6:	b158      	cbz	r0, 80050c0 <_dtoa_r+0xe0>
 80050a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050aa:	2301      	movs	r3, #1
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 856b 	beq.w	8005b8c <_dtoa_r+0xbac>
 80050b6:	4883      	ldr	r0, [pc, #524]	; (80052c4 <_dtoa_r+0x2e4>)
 80050b8:	6018      	str	r0, [r3, #0]
 80050ba:	1e43      	subs	r3, r0, #1
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	e7df      	b.n	8005080 <_dtoa_r+0xa0>
 80050c0:	ec4b ab10 	vmov	d0, sl, fp
 80050c4:	aa10      	add	r2, sp, #64	; 0x40
 80050c6:	a911      	add	r1, sp, #68	; 0x44
 80050c8:	4620      	mov	r0, r4
 80050ca:	f001 faed 	bl	80066a8 <__d2b>
 80050ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80050d2:	ee08 0a10 	vmov	s16, r0
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	f000 8084 	beq.w	80051e4 <_dtoa_r+0x204>
 80050dc:	ee19 3a90 	vmov	r3, s19
 80050e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80050e8:	4656      	mov	r6, sl
 80050ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80050ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80050f6:	4b74      	ldr	r3, [pc, #464]	; (80052c8 <_dtoa_r+0x2e8>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	4630      	mov	r0, r6
 80050fc:	4639      	mov	r1, r7
 80050fe:	f7fb f8a3 	bl	8000248 <__aeabi_dsub>
 8005102:	a365      	add	r3, pc, #404	; (adr r3, 8005298 <_dtoa_r+0x2b8>)
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f7fb fa56 	bl	80005b8 <__aeabi_dmul>
 800510c:	a364      	add	r3, pc, #400	; (adr r3, 80052a0 <_dtoa_r+0x2c0>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f7fb f89b 	bl	800024c <__adddf3>
 8005116:	4606      	mov	r6, r0
 8005118:	4628      	mov	r0, r5
 800511a:	460f      	mov	r7, r1
 800511c:	f7fb f9e2 	bl	80004e4 <__aeabi_i2d>
 8005120:	a361      	add	r3, pc, #388	; (adr r3, 80052a8 <_dtoa_r+0x2c8>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f7fb fa47 	bl	80005b8 <__aeabi_dmul>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4630      	mov	r0, r6
 8005130:	4639      	mov	r1, r7
 8005132:	f7fb f88b 	bl	800024c <__adddf3>
 8005136:	4606      	mov	r6, r0
 8005138:	460f      	mov	r7, r1
 800513a:	f7fb fced 	bl	8000b18 <__aeabi_d2iz>
 800513e:	2200      	movs	r2, #0
 8005140:	9000      	str	r0, [sp, #0]
 8005142:	2300      	movs	r3, #0
 8005144:	4630      	mov	r0, r6
 8005146:	4639      	mov	r1, r7
 8005148:	f7fb fca8 	bl	8000a9c <__aeabi_dcmplt>
 800514c:	b150      	cbz	r0, 8005164 <_dtoa_r+0x184>
 800514e:	9800      	ldr	r0, [sp, #0]
 8005150:	f7fb f9c8 	bl	80004e4 <__aeabi_i2d>
 8005154:	4632      	mov	r2, r6
 8005156:	463b      	mov	r3, r7
 8005158:	f7fb fc96 	bl	8000a88 <__aeabi_dcmpeq>
 800515c:	b910      	cbnz	r0, 8005164 <_dtoa_r+0x184>
 800515e:	9b00      	ldr	r3, [sp, #0]
 8005160:	3b01      	subs	r3, #1
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	9b00      	ldr	r3, [sp, #0]
 8005166:	2b16      	cmp	r3, #22
 8005168:	d85a      	bhi.n	8005220 <_dtoa_r+0x240>
 800516a:	9a00      	ldr	r2, [sp, #0]
 800516c:	4b57      	ldr	r3, [pc, #348]	; (80052cc <_dtoa_r+0x2ec>)
 800516e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	ec51 0b19 	vmov	r0, r1, d9
 800517a:	f7fb fc8f 	bl	8000a9c <__aeabi_dcmplt>
 800517e:	2800      	cmp	r0, #0
 8005180:	d050      	beq.n	8005224 <_dtoa_r+0x244>
 8005182:	9b00      	ldr	r3, [sp, #0]
 8005184:	3b01      	subs	r3, #1
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	2300      	movs	r3, #0
 800518a:	930b      	str	r3, [sp, #44]	; 0x2c
 800518c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800518e:	1b5d      	subs	r5, r3, r5
 8005190:	1e6b      	subs	r3, r5, #1
 8005192:	9305      	str	r3, [sp, #20]
 8005194:	bf45      	ittet	mi
 8005196:	f1c5 0301 	rsbmi	r3, r5, #1
 800519a:	9304      	strmi	r3, [sp, #16]
 800519c:	2300      	movpl	r3, #0
 800519e:	2300      	movmi	r3, #0
 80051a0:	bf4c      	ite	mi
 80051a2:	9305      	strmi	r3, [sp, #20]
 80051a4:	9304      	strpl	r3, [sp, #16]
 80051a6:	9b00      	ldr	r3, [sp, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	db3d      	blt.n	8005228 <_dtoa_r+0x248>
 80051ac:	9b05      	ldr	r3, [sp, #20]
 80051ae:	9a00      	ldr	r2, [sp, #0]
 80051b0:	920a      	str	r2, [sp, #40]	; 0x28
 80051b2:	4413      	add	r3, r2
 80051b4:	9305      	str	r3, [sp, #20]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9307      	str	r3, [sp, #28]
 80051ba:	9b06      	ldr	r3, [sp, #24]
 80051bc:	2b09      	cmp	r3, #9
 80051be:	f200 8089 	bhi.w	80052d4 <_dtoa_r+0x2f4>
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	bfc4      	itt	gt
 80051c6:	3b04      	subgt	r3, #4
 80051c8:	9306      	strgt	r3, [sp, #24]
 80051ca:	9b06      	ldr	r3, [sp, #24]
 80051cc:	f1a3 0302 	sub.w	r3, r3, #2
 80051d0:	bfcc      	ite	gt
 80051d2:	2500      	movgt	r5, #0
 80051d4:	2501      	movle	r5, #1
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	f200 8087 	bhi.w	80052ea <_dtoa_r+0x30a>
 80051dc:	e8df f003 	tbb	[pc, r3]
 80051e0:	59383a2d 	.word	0x59383a2d
 80051e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80051e8:	441d      	add	r5, r3
 80051ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	bfc1      	itttt	gt
 80051f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80051fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80051fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005202:	bfda      	itte	le
 8005204:	f1c3 0320 	rsble	r3, r3, #32
 8005208:	fa06 f003 	lslle.w	r0, r6, r3
 800520c:	4318      	orrgt	r0, r3
 800520e:	f7fb f959 	bl	80004c4 <__aeabi_ui2d>
 8005212:	2301      	movs	r3, #1
 8005214:	4606      	mov	r6, r0
 8005216:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800521a:	3d01      	subs	r5, #1
 800521c:	930e      	str	r3, [sp, #56]	; 0x38
 800521e:	e76a      	b.n	80050f6 <_dtoa_r+0x116>
 8005220:	2301      	movs	r3, #1
 8005222:	e7b2      	b.n	800518a <_dtoa_r+0x1aa>
 8005224:	900b      	str	r0, [sp, #44]	; 0x2c
 8005226:	e7b1      	b.n	800518c <_dtoa_r+0x1ac>
 8005228:	9b04      	ldr	r3, [sp, #16]
 800522a:	9a00      	ldr	r2, [sp, #0]
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	9304      	str	r3, [sp, #16]
 8005230:	4253      	negs	r3, r2
 8005232:	9307      	str	r3, [sp, #28]
 8005234:	2300      	movs	r3, #0
 8005236:	930a      	str	r3, [sp, #40]	; 0x28
 8005238:	e7bf      	b.n	80051ba <_dtoa_r+0x1da>
 800523a:	2300      	movs	r3, #0
 800523c:	9308      	str	r3, [sp, #32]
 800523e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	dc55      	bgt.n	80052f0 <_dtoa_r+0x310>
 8005244:	2301      	movs	r3, #1
 8005246:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800524a:	461a      	mov	r2, r3
 800524c:	9209      	str	r2, [sp, #36]	; 0x24
 800524e:	e00c      	b.n	800526a <_dtoa_r+0x28a>
 8005250:	2301      	movs	r3, #1
 8005252:	e7f3      	b.n	800523c <_dtoa_r+0x25c>
 8005254:	2300      	movs	r3, #0
 8005256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005258:	9308      	str	r3, [sp, #32]
 800525a:	9b00      	ldr	r3, [sp, #0]
 800525c:	4413      	add	r3, r2
 800525e:	9302      	str	r3, [sp, #8]
 8005260:	3301      	adds	r3, #1
 8005262:	2b01      	cmp	r3, #1
 8005264:	9303      	str	r3, [sp, #12]
 8005266:	bfb8      	it	lt
 8005268:	2301      	movlt	r3, #1
 800526a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800526c:	2200      	movs	r2, #0
 800526e:	6042      	str	r2, [r0, #4]
 8005270:	2204      	movs	r2, #4
 8005272:	f102 0614 	add.w	r6, r2, #20
 8005276:	429e      	cmp	r6, r3
 8005278:	6841      	ldr	r1, [r0, #4]
 800527a:	d93d      	bls.n	80052f8 <_dtoa_r+0x318>
 800527c:	4620      	mov	r0, r4
 800527e:	f000 feeb 	bl	8006058 <_Balloc>
 8005282:	9001      	str	r0, [sp, #4]
 8005284:	2800      	cmp	r0, #0
 8005286:	d13b      	bne.n	8005300 <_dtoa_r+0x320>
 8005288:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <_dtoa_r+0x2f0>)
 800528a:	4602      	mov	r2, r0
 800528c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005290:	e6c0      	b.n	8005014 <_dtoa_r+0x34>
 8005292:	2301      	movs	r3, #1
 8005294:	e7df      	b.n	8005256 <_dtoa_r+0x276>
 8005296:	bf00      	nop
 8005298:	636f4361 	.word	0x636f4361
 800529c:	3fd287a7 	.word	0x3fd287a7
 80052a0:	8b60c8b3 	.word	0x8b60c8b3
 80052a4:	3fc68a28 	.word	0x3fc68a28
 80052a8:	509f79fb 	.word	0x509f79fb
 80052ac:	3fd34413 	.word	0x3fd34413
 80052b0:	080079d6 	.word	0x080079d6
 80052b4:	080079ed 	.word	0x080079ed
 80052b8:	7ff00000 	.word	0x7ff00000
 80052bc:	080079d2 	.word	0x080079d2
 80052c0:	080079c9 	.word	0x080079c9
 80052c4:	08007995 	.word	0x08007995
 80052c8:	3ff80000 	.word	0x3ff80000
 80052cc:	08007b18 	.word	0x08007b18
 80052d0:	08007a2c 	.word	0x08007a2c
 80052d4:	2501      	movs	r5, #1
 80052d6:	2300      	movs	r3, #0
 80052d8:	9306      	str	r3, [sp, #24]
 80052da:	9508      	str	r5, [sp, #32]
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	2312      	movs	r3, #18
 80052e8:	e7b0      	b.n	800524c <_dtoa_r+0x26c>
 80052ea:	2301      	movs	r3, #1
 80052ec:	9308      	str	r3, [sp, #32]
 80052ee:	e7f5      	b.n	80052dc <_dtoa_r+0x2fc>
 80052f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052f6:	e7b8      	b.n	800526a <_dtoa_r+0x28a>
 80052f8:	3101      	adds	r1, #1
 80052fa:	6041      	str	r1, [r0, #4]
 80052fc:	0052      	lsls	r2, r2, #1
 80052fe:	e7b8      	b.n	8005272 <_dtoa_r+0x292>
 8005300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005302:	9a01      	ldr	r2, [sp, #4]
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	9b03      	ldr	r3, [sp, #12]
 8005308:	2b0e      	cmp	r3, #14
 800530a:	f200 809d 	bhi.w	8005448 <_dtoa_r+0x468>
 800530e:	2d00      	cmp	r5, #0
 8005310:	f000 809a 	beq.w	8005448 <_dtoa_r+0x468>
 8005314:	9b00      	ldr	r3, [sp, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	dd32      	ble.n	8005380 <_dtoa_r+0x3a0>
 800531a:	4ab7      	ldr	r2, [pc, #732]	; (80055f8 <_dtoa_r+0x618>)
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005328:	9b00      	ldr	r3, [sp, #0]
 800532a:	05d8      	lsls	r0, r3, #23
 800532c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005330:	d516      	bpl.n	8005360 <_dtoa_r+0x380>
 8005332:	4bb2      	ldr	r3, [pc, #712]	; (80055fc <_dtoa_r+0x61c>)
 8005334:	ec51 0b19 	vmov	r0, r1, d9
 8005338:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800533c:	f7fb fa66 	bl	800080c <__aeabi_ddiv>
 8005340:	f007 070f 	and.w	r7, r7, #15
 8005344:	4682      	mov	sl, r0
 8005346:	468b      	mov	fp, r1
 8005348:	2503      	movs	r5, #3
 800534a:	4eac      	ldr	r6, [pc, #688]	; (80055fc <_dtoa_r+0x61c>)
 800534c:	b957      	cbnz	r7, 8005364 <_dtoa_r+0x384>
 800534e:	4642      	mov	r2, r8
 8005350:	464b      	mov	r3, r9
 8005352:	4650      	mov	r0, sl
 8005354:	4659      	mov	r1, fp
 8005356:	f7fb fa59 	bl	800080c <__aeabi_ddiv>
 800535a:	4682      	mov	sl, r0
 800535c:	468b      	mov	fp, r1
 800535e:	e028      	b.n	80053b2 <_dtoa_r+0x3d2>
 8005360:	2502      	movs	r5, #2
 8005362:	e7f2      	b.n	800534a <_dtoa_r+0x36a>
 8005364:	07f9      	lsls	r1, r7, #31
 8005366:	d508      	bpl.n	800537a <_dtoa_r+0x39a>
 8005368:	4640      	mov	r0, r8
 800536a:	4649      	mov	r1, r9
 800536c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005370:	f7fb f922 	bl	80005b8 <__aeabi_dmul>
 8005374:	3501      	adds	r5, #1
 8005376:	4680      	mov	r8, r0
 8005378:	4689      	mov	r9, r1
 800537a:	107f      	asrs	r7, r7, #1
 800537c:	3608      	adds	r6, #8
 800537e:	e7e5      	b.n	800534c <_dtoa_r+0x36c>
 8005380:	f000 809b 	beq.w	80054ba <_dtoa_r+0x4da>
 8005384:	9b00      	ldr	r3, [sp, #0]
 8005386:	4f9d      	ldr	r7, [pc, #628]	; (80055fc <_dtoa_r+0x61c>)
 8005388:	425e      	negs	r6, r3
 800538a:	4b9b      	ldr	r3, [pc, #620]	; (80055f8 <_dtoa_r+0x618>)
 800538c:	f006 020f 	and.w	r2, r6, #15
 8005390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	ec51 0b19 	vmov	r0, r1, d9
 800539c:	f7fb f90c 	bl	80005b8 <__aeabi_dmul>
 80053a0:	1136      	asrs	r6, r6, #4
 80053a2:	4682      	mov	sl, r0
 80053a4:	468b      	mov	fp, r1
 80053a6:	2300      	movs	r3, #0
 80053a8:	2502      	movs	r5, #2
 80053aa:	2e00      	cmp	r6, #0
 80053ac:	d17a      	bne.n	80054a4 <_dtoa_r+0x4c4>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1d3      	bne.n	800535a <_dtoa_r+0x37a>
 80053b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8082 	beq.w	80054be <_dtoa_r+0x4de>
 80053ba:	4b91      	ldr	r3, [pc, #580]	; (8005600 <_dtoa_r+0x620>)
 80053bc:	2200      	movs	r2, #0
 80053be:	4650      	mov	r0, sl
 80053c0:	4659      	mov	r1, fp
 80053c2:	f7fb fb6b 	bl	8000a9c <__aeabi_dcmplt>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d079      	beq.n	80054be <_dtoa_r+0x4de>
 80053ca:	9b03      	ldr	r3, [sp, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d076      	beq.n	80054be <_dtoa_r+0x4de>
 80053d0:	9b02      	ldr	r3, [sp, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	dd36      	ble.n	8005444 <_dtoa_r+0x464>
 80053d6:	9b00      	ldr	r3, [sp, #0]
 80053d8:	4650      	mov	r0, sl
 80053da:	4659      	mov	r1, fp
 80053dc:	1e5f      	subs	r7, r3, #1
 80053de:	2200      	movs	r2, #0
 80053e0:	4b88      	ldr	r3, [pc, #544]	; (8005604 <_dtoa_r+0x624>)
 80053e2:	f7fb f8e9 	bl	80005b8 <__aeabi_dmul>
 80053e6:	9e02      	ldr	r6, [sp, #8]
 80053e8:	4682      	mov	sl, r0
 80053ea:	468b      	mov	fp, r1
 80053ec:	3501      	adds	r5, #1
 80053ee:	4628      	mov	r0, r5
 80053f0:	f7fb f878 	bl	80004e4 <__aeabi_i2d>
 80053f4:	4652      	mov	r2, sl
 80053f6:	465b      	mov	r3, fp
 80053f8:	f7fb f8de 	bl	80005b8 <__aeabi_dmul>
 80053fc:	4b82      	ldr	r3, [pc, #520]	; (8005608 <_dtoa_r+0x628>)
 80053fe:	2200      	movs	r2, #0
 8005400:	f7fa ff24 	bl	800024c <__adddf3>
 8005404:	46d0      	mov	r8, sl
 8005406:	46d9      	mov	r9, fp
 8005408:	4682      	mov	sl, r0
 800540a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800540e:	2e00      	cmp	r6, #0
 8005410:	d158      	bne.n	80054c4 <_dtoa_r+0x4e4>
 8005412:	4b7e      	ldr	r3, [pc, #504]	; (800560c <_dtoa_r+0x62c>)
 8005414:	2200      	movs	r2, #0
 8005416:	4640      	mov	r0, r8
 8005418:	4649      	mov	r1, r9
 800541a:	f7fa ff15 	bl	8000248 <__aeabi_dsub>
 800541e:	4652      	mov	r2, sl
 8005420:	465b      	mov	r3, fp
 8005422:	4680      	mov	r8, r0
 8005424:	4689      	mov	r9, r1
 8005426:	f7fb fb57 	bl	8000ad8 <__aeabi_dcmpgt>
 800542a:	2800      	cmp	r0, #0
 800542c:	f040 8295 	bne.w	800595a <_dtoa_r+0x97a>
 8005430:	4652      	mov	r2, sl
 8005432:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005436:	4640      	mov	r0, r8
 8005438:	4649      	mov	r1, r9
 800543a:	f7fb fb2f 	bl	8000a9c <__aeabi_dcmplt>
 800543e:	2800      	cmp	r0, #0
 8005440:	f040 8289 	bne.w	8005956 <_dtoa_r+0x976>
 8005444:	ec5b ab19 	vmov	sl, fp, d9
 8005448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800544a:	2b00      	cmp	r3, #0
 800544c:	f2c0 8148 	blt.w	80056e0 <_dtoa_r+0x700>
 8005450:	9a00      	ldr	r2, [sp, #0]
 8005452:	2a0e      	cmp	r2, #14
 8005454:	f300 8144 	bgt.w	80056e0 <_dtoa_r+0x700>
 8005458:	4b67      	ldr	r3, [pc, #412]	; (80055f8 <_dtoa_r+0x618>)
 800545a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800545e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	f280 80d5 	bge.w	8005614 <_dtoa_r+0x634>
 800546a:	9b03      	ldr	r3, [sp, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f300 80d1 	bgt.w	8005614 <_dtoa_r+0x634>
 8005472:	f040 826f 	bne.w	8005954 <_dtoa_r+0x974>
 8005476:	4b65      	ldr	r3, [pc, #404]	; (800560c <_dtoa_r+0x62c>)
 8005478:	2200      	movs	r2, #0
 800547a:	4640      	mov	r0, r8
 800547c:	4649      	mov	r1, r9
 800547e:	f7fb f89b 	bl	80005b8 <__aeabi_dmul>
 8005482:	4652      	mov	r2, sl
 8005484:	465b      	mov	r3, fp
 8005486:	f7fb fb1d 	bl	8000ac4 <__aeabi_dcmpge>
 800548a:	9e03      	ldr	r6, [sp, #12]
 800548c:	4637      	mov	r7, r6
 800548e:	2800      	cmp	r0, #0
 8005490:	f040 8245 	bne.w	800591e <_dtoa_r+0x93e>
 8005494:	9d01      	ldr	r5, [sp, #4]
 8005496:	2331      	movs	r3, #49	; 0x31
 8005498:	f805 3b01 	strb.w	r3, [r5], #1
 800549c:	9b00      	ldr	r3, [sp, #0]
 800549e:	3301      	adds	r3, #1
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	e240      	b.n	8005926 <_dtoa_r+0x946>
 80054a4:	07f2      	lsls	r2, r6, #31
 80054a6:	d505      	bpl.n	80054b4 <_dtoa_r+0x4d4>
 80054a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ac:	f7fb f884 	bl	80005b8 <__aeabi_dmul>
 80054b0:	3501      	adds	r5, #1
 80054b2:	2301      	movs	r3, #1
 80054b4:	1076      	asrs	r6, r6, #1
 80054b6:	3708      	adds	r7, #8
 80054b8:	e777      	b.n	80053aa <_dtoa_r+0x3ca>
 80054ba:	2502      	movs	r5, #2
 80054bc:	e779      	b.n	80053b2 <_dtoa_r+0x3d2>
 80054be:	9f00      	ldr	r7, [sp, #0]
 80054c0:	9e03      	ldr	r6, [sp, #12]
 80054c2:	e794      	b.n	80053ee <_dtoa_r+0x40e>
 80054c4:	9901      	ldr	r1, [sp, #4]
 80054c6:	4b4c      	ldr	r3, [pc, #304]	; (80055f8 <_dtoa_r+0x618>)
 80054c8:	4431      	add	r1, r6
 80054ca:	910d      	str	r1, [sp, #52]	; 0x34
 80054cc:	9908      	ldr	r1, [sp, #32]
 80054ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054d6:	2900      	cmp	r1, #0
 80054d8:	d043      	beq.n	8005562 <_dtoa_r+0x582>
 80054da:	494d      	ldr	r1, [pc, #308]	; (8005610 <_dtoa_r+0x630>)
 80054dc:	2000      	movs	r0, #0
 80054de:	f7fb f995 	bl	800080c <__aeabi_ddiv>
 80054e2:	4652      	mov	r2, sl
 80054e4:	465b      	mov	r3, fp
 80054e6:	f7fa feaf 	bl	8000248 <__aeabi_dsub>
 80054ea:	9d01      	ldr	r5, [sp, #4]
 80054ec:	4682      	mov	sl, r0
 80054ee:	468b      	mov	fp, r1
 80054f0:	4649      	mov	r1, r9
 80054f2:	4640      	mov	r0, r8
 80054f4:	f7fb fb10 	bl	8000b18 <__aeabi_d2iz>
 80054f8:	4606      	mov	r6, r0
 80054fa:	f7fa fff3 	bl	80004e4 <__aeabi_i2d>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4640      	mov	r0, r8
 8005504:	4649      	mov	r1, r9
 8005506:	f7fa fe9f 	bl	8000248 <__aeabi_dsub>
 800550a:	3630      	adds	r6, #48	; 0x30
 800550c:	f805 6b01 	strb.w	r6, [r5], #1
 8005510:	4652      	mov	r2, sl
 8005512:	465b      	mov	r3, fp
 8005514:	4680      	mov	r8, r0
 8005516:	4689      	mov	r9, r1
 8005518:	f7fb fac0 	bl	8000a9c <__aeabi_dcmplt>
 800551c:	2800      	cmp	r0, #0
 800551e:	d163      	bne.n	80055e8 <_dtoa_r+0x608>
 8005520:	4642      	mov	r2, r8
 8005522:	464b      	mov	r3, r9
 8005524:	4936      	ldr	r1, [pc, #216]	; (8005600 <_dtoa_r+0x620>)
 8005526:	2000      	movs	r0, #0
 8005528:	f7fa fe8e 	bl	8000248 <__aeabi_dsub>
 800552c:	4652      	mov	r2, sl
 800552e:	465b      	mov	r3, fp
 8005530:	f7fb fab4 	bl	8000a9c <__aeabi_dcmplt>
 8005534:	2800      	cmp	r0, #0
 8005536:	f040 80b5 	bne.w	80056a4 <_dtoa_r+0x6c4>
 800553a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800553c:	429d      	cmp	r5, r3
 800553e:	d081      	beq.n	8005444 <_dtoa_r+0x464>
 8005540:	4b30      	ldr	r3, [pc, #192]	; (8005604 <_dtoa_r+0x624>)
 8005542:	2200      	movs	r2, #0
 8005544:	4650      	mov	r0, sl
 8005546:	4659      	mov	r1, fp
 8005548:	f7fb f836 	bl	80005b8 <__aeabi_dmul>
 800554c:	4b2d      	ldr	r3, [pc, #180]	; (8005604 <_dtoa_r+0x624>)
 800554e:	4682      	mov	sl, r0
 8005550:	468b      	mov	fp, r1
 8005552:	4640      	mov	r0, r8
 8005554:	4649      	mov	r1, r9
 8005556:	2200      	movs	r2, #0
 8005558:	f7fb f82e 	bl	80005b8 <__aeabi_dmul>
 800555c:	4680      	mov	r8, r0
 800555e:	4689      	mov	r9, r1
 8005560:	e7c6      	b.n	80054f0 <_dtoa_r+0x510>
 8005562:	4650      	mov	r0, sl
 8005564:	4659      	mov	r1, fp
 8005566:	f7fb f827 	bl	80005b8 <__aeabi_dmul>
 800556a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800556c:	9d01      	ldr	r5, [sp, #4]
 800556e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005570:	4682      	mov	sl, r0
 8005572:	468b      	mov	fp, r1
 8005574:	4649      	mov	r1, r9
 8005576:	4640      	mov	r0, r8
 8005578:	f7fb face 	bl	8000b18 <__aeabi_d2iz>
 800557c:	4606      	mov	r6, r0
 800557e:	f7fa ffb1 	bl	80004e4 <__aeabi_i2d>
 8005582:	3630      	adds	r6, #48	; 0x30
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4640      	mov	r0, r8
 800558a:	4649      	mov	r1, r9
 800558c:	f7fa fe5c 	bl	8000248 <__aeabi_dsub>
 8005590:	f805 6b01 	strb.w	r6, [r5], #1
 8005594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005596:	429d      	cmp	r5, r3
 8005598:	4680      	mov	r8, r0
 800559a:	4689      	mov	r9, r1
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	d124      	bne.n	80055ec <_dtoa_r+0x60c>
 80055a2:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <_dtoa_r+0x630>)
 80055a4:	4650      	mov	r0, sl
 80055a6:	4659      	mov	r1, fp
 80055a8:	f7fa fe50 	bl	800024c <__adddf3>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4640      	mov	r0, r8
 80055b2:	4649      	mov	r1, r9
 80055b4:	f7fb fa90 	bl	8000ad8 <__aeabi_dcmpgt>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d173      	bne.n	80056a4 <_dtoa_r+0x6c4>
 80055bc:	4652      	mov	r2, sl
 80055be:	465b      	mov	r3, fp
 80055c0:	4913      	ldr	r1, [pc, #76]	; (8005610 <_dtoa_r+0x630>)
 80055c2:	2000      	movs	r0, #0
 80055c4:	f7fa fe40 	bl	8000248 <__aeabi_dsub>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4640      	mov	r0, r8
 80055ce:	4649      	mov	r1, r9
 80055d0:	f7fb fa64 	bl	8000a9c <__aeabi_dcmplt>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	f43f af35 	beq.w	8005444 <_dtoa_r+0x464>
 80055da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80055dc:	1e6b      	subs	r3, r5, #1
 80055de:	930f      	str	r3, [sp, #60]	; 0x3c
 80055e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055e4:	2b30      	cmp	r3, #48	; 0x30
 80055e6:	d0f8      	beq.n	80055da <_dtoa_r+0x5fa>
 80055e8:	9700      	str	r7, [sp, #0]
 80055ea:	e049      	b.n	8005680 <_dtoa_r+0x6a0>
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <_dtoa_r+0x624>)
 80055ee:	f7fa ffe3 	bl	80005b8 <__aeabi_dmul>
 80055f2:	4680      	mov	r8, r0
 80055f4:	4689      	mov	r9, r1
 80055f6:	e7bd      	b.n	8005574 <_dtoa_r+0x594>
 80055f8:	08007b18 	.word	0x08007b18
 80055fc:	08007af0 	.word	0x08007af0
 8005600:	3ff00000 	.word	0x3ff00000
 8005604:	40240000 	.word	0x40240000
 8005608:	401c0000 	.word	0x401c0000
 800560c:	40140000 	.word	0x40140000
 8005610:	3fe00000 	.word	0x3fe00000
 8005614:	9d01      	ldr	r5, [sp, #4]
 8005616:	4656      	mov	r6, sl
 8005618:	465f      	mov	r7, fp
 800561a:	4642      	mov	r2, r8
 800561c:	464b      	mov	r3, r9
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	f7fb f8f3 	bl	800080c <__aeabi_ddiv>
 8005626:	f7fb fa77 	bl	8000b18 <__aeabi_d2iz>
 800562a:	4682      	mov	sl, r0
 800562c:	f7fa ff5a 	bl	80004e4 <__aeabi_i2d>
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	f7fa ffc0 	bl	80005b8 <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4630      	mov	r0, r6
 800563e:	4639      	mov	r1, r7
 8005640:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005644:	f7fa fe00 	bl	8000248 <__aeabi_dsub>
 8005648:	f805 6b01 	strb.w	r6, [r5], #1
 800564c:	9e01      	ldr	r6, [sp, #4]
 800564e:	9f03      	ldr	r7, [sp, #12]
 8005650:	1bae      	subs	r6, r5, r6
 8005652:	42b7      	cmp	r7, r6
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	d135      	bne.n	80056c6 <_dtoa_r+0x6e6>
 800565a:	f7fa fdf7 	bl	800024c <__adddf3>
 800565e:	4642      	mov	r2, r8
 8005660:	464b      	mov	r3, r9
 8005662:	4606      	mov	r6, r0
 8005664:	460f      	mov	r7, r1
 8005666:	f7fb fa37 	bl	8000ad8 <__aeabi_dcmpgt>
 800566a:	b9d0      	cbnz	r0, 80056a2 <_dtoa_r+0x6c2>
 800566c:	4642      	mov	r2, r8
 800566e:	464b      	mov	r3, r9
 8005670:	4630      	mov	r0, r6
 8005672:	4639      	mov	r1, r7
 8005674:	f7fb fa08 	bl	8000a88 <__aeabi_dcmpeq>
 8005678:	b110      	cbz	r0, 8005680 <_dtoa_r+0x6a0>
 800567a:	f01a 0f01 	tst.w	sl, #1
 800567e:	d110      	bne.n	80056a2 <_dtoa_r+0x6c2>
 8005680:	4620      	mov	r0, r4
 8005682:	ee18 1a10 	vmov	r1, s16
 8005686:	f000 fd27 	bl	80060d8 <_Bfree>
 800568a:	2300      	movs	r3, #0
 800568c:	9800      	ldr	r0, [sp, #0]
 800568e:	702b      	strb	r3, [r5, #0]
 8005690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005692:	3001      	adds	r0, #1
 8005694:	6018      	str	r0, [r3, #0]
 8005696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005698:	2b00      	cmp	r3, #0
 800569a:	f43f acf1 	beq.w	8005080 <_dtoa_r+0xa0>
 800569e:	601d      	str	r5, [r3, #0]
 80056a0:	e4ee      	b.n	8005080 <_dtoa_r+0xa0>
 80056a2:	9f00      	ldr	r7, [sp, #0]
 80056a4:	462b      	mov	r3, r5
 80056a6:	461d      	mov	r5, r3
 80056a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056ac:	2a39      	cmp	r2, #57	; 0x39
 80056ae:	d106      	bne.n	80056be <_dtoa_r+0x6de>
 80056b0:	9a01      	ldr	r2, [sp, #4]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d1f7      	bne.n	80056a6 <_dtoa_r+0x6c6>
 80056b6:	9901      	ldr	r1, [sp, #4]
 80056b8:	2230      	movs	r2, #48	; 0x30
 80056ba:	3701      	adds	r7, #1
 80056bc:	700a      	strb	r2, [r1, #0]
 80056be:	781a      	ldrb	r2, [r3, #0]
 80056c0:	3201      	adds	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	e790      	b.n	80055e8 <_dtoa_r+0x608>
 80056c6:	4ba6      	ldr	r3, [pc, #664]	; (8005960 <_dtoa_r+0x980>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	f7fa ff75 	bl	80005b8 <__aeabi_dmul>
 80056ce:	2200      	movs	r2, #0
 80056d0:	2300      	movs	r3, #0
 80056d2:	4606      	mov	r6, r0
 80056d4:	460f      	mov	r7, r1
 80056d6:	f7fb f9d7 	bl	8000a88 <__aeabi_dcmpeq>
 80056da:	2800      	cmp	r0, #0
 80056dc:	d09d      	beq.n	800561a <_dtoa_r+0x63a>
 80056de:	e7cf      	b.n	8005680 <_dtoa_r+0x6a0>
 80056e0:	9a08      	ldr	r2, [sp, #32]
 80056e2:	2a00      	cmp	r2, #0
 80056e4:	f000 80d7 	beq.w	8005896 <_dtoa_r+0x8b6>
 80056e8:	9a06      	ldr	r2, [sp, #24]
 80056ea:	2a01      	cmp	r2, #1
 80056ec:	f300 80ba 	bgt.w	8005864 <_dtoa_r+0x884>
 80056f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	f000 80b2 	beq.w	800585c <_dtoa_r+0x87c>
 80056f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056fc:	9e07      	ldr	r6, [sp, #28]
 80056fe:	9d04      	ldr	r5, [sp, #16]
 8005700:	9a04      	ldr	r2, [sp, #16]
 8005702:	441a      	add	r2, r3
 8005704:	9204      	str	r2, [sp, #16]
 8005706:	9a05      	ldr	r2, [sp, #20]
 8005708:	2101      	movs	r1, #1
 800570a:	441a      	add	r2, r3
 800570c:	4620      	mov	r0, r4
 800570e:	9205      	str	r2, [sp, #20]
 8005710:	f000 fd9a 	bl	8006248 <__i2b>
 8005714:	4607      	mov	r7, r0
 8005716:	2d00      	cmp	r5, #0
 8005718:	dd0c      	ble.n	8005734 <_dtoa_r+0x754>
 800571a:	9b05      	ldr	r3, [sp, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	dd09      	ble.n	8005734 <_dtoa_r+0x754>
 8005720:	42ab      	cmp	r3, r5
 8005722:	9a04      	ldr	r2, [sp, #16]
 8005724:	bfa8      	it	ge
 8005726:	462b      	movge	r3, r5
 8005728:	1ad2      	subs	r2, r2, r3
 800572a:	9204      	str	r2, [sp, #16]
 800572c:	9a05      	ldr	r2, [sp, #20]
 800572e:	1aed      	subs	r5, r5, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	9305      	str	r3, [sp, #20]
 8005734:	9b07      	ldr	r3, [sp, #28]
 8005736:	b31b      	cbz	r3, 8005780 <_dtoa_r+0x7a0>
 8005738:	9b08      	ldr	r3, [sp, #32]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80af 	beq.w	800589e <_dtoa_r+0x8be>
 8005740:	2e00      	cmp	r6, #0
 8005742:	dd13      	ble.n	800576c <_dtoa_r+0x78c>
 8005744:	4639      	mov	r1, r7
 8005746:	4632      	mov	r2, r6
 8005748:	4620      	mov	r0, r4
 800574a:	f000 fe3d 	bl	80063c8 <__pow5mult>
 800574e:	ee18 2a10 	vmov	r2, s16
 8005752:	4601      	mov	r1, r0
 8005754:	4607      	mov	r7, r0
 8005756:	4620      	mov	r0, r4
 8005758:	f000 fd8c 	bl	8006274 <__multiply>
 800575c:	ee18 1a10 	vmov	r1, s16
 8005760:	4680      	mov	r8, r0
 8005762:	4620      	mov	r0, r4
 8005764:	f000 fcb8 	bl	80060d8 <_Bfree>
 8005768:	ee08 8a10 	vmov	s16, r8
 800576c:	9b07      	ldr	r3, [sp, #28]
 800576e:	1b9a      	subs	r2, r3, r6
 8005770:	d006      	beq.n	8005780 <_dtoa_r+0x7a0>
 8005772:	ee18 1a10 	vmov	r1, s16
 8005776:	4620      	mov	r0, r4
 8005778:	f000 fe26 	bl	80063c8 <__pow5mult>
 800577c:	ee08 0a10 	vmov	s16, r0
 8005780:	2101      	movs	r1, #1
 8005782:	4620      	mov	r0, r4
 8005784:	f000 fd60 	bl	8006248 <__i2b>
 8005788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800578a:	2b00      	cmp	r3, #0
 800578c:	4606      	mov	r6, r0
 800578e:	f340 8088 	ble.w	80058a2 <_dtoa_r+0x8c2>
 8005792:	461a      	mov	r2, r3
 8005794:	4601      	mov	r1, r0
 8005796:	4620      	mov	r0, r4
 8005798:	f000 fe16 	bl	80063c8 <__pow5mult>
 800579c:	9b06      	ldr	r3, [sp, #24]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	4606      	mov	r6, r0
 80057a2:	f340 8081 	ble.w	80058a8 <_dtoa_r+0x8c8>
 80057a6:	f04f 0800 	mov.w	r8, #0
 80057aa:	6933      	ldr	r3, [r6, #16]
 80057ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80057b0:	6918      	ldr	r0, [r3, #16]
 80057b2:	f000 fcf9 	bl	80061a8 <__hi0bits>
 80057b6:	f1c0 0020 	rsb	r0, r0, #32
 80057ba:	9b05      	ldr	r3, [sp, #20]
 80057bc:	4418      	add	r0, r3
 80057be:	f010 001f 	ands.w	r0, r0, #31
 80057c2:	f000 8092 	beq.w	80058ea <_dtoa_r+0x90a>
 80057c6:	f1c0 0320 	rsb	r3, r0, #32
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	f340 808a 	ble.w	80058e4 <_dtoa_r+0x904>
 80057d0:	f1c0 001c 	rsb	r0, r0, #28
 80057d4:	9b04      	ldr	r3, [sp, #16]
 80057d6:	4403      	add	r3, r0
 80057d8:	9304      	str	r3, [sp, #16]
 80057da:	9b05      	ldr	r3, [sp, #20]
 80057dc:	4403      	add	r3, r0
 80057de:	4405      	add	r5, r0
 80057e0:	9305      	str	r3, [sp, #20]
 80057e2:	9b04      	ldr	r3, [sp, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	dd07      	ble.n	80057f8 <_dtoa_r+0x818>
 80057e8:	ee18 1a10 	vmov	r1, s16
 80057ec:	461a      	mov	r2, r3
 80057ee:	4620      	mov	r0, r4
 80057f0:	f000 fe44 	bl	800647c <__lshift>
 80057f4:	ee08 0a10 	vmov	s16, r0
 80057f8:	9b05      	ldr	r3, [sp, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	dd05      	ble.n	800580a <_dtoa_r+0x82a>
 80057fe:	4631      	mov	r1, r6
 8005800:	461a      	mov	r2, r3
 8005802:	4620      	mov	r0, r4
 8005804:	f000 fe3a 	bl	800647c <__lshift>
 8005808:	4606      	mov	r6, r0
 800580a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d06e      	beq.n	80058ee <_dtoa_r+0x90e>
 8005810:	ee18 0a10 	vmov	r0, s16
 8005814:	4631      	mov	r1, r6
 8005816:	f000 fea1 	bl	800655c <__mcmp>
 800581a:	2800      	cmp	r0, #0
 800581c:	da67      	bge.n	80058ee <_dtoa_r+0x90e>
 800581e:	9b00      	ldr	r3, [sp, #0]
 8005820:	3b01      	subs	r3, #1
 8005822:	ee18 1a10 	vmov	r1, s16
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	220a      	movs	r2, #10
 800582a:	2300      	movs	r3, #0
 800582c:	4620      	mov	r0, r4
 800582e:	f000 fc75 	bl	800611c <__multadd>
 8005832:	9b08      	ldr	r3, [sp, #32]
 8005834:	ee08 0a10 	vmov	s16, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 81b1 	beq.w	8005ba0 <_dtoa_r+0xbc0>
 800583e:	2300      	movs	r3, #0
 8005840:	4639      	mov	r1, r7
 8005842:	220a      	movs	r2, #10
 8005844:	4620      	mov	r0, r4
 8005846:	f000 fc69 	bl	800611c <__multadd>
 800584a:	9b02      	ldr	r3, [sp, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	4607      	mov	r7, r0
 8005850:	f300 808e 	bgt.w	8005970 <_dtoa_r+0x990>
 8005854:	9b06      	ldr	r3, [sp, #24]
 8005856:	2b02      	cmp	r3, #2
 8005858:	dc51      	bgt.n	80058fe <_dtoa_r+0x91e>
 800585a:	e089      	b.n	8005970 <_dtoa_r+0x990>
 800585c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800585e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005862:	e74b      	b.n	80056fc <_dtoa_r+0x71c>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	1e5e      	subs	r6, r3, #1
 8005868:	9b07      	ldr	r3, [sp, #28]
 800586a:	42b3      	cmp	r3, r6
 800586c:	bfbf      	itttt	lt
 800586e:	9b07      	ldrlt	r3, [sp, #28]
 8005870:	9607      	strlt	r6, [sp, #28]
 8005872:	1af2      	sublt	r2, r6, r3
 8005874:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005876:	bfb6      	itet	lt
 8005878:	189b      	addlt	r3, r3, r2
 800587a:	1b9e      	subge	r6, r3, r6
 800587c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	bfb8      	it	lt
 8005882:	2600      	movlt	r6, #0
 8005884:	2b00      	cmp	r3, #0
 8005886:	bfb7      	itett	lt
 8005888:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800588c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005890:	1a9d      	sublt	r5, r3, r2
 8005892:	2300      	movlt	r3, #0
 8005894:	e734      	b.n	8005700 <_dtoa_r+0x720>
 8005896:	9e07      	ldr	r6, [sp, #28]
 8005898:	9d04      	ldr	r5, [sp, #16]
 800589a:	9f08      	ldr	r7, [sp, #32]
 800589c:	e73b      	b.n	8005716 <_dtoa_r+0x736>
 800589e:	9a07      	ldr	r2, [sp, #28]
 80058a0:	e767      	b.n	8005772 <_dtoa_r+0x792>
 80058a2:	9b06      	ldr	r3, [sp, #24]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	dc18      	bgt.n	80058da <_dtoa_r+0x8fa>
 80058a8:	f1ba 0f00 	cmp.w	sl, #0
 80058ac:	d115      	bne.n	80058da <_dtoa_r+0x8fa>
 80058ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058b2:	b993      	cbnz	r3, 80058da <_dtoa_r+0x8fa>
 80058b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058b8:	0d1b      	lsrs	r3, r3, #20
 80058ba:	051b      	lsls	r3, r3, #20
 80058bc:	b183      	cbz	r3, 80058e0 <_dtoa_r+0x900>
 80058be:	9b04      	ldr	r3, [sp, #16]
 80058c0:	3301      	adds	r3, #1
 80058c2:	9304      	str	r3, [sp, #16]
 80058c4:	9b05      	ldr	r3, [sp, #20]
 80058c6:	3301      	adds	r3, #1
 80058c8:	9305      	str	r3, [sp, #20]
 80058ca:	f04f 0801 	mov.w	r8, #1
 80058ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f47f af6a 	bne.w	80057aa <_dtoa_r+0x7ca>
 80058d6:	2001      	movs	r0, #1
 80058d8:	e76f      	b.n	80057ba <_dtoa_r+0x7da>
 80058da:	f04f 0800 	mov.w	r8, #0
 80058de:	e7f6      	b.n	80058ce <_dtoa_r+0x8ee>
 80058e0:	4698      	mov	r8, r3
 80058e2:	e7f4      	b.n	80058ce <_dtoa_r+0x8ee>
 80058e4:	f43f af7d 	beq.w	80057e2 <_dtoa_r+0x802>
 80058e8:	4618      	mov	r0, r3
 80058ea:	301c      	adds	r0, #28
 80058ec:	e772      	b.n	80057d4 <_dtoa_r+0x7f4>
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dc37      	bgt.n	8005964 <_dtoa_r+0x984>
 80058f4:	9b06      	ldr	r3, [sp, #24]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	dd34      	ble.n	8005964 <_dtoa_r+0x984>
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	9302      	str	r3, [sp, #8]
 80058fe:	9b02      	ldr	r3, [sp, #8]
 8005900:	b96b      	cbnz	r3, 800591e <_dtoa_r+0x93e>
 8005902:	4631      	mov	r1, r6
 8005904:	2205      	movs	r2, #5
 8005906:	4620      	mov	r0, r4
 8005908:	f000 fc08 	bl	800611c <__multadd>
 800590c:	4601      	mov	r1, r0
 800590e:	4606      	mov	r6, r0
 8005910:	ee18 0a10 	vmov	r0, s16
 8005914:	f000 fe22 	bl	800655c <__mcmp>
 8005918:	2800      	cmp	r0, #0
 800591a:	f73f adbb 	bgt.w	8005494 <_dtoa_r+0x4b4>
 800591e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005920:	9d01      	ldr	r5, [sp, #4]
 8005922:	43db      	mvns	r3, r3
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	f04f 0800 	mov.w	r8, #0
 800592a:	4631      	mov	r1, r6
 800592c:	4620      	mov	r0, r4
 800592e:	f000 fbd3 	bl	80060d8 <_Bfree>
 8005932:	2f00      	cmp	r7, #0
 8005934:	f43f aea4 	beq.w	8005680 <_dtoa_r+0x6a0>
 8005938:	f1b8 0f00 	cmp.w	r8, #0
 800593c:	d005      	beq.n	800594a <_dtoa_r+0x96a>
 800593e:	45b8      	cmp	r8, r7
 8005940:	d003      	beq.n	800594a <_dtoa_r+0x96a>
 8005942:	4641      	mov	r1, r8
 8005944:	4620      	mov	r0, r4
 8005946:	f000 fbc7 	bl	80060d8 <_Bfree>
 800594a:	4639      	mov	r1, r7
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fbc3 	bl	80060d8 <_Bfree>
 8005952:	e695      	b.n	8005680 <_dtoa_r+0x6a0>
 8005954:	2600      	movs	r6, #0
 8005956:	4637      	mov	r7, r6
 8005958:	e7e1      	b.n	800591e <_dtoa_r+0x93e>
 800595a:	9700      	str	r7, [sp, #0]
 800595c:	4637      	mov	r7, r6
 800595e:	e599      	b.n	8005494 <_dtoa_r+0x4b4>
 8005960:	40240000 	.word	0x40240000
 8005964:	9b08      	ldr	r3, [sp, #32]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80ca 	beq.w	8005b00 <_dtoa_r+0xb20>
 800596c:	9b03      	ldr	r3, [sp, #12]
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	2d00      	cmp	r5, #0
 8005972:	dd05      	ble.n	8005980 <_dtoa_r+0x9a0>
 8005974:	4639      	mov	r1, r7
 8005976:	462a      	mov	r2, r5
 8005978:	4620      	mov	r0, r4
 800597a:	f000 fd7f 	bl	800647c <__lshift>
 800597e:	4607      	mov	r7, r0
 8005980:	f1b8 0f00 	cmp.w	r8, #0
 8005984:	d05b      	beq.n	8005a3e <_dtoa_r+0xa5e>
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4620      	mov	r0, r4
 800598a:	f000 fb65 	bl	8006058 <_Balloc>
 800598e:	4605      	mov	r5, r0
 8005990:	b928      	cbnz	r0, 800599e <_dtoa_r+0x9be>
 8005992:	4b87      	ldr	r3, [pc, #540]	; (8005bb0 <_dtoa_r+0xbd0>)
 8005994:	4602      	mov	r2, r0
 8005996:	f240 21ea 	movw	r1, #746	; 0x2ea
 800599a:	f7ff bb3b 	b.w	8005014 <_dtoa_r+0x34>
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	3202      	adds	r2, #2
 80059a2:	0092      	lsls	r2, r2, #2
 80059a4:	f107 010c 	add.w	r1, r7, #12
 80059a8:	300c      	adds	r0, #12
 80059aa:	f000 fb3b 	bl	8006024 <memcpy>
 80059ae:	2201      	movs	r2, #1
 80059b0:	4629      	mov	r1, r5
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 fd62 	bl	800647c <__lshift>
 80059b8:	9b01      	ldr	r3, [sp, #4]
 80059ba:	f103 0901 	add.w	r9, r3, #1
 80059be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80059c2:	4413      	add	r3, r2
 80059c4:	9305      	str	r3, [sp, #20]
 80059c6:	f00a 0301 	and.w	r3, sl, #1
 80059ca:	46b8      	mov	r8, r7
 80059cc:	9304      	str	r3, [sp, #16]
 80059ce:	4607      	mov	r7, r0
 80059d0:	4631      	mov	r1, r6
 80059d2:	ee18 0a10 	vmov	r0, s16
 80059d6:	f7ff fa76 	bl	8004ec6 <quorem>
 80059da:	4641      	mov	r1, r8
 80059dc:	9002      	str	r0, [sp, #8]
 80059de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80059e2:	ee18 0a10 	vmov	r0, s16
 80059e6:	f000 fdb9 	bl	800655c <__mcmp>
 80059ea:	463a      	mov	r2, r7
 80059ec:	9003      	str	r0, [sp, #12]
 80059ee:	4631      	mov	r1, r6
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 fdcf 	bl	8006594 <__mdiff>
 80059f6:	68c2      	ldr	r2, [r0, #12]
 80059f8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80059fc:	4605      	mov	r5, r0
 80059fe:	bb02      	cbnz	r2, 8005a42 <_dtoa_r+0xa62>
 8005a00:	4601      	mov	r1, r0
 8005a02:	ee18 0a10 	vmov	r0, s16
 8005a06:	f000 fda9 	bl	800655c <__mcmp>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	4620      	mov	r0, r4
 8005a10:	9207      	str	r2, [sp, #28]
 8005a12:	f000 fb61 	bl	80060d8 <_Bfree>
 8005a16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005a1a:	ea43 0102 	orr.w	r1, r3, r2
 8005a1e:	9b04      	ldr	r3, [sp, #16]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	464d      	mov	r5, r9
 8005a24:	d10f      	bne.n	8005a46 <_dtoa_r+0xa66>
 8005a26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a2a:	d02a      	beq.n	8005a82 <_dtoa_r+0xaa2>
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	dd02      	ble.n	8005a38 <_dtoa_r+0xa58>
 8005a32:	9b02      	ldr	r3, [sp, #8]
 8005a34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005a38:	f88b a000 	strb.w	sl, [fp]
 8005a3c:	e775      	b.n	800592a <_dtoa_r+0x94a>
 8005a3e:	4638      	mov	r0, r7
 8005a40:	e7ba      	b.n	80059b8 <_dtoa_r+0x9d8>
 8005a42:	2201      	movs	r2, #1
 8005a44:	e7e2      	b.n	8005a0c <_dtoa_r+0xa2c>
 8005a46:	9b03      	ldr	r3, [sp, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	db04      	blt.n	8005a56 <_dtoa_r+0xa76>
 8005a4c:	9906      	ldr	r1, [sp, #24]
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	9904      	ldr	r1, [sp, #16]
 8005a52:	430b      	orrs	r3, r1
 8005a54:	d122      	bne.n	8005a9c <_dtoa_r+0xabc>
 8005a56:	2a00      	cmp	r2, #0
 8005a58:	ddee      	ble.n	8005a38 <_dtoa_r+0xa58>
 8005a5a:	ee18 1a10 	vmov	r1, s16
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4620      	mov	r0, r4
 8005a62:	f000 fd0b 	bl	800647c <__lshift>
 8005a66:	4631      	mov	r1, r6
 8005a68:	ee08 0a10 	vmov	s16, r0
 8005a6c:	f000 fd76 	bl	800655c <__mcmp>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	dc03      	bgt.n	8005a7c <_dtoa_r+0xa9c>
 8005a74:	d1e0      	bne.n	8005a38 <_dtoa_r+0xa58>
 8005a76:	f01a 0f01 	tst.w	sl, #1
 8005a7a:	d0dd      	beq.n	8005a38 <_dtoa_r+0xa58>
 8005a7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a80:	d1d7      	bne.n	8005a32 <_dtoa_r+0xa52>
 8005a82:	2339      	movs	r3, #57	; 0x39
 8005a84:	f88b 3000 	strb.w	r3, [fp]
 8005a88:	462b      	mov	r3, r5
 8005a8a:	461d      	mov	r5, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a92:	2a39      	cmp	r2, #57	; 0x39
 8005a94:	d071      	beq.n	8005b7a <_dtoa_r+0xb9a>
 8005a96:	3201      	adds	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e746      	b.n	800592a <_dtoa_r+0x94a>
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	dd07      	ble.n	8005ab0 <_dtoa_r+0xad0>
 8005aa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005aa4:	d0ed      	beq.n	8005a82 <_dtoa_r+0xaa2>
 8005aa6:	f10a 0301 	add.w	r3, sl, #1
 8005aaa:	f88b 3000 	strb.w	r3, [fp]
 8005aae:	e73c      	b.n	800592a <_dtoa_r+0x94a>
 8005ab0:	9b05      	ldr	r3, [sp, #20]
 8005ab2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005ab6:	4599      	cmp	r9, r3
 8005ab8:	d047      	beq.n	8005b4a <_dtoa_r+0xb6a>
 8005aba:	ee18 1a10 	vmov	r1, s16
 8005abe:	2300      	movs	r3, #0
 8005ac0:	220a      	movs	r2, #10
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fb2a 	bl	800611c <__multadd>
 8005ac8:	45b8      	cmp	r8, r7
 8005aca:	ee08 0a10 	vmov	s16, r0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	f04f 020a 	mov.w	r2, #10
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	4620      	mov	r0, r4
 8005ada:	d106      	bne.n	8005aea <_dtoa_r+0xb0a>
 8005adc:	f000 fb1e 	bl	800611c <__multadd>
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	4607      	mov	r7, r0
 8005ae4:	f109 0901 	add.w	r9, r9, #1
 8005ae8:	e772      	b.n	80059d0 <_dtoa_r+0x9f0>
 8005aea:	f000 fb17 	bl	800611c <__multadd>
 8005aee:	4639      	mov	r1, r7
 8005af0:	4680      	mov	r8, r0
 8005af2:	2300      	movs	r3, #0
 8005af4:	220a      	movs	r2, #10
 8005af6:	4620      	mov	r0, r4
 8005af8:	f000 fb10 	bl	800611c <__multadd>
 8005afc:	4607      	mov	r7, r0
 8005afe:	e7f1      	b.n	8005ae4 <_dtoa_r+0xb04>
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	9302      	str	r3, [sp, #8]
 8005b04:	9d01      	ldr	r5, [sp, #4]
 8005b06:	ee18 0a10 	vmov	r0, s16
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	f7ff f9db 	bl	8004ec6 <quorem>
 8005b10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	f805 ab01 	strb.w	sl, [r5], #1
 8005b1a:	1aea      	subs	r2, r5, r3
 8005b1c:	9b02      	ldr	r3, [sp, #8]
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	dd09      	ble.n	8005b36 <_dtoa_r+0xb56>
 8005b22:	ee18 1a10 	vmov	r1, s16
 8005b26:	2300      	movs	r3, #0
 8005b28:	220a      	movs	r2, #10
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 faf6 	bl	800611c <__multadd>
 8005b30:	ee08 0a10 	vmov	s16, r0
 8005b34:	e7e7      	b.n	8005b06 <_dtoa_r+0xb26>
 8005b36:	9b02      	ldr	r3, [sp, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bfc8      	it	gt
 8005b3c:	461d      	movgt	r5, r3
 8005b3e:	9b01      	ldr	r3, [sp, #4]
 8005b40:	bfd8      	it	le
 8005b42:	2501      	movle	r5, #1
 8005b44:	441d      	add	r5, r3
 8005b46:	f04f 0800 	mov.w	r8, #0
 8005b4a:	ee18 1a10 	vmov	r1, s16
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4620      	mov	r0, r4
 8005b52:	f000 fc93 	bl	800647c <__lshift>
 8005b56:	4631      	mov	r1, r6
 8005b58:	ee08 0a10 	vmov	s16, r0
 8005b5c:	f000 fcfe 	bl	800655c <__mcmp>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	dc91      	bgt.n	8005a88 <_dtoa_r+0xaa8>
 8005b64:	d102      	bne.n	8005b6c <_dtoa_r+0xb8c>
 8005b66:	f01a 0f01 	tst.w	sl, #1
 8005b6a:	d18d      	bne.n	8005a88 <_dtoa_r+0xaa8>
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	461d      	mov	r5, r3
 8005b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b74:	2a30      	cmp	r2, #48	; 0x30
 8005b76:	d0fa      	beq.n	8005b6e <_dtoa_r+0xb8e>
 8005b78:	e6d7      	b.n	800592a <_dtoa_r+0x94a>
 8005b7a:	9a01      	ldr	r2, [sp, #4]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d184      	bne.n	8005a8a <_dtoa_r+0xaaa>
 8005b80:	9b00      	ldr	r3, [sp, #0]
 8005b82:	3301      	adds	r3, #1
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	2331      	movs	r3, #49	; 0x31
 8005b88:	7013      	strb	r3, [r2, #0]
 8005b8a:	e6ce      	b.n	800592a <_dtoa_r+0x94a>
 8005b8c:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <_dtoa_r+0xbd4>)
 8005b8e:	f7ff ba95 	b.w	80050bc <_dtoa_r+0xdc>
 8005b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f47f aa6e 	bne.w	8005076 <_dtoa_r+0x96>
 8005b9a:	4b07      	ldr	r3, [pc, #28]	; (8005bb8 <_dtoa_r+0xbd8>)
 8005b9c:	f7ff ba8e 	b.w	80050bc <_dtoa_r+0xdc>
 8005ba0:	9b02      	ldr	r3, [sp, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	dcae      	bgt.n	8005b04 <_dtoa_r+0xb24>
 8005ba6:	9b06      	ldr	r3, [sp, #24]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	f73f aea8 	bgt.w	80058fe <_dtoa_r+0x91e>
 8005bae:	e7a9      	b.n	8005b04 <_dtoa_r+0xb24>
 8005bb0:	08007a2c 	.word	0x08007a2c
 8005bb4:	08007994 	.word	0x08007994
 8005bb8:	080079c9 	.word	0x080079c9

08005bbc <__sflush_r>:
 8005bbc:	898a      	ldrh	r2, [r1, #12]
 8005bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	0710      	lsls	r0, r2, #28
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	d458      	bmi.n	8005c7c <__sflush_r+0xc0>
 8005bca:	684b      	ldr	r3, [r1, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	dc05      	bgt.n	8005bdc <__sflush_r+0x20>
 8005bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dc02      	bgt.n	8005bdc <__sflush_r+0x20>
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bde:	2e00      	cmp	r6, #0
 8005be0:	d0f9      	beq.n	8005bd6 <__sflush_r+0x1a>
 8005be2:	2300      	movs	r3, #0
 8005be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005be8:	682f      	ldr	r7, [r5, #0]
 8005bea:	602b      	str	r3, [r5, #0]
 8005bec:	d032      	beq.n	8005c54 <__sflush_r+0x98>
 8005bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	075a      	lsls	r2, r3, #29
 8005bf4:	d505      	bpl.n	8005c02 <__sflush_r+0x46>
 8005bf6:	6863      	ldr	r3, [r4, #4]
 8005bf8:	1ac0      	subs	r0, r0, r3
 8005bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bfc:	b10b      	cbz	r3, 8005c02 <__sflush_r+0x46>
 8005bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c00:	1ac0      	subs	r0, r0, r3
 8005c02:	2300      	movs	r3, #0
 8005c04:	4602      	mov	r2, r0
 8005c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c08:	6a21      	ldr	r1, [r4, #32]
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b0      	blx	r6
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	d106      	bne.n	8005c22 <__sflush_r+0x66>
 8005c14:	6829      	ldr	r1, [r5, #0]
 8005c16:	291d      	cmp	r1, #29
 8005c18:	d82c      	bhi.n	8005c74 <__sflush_r+0xb8>
 8005c1a:	4a2a      	ldr	r2, [pc, #168]	; (8005cc4 <__sflush_r+0x108>)
 8005c1c:	40ca      	lsrs	r2, r1
 8005c1e:	07d6      	lsls	r6, r2, #31
 8005c20:	d528      	bpl.n	8005c74 <__sflush_r+0xb8>
 8005c22:	2200      	movs	r2, #0
 8005c24:	6062      	str	r2, [r4, #4]
 8005c26:	04d9      	lsls	r1, r3, #19
 8005c28:	6922      	ldr	r2, [r4, #16]
 8005c2a:	6022      	str	r2, [r4, #0]
 8005c2c:	d504      	bpl.n	8005c38 <__sflush_r+0x7c>
 8005c2e:	1c42      	adds	r2, r0, #1
 8005c30:	d101      	bne.n	8005c36 <__sflush_r+0x7a>
 8005c32:	682b      	ldr	r3, [r5, #0]
 8005c34:	b903      	cbnz	r3, 8005c38 <__sflush_r+0x7c>
 8005c36:	6560      	str	r0, [r4, #84]	; 0x54
 8005c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c3a:	602f      	str	r7, [r5, #0]
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d0ca      	beq.n	8005bd6 <__sflush_r+0x1a>
 8005c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c44:	4299      	cmp	r1, r3
 8005c46:	d002      	beq.n	8005c4e <__sflush_r+0x92>
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f7fe f9e3 	bl	8004014 <_free_r>
 8005c4e:	2000      	movs	r0, #0
 8005c50:	6360      	str	r0, [r4, #52]	; 0x34
 8005c52:	e7c1      	b.n	8005bd8 <__sflush_r+0x1c>
 8005c54:	6a21      	ldr	r1, [r4, #32]
 8005c56:	2301      	movs	r3, #1
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b0      	blx	r6
 8005c5c:	1c41      	adds	r1, r0, #1
 8005c5e:	d1c7      	bne.n	8005bf0 <__sflush_r+0x34>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0c4      	beq.n	8005bf0 <__sflush_r+0x34>
 8005c66:	2b1d      	cmp	r3, #29
 8005c68:	d001      	beq.n	8005c6e <__sflush_r+0xb2>
 8005c6a:	2b16      	cmp	r3, #22
 8005c6c:	d101      	bne.n	8005c72 <__sflush_r+0xb6>
 8005c6e:	602f      	str	r7, [r5, #0]
 8005c70:	e7b1      	b.n	8005bd6 <__sflush_r+0x1a>
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c78:	81a3      	strh	r3, [r4, #12]
 8005c7a:	e7ad      	b.n	8005bd8 <__sflush_r+0x1c>
 8005c7c:	690f      	ldr	r7, [r1, #16]
 8005c7e:	2f00      	cmp	r7, #0
 8005c80:	d0a9      	beq.n	8005bd6 <__sflush_r+0x1a>
 8005c82:	0793      	lsls	r3, r2, #30
 8005c84:	680e      	ldr	r6, [r1, #0]
 8005c86:	bf08      	it	eq
 8005c88:	694b      	ldreq	r3, [r1, #20]
 8005c8a:	600f      	str	r7, [r1, #0]
 8005c8c:	bf18      	it	ne
 8005c8e:	2300      	movne	r3, #0
 8005c90:	eba6 0807 	sub.w	r8, r6, r7
 8005c94:	608b      	str	r3, [r1, #8]
 8005c96:	f1b8 0f00 	cmp.w	r8, #0
 8005c9a:	dd9c      	ble.n	8005bd6 <__sflush_r+0x1a>
 8005c9c:	6a21      	ldr	r1, [r4, #32]
 8005c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ca0:	4643      	mov	r3, r8
 8005ca2:	463a      	mov	r2, r7
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b0      	blx	r6
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	dc06      	bgt.n	8005cba <__sflush_r+0xfe>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cb8:	e78e      	b.n	8005bd8 <__sflush_r+0x1c>
 8005cba:	4407      	add	r7, r0
 8005cbc:	eba8 0800 	sub.w	r8, r8, r0
 8005cc0:	e7e9      	b.n	8005c96 <__sflush_r+0xda>
 8005cc2:	bf00      	nop
 8005cc4:	20400001 	.word	0x20400001

08005cc8 <_fflush_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	4605      	mov	r5, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	b913      	cbnz	r3, 8005cd8 <_fflush_r+0x10>
 8005cd2:	2500      	movs	r5, #0
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	b118      	cbz	r0, 8005ce2 <_fflush_r+0x1a>
 8005cda:	6983      	ldr	r3, [r0, #24]
 8005cdc:	b90b      	cbnz	r3, 8005ce2 <_fflush_r+0x1a>
 8005cde:	f000 f887 	bl	8005df0 <__sinit>
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <_fflush_r+0x6c>)
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	d11b      	bne.n	8005d20 <_fflush_r+0x58>
 8005ce8:	686c      	ldr	r4, [r5, #4]
 8005cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0ef      	beq.n	8005cd2 <_fflush_r+0xa>
 8005cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cf4:	07d0      	lsls	r0, r2, #31
 8005cf6:	d404      	bmi.n	8005d02 <_fflush_r+0x3a>
 8005cf8:	0599      	lsls	r1, r3, #22
 8005cfa:	d402      	bmi.n	8005d02 <_fflush_r+0x3a>
 8005cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cfe:	f7fe f976 	bl	8003fee <__retarget_lock_acquire_recursive>
 8005d02:	4628      	mov	r0, r5
 8005d04:	4621      	mov	r1, r4
 8005d06:	f7ff ff59 	bl	8005bbc <__sflush_r>
 8005d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d0c:	07da      	lsls	r2, r3, #31
 8005d0e:	4605      	mov	r5, r0
 8005d10:	d4e0      	bmi.n	8005cd4 <_fflush_r+0xc>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	059b      	lsls	r3, r3, #22
 8005d16:	d4dd      	bmi.n	8005cd4 <_fflush_r+0xc>
 8005d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d1a:	f7fe f969 	bl	8003ff0 <__retarget_lock_release_recursive>
 8005d1e:	e7d9      	b.n	8005cd4 <_fflush_r+0xc>
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <_fflush_r+0x70>)
 8005d22:	429c      	cmp	r4, r3
 8005d24:	d101      	bne.n	8005d2a <_fflush_r+0x62>
 8005d26:	68ac      	ldr	r4, [r5, #8]
 8005d28:	e7df      	b.n	8005cea <_fflush_r+0x22>
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <_fflush_r+0x74>)
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	bf08      	it	eq
 8005d30:	68ec      	ldreq	r4, [r5, #12]
 8005d32:	e7da      	b.n	8005cea <_fflush_r+0x22>
 8005d34:	08007a60 	.word	0x08007a60
 8005d38:	08007a80 	.word	0x08007a80
 8005d3c:	08007a40 	.word	0x08007a40

08005d40 <std>:
 8005d40:	2300      	movs	r3, #0
 8005d42:	b510      	push	{r4, lr}
 8005d44:	4604      	mov	r4, r0
 8005d46:	e9c0 3300 	strd	r3, r3, [r0]
 8005d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d4e:	6083      	str	r3, [r0, #8]
 8005d50:	8181      	strh	r1, [r0, #12]
 8005d52:	6643      	str	r3, [r0, #100]	; 0x64
 8005d54:	81c2      	strh	r2, [r0, #14]
 8005d56:	6183      	str	r3, [r0, #24]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	305c      	adds	r0, #92	; 0x5c
 8005d5e:	f7fe f951 	bl	8004004 <memset>
 8005d62:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <std+0x38>)
 8005d64:	6263      	str	r3, [r4, #36]	; 0x24
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <std+0x3c>)
 8005d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <std+0x40>)
 8005d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <std+0x44>)
 8005d70:	6224      	str	r4, [r4, #32]
 8005d72:	6323      	str	r3, [r4, #48]	; 0x30
 8005d74:	bd10      	pop	{r4, pc}
 8005d76:	bf00      	nop
 8005d78:	08006815 	.word	0x08006815
 8005d7c:	08006837 	.word	0x08006837
 8005d80:	0800686f 	.word	0x0800686f
 8005d84:	08006893 	.word	0x08006893

08005d88 <_cleanup_r>:
 8005d88:	4901      	ldr	r1, [pc, #4]	; (8005d90 <_cleanup_r+0x8>)
 8005d8a:	f000 b8af 	b.w	8005eec <_fwalk_reent>
 8005d8e:	bf00      	nop
 8005d90:	08005cc9 	.word	0x08005cc9

08005d94 <__sfmoreglue>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	2268      	movs	r2, #104	; 0x68
 8005d98:	1e4d      	subs	r5, r1, #1
 8005d9a:	4355      	muls	r5, r2
 8005d9c:	460e      	mov	r6, r1
 8005d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005da2:	f7fe f983 	bl	80040ac <_malloc_r>
 8005da6:	4604      	mov	r4, r0
 8005da8:	b140      	cbz	r0, 8005dbc <__sfmoreglue+0x28>
 8005daa:	2100      	movs	r1, #0
 8005dac:	e9c0 1600 	strd	r1, r6, [r0]
 8005db0:	300c      	adds	r0, #12
 8005db2:	60a0      	str	r0, [r4, #8]
 8005db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005db8:	f7fe f924 	bl	8004004 <memset>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}

08005dc0 <__sfp_lock_acquire>:
 8005dc0:	4801      	ldr	r0, [pc, #4]	; (8005dc8 <__sfp_lock_acquire+0x8>)
 8005dc2:	f7fe b914 	b.w	8003fee <__retarget_lock_acquire_recursive>
 8005dc6:	bf00      	nop
 8005dc8:	20000335 	.word	0x20000335

08005dcc <__sfp_lock_release>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	; (8005dd4 <__sfp_lock_release+0x8>)
 8005dce:	f7fe b90f 	b.w	8003ff0 <__retarget_lock_release_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	20000335 	.word	0x20000335

08005dd8 <__sinit_lock_acquire>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	; (8005de0 <__sinit_lock_acquire+0x8>)
 8005dda:	f7fe b908 	b.w	8003fee <__retarget_lock_acquire_recursive>
 8005dde:	bf00      	nop
 8005de0:	20000336 	.word	0x20000336

08005de4 <__sinit_lock_release>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__sinit_lock_release+0x8>)
 8005de6:	f7fe b903 	b.w	8003ff0 <__retarget_lock_release_recursive>
 8005dea:	bf00      	nop
 8005dec:	20000336 	.word	0x20000336

08005df0 <__sinit>:
 8005df0:	b510      	push	{r4, lr}
 8005df2:	4604      	mov	r4, r0
 8005df4:	f7ff fff0 	bl	8005dd8 <__sinit_lock_acquire>
 8005df8:	69a3      	ldr	r3, [r4, #24]
 8005dfa:	b11b      	cbz	r3, 8005e04 <__sinit+0x14>
 8005dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e00:	f7ff bff0 	b.w	8005de4 <__sinit_lock_release>
 8005e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e08:	6523      	str	r3, [r4, #80]	; 0x50
 8005e0a:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <__sinit+0x68>)
 8005e0c:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <__sinit+0x6c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	bf04      	itt	eq
 8005e16:	2301      	moveq	r3, #1
 8005e18:	61a3      	streq	r3, [r4, #24]
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 f820 	bl	8005e60 <__sfp>
 8005e20:	6060      	str	r0, [r4, #4]
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 f81c 	bl	8005e60 <__sfp>
 8005e28:	60a0      	str	r0, [r4, #8]
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 f818 	bl	8005e60 <__sfp>
 8005e30:	2200      	movs	r2, #0
 8005e32:	60e0      	str	r0, [r4, #12]
 8005e34:	2104      	movs	r1, #4
 8005e36:	6860      	ldr	r0, [r4, #4]
 8005e38:	f7ff ff82 	bl	8005d40 <std>
 8005e3c:	68a0      	ldr	r0, [r4, #8]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	2109      	movs	r1, #9
 8005e42:	f7ff ff7d 	bl	8005d40 <std>
 8005e46:	68e0      	ldr	r0, [r4, #12]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	2112      	movs	r1, #18
 8005e4c:	f7ff ff78 	bl	8005d40 <std>
 8005e50:	2301      	movs	r3, #1
 8005e52:	61a3      	str	r3, [r4, #24]
 8005e54:	e7d2      	b.n	8005dfc <__sinit+0xc>
 8005e56:	bf00      	nop
 8005e58:	08007980 	.word	0x08007980
 8005e5c:	08005d89 	.word	0x08005d89

08005e60 <__sfp>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	4607      	mov	r7, r0
 8005e64:	f7ff ffac 	bl	8005dc0 <__sfp_lock_acquire>
 8005e68:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <__sfp+0x84>)
 8005e6a:	681e      	ldr	r6, [r3, #0]
 8005e6c:	69b3      	ldr	r3, [r6, #24]
 8005e6e:	b913      	cbnz	r3, 8005e76 <__sfp+0x16>
 8005e70:	4630      	mov	r0, r6
 8005e72:	f7ff ffbd 	bl	8005df0 <__sinit>
 8005e76:	3648      	adds	r6, #72	; 0x48
 8005e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	d503      	bpl.n	8005e88 <__sfp+0x28>
 8005e80:	6833      	ldr	r3, [r6, #0]
 8005e82:	b30b      	cbz	r3, 8005ec8 <__sfp+0x68>
 8005e84:	6836      	ldr	r6, [r6, #0]
 8005e86:	e7f7      	b.n	8005e78 <__sfp+0x18>
 8005e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e8c:	b9d5      	cbnz	r5, 8005ec4 <__sfp+0x64>
 8005e8e:	4b16      	ldr	r3, [pc, #88]	; (8005ee8 <__sfp+0x88>)
 8005e90:	60e3      	str	r3, [r4, #12]
 8005e92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e96:	6665      	str	r5, [r4, #100]	; 0x64
 8005e98:	f7fe f8a8 	bl	8003fec <__retarget_lock_init_recursive>
 8005e9c:	f7ff ff96 	bl	8005dcc <__sfp_lock_release>
 8005ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ea8:	6025      	str	r5, [r4, #0]
 8005eaa:	61a5      	str	r5, [r4, #24]
 8005eac:	2208      	movs	r2, #8
 8005eae:	4629      	mov	r1, r5
 8005eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005eb4:	f7fe f8a6 	bl	8004004 <memset>
 8005eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec4:	3468      	adds	r4, #104	; 0x68
 8005ec6:	e7d9      	b.n	8005e7c <__sfp+0x1c>
 8005ec8:	2104      	movs	r1, #4
 8005eca:	4638      	mov	r0, r7
 8005ecc:	f7ff ff62 	bl	8005d94 <__sfmoreglue>
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	6030      	str	r0, [r6, #0]
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d1d5      	bne.n	8005e84 <__sfp+0x24>
 8005ed8:	f7ff ff78 	bl	8005dcc <__sfp_lock_release>
 8005edc:	230c      	movs	r3, #12
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	e7ee      	b.n	8005ec0 <__sfp+0x60>
 8005ee2:	bf00      	nop
 8005ee4:	08007980 	.word	0x08007980
 8005ee8:	ffff0001 	.word	0xffff0001

08005eec <_fwalk_reent>:
 8005eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	4688      	mov	r8, r1
 8005ef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ef8:	2700      	movs	r7, #0
 8005efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005efe:	f1b9 0901 	subs.w	r9, r9, #1
 8005f02:	d505      	bpl.n	8005f10 <_fwalk_reent+0x24>
 8005f04:	6824      	ldr	r4, [r4, #0]
 8005f06:	2c00      	cmp	r4, #0
 8005f08:	d1f7      	bne.n	8005efa <_fwalk_reent+0xe>
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f10:	89ab      	ldrh	r3, [r5, #12]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d907      	bls.n	8005f26 <_fwalk_reent+0x3a>
 8005f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	d003      	beq.n	8005f26 <_fwalk_reent+0x3a>
 8005f1e:	4629      	mov	r1, r5
 8005f20:	4630      	mov	r0, r6
 8005f22:	47c0      	blx	r8
 8005f24:	4307      	orrs	r7, r0
 8005f26:	3568      	adds	r5, #104	; 0x68
 8005f28:	e7e9      	b.n	8005efe <_fwalk_reent+0x12>
	...

08005f2c <_localeconv_r>:
 8005f2c:	4800      	ldr	r0, [pc, #0]	; (8005f30 <_localeconv_r+0x4>)
 8005f2e:	4770      	bx	lr
 8005f30:	20000184 	.word	0x20000184

08005f34 <__swhatbuf_r>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	460e      	mov	r6, r1
 8005f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	b096      	sub	sp, #88	; 0x58
 8005f40:	4614      	mov	r4, r2
 8005f42:	461d      	mov	r5, r3
 8005f44:	da08      	bge.n	8005f58 <__swhatbuf_r+0x24>
 8005f46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	061a      	lsls	r2, r3, #24
 8005f50:	d410      	bmi.n	8005f74 <__swhatbuf_r+0x40>
 8005f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f56:	e00e      	b.n	8005f76 <__swhatbuf_r+0x42>
 8005f58:	466a      	mov	r2, sp
 8005f5a:	f000 fccd 	bl	80068f8 <_fstat_r>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	dbf1      	blt.n	8005f46 <__swhatbuf_r+0x12>
 8005f62:	9a01      	ldr	r2, [sp, #4]
 8005f64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f6c:	425a      	negs	r2, r3
 8005f6e:	415a      	adcs	r2, r3
 8005f70:	602a      	str	r2, [r5, #0]
 8005f72:	e7ee      	b.n	8005f52 <__swhatbuf_r+0x1e>
 8005f74:	2340      	movs	r3, #64	; 0x40
 8005f76:	2000      	movs	r0, #0
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	b016      	add	sp, #88	; 0x58
 8005f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f80 <__smakebuf_r>:
 8005f80:	898b      	ldrh	r3, [r1, #12]
 8005f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f84:	079d      	lsls	r5, r3, #30
 8005f86:	4606      	mov	r6, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	d507      	bpl.n	8005f9c <__smakebuf_r+0x1c>
 8005f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	2301      	movs	r3, #1
 8005f96:	6163      	str	r3, [r4, #20]
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	ab01      	add	r3, sp, #4
 8005f9e:	466a      	mov	r2, sp
 8005fa0:	f7ff ffc8 	bl	8005f34 <__swhatbuf_r>
 8005fa4:	9900      	ldr	r1, [sp, #0]
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f7fe f87f 	bl	80040ac <_malloc_r>
 8005fae:	b948      	cbnz	r0, 8005fc4 <__smakebuf_r+0x44>
 8005fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb4:	059a      	lsls	r2, r3, #22
 8005fb6:	d4ef      	bmi.n	8005f98 <__smakebuf_r+0x18>
 8005fb8:	f023 0303 	bic.w	r3, r3, #3
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	e7e3      	b.n	8005f8c <__smakebuf_r+0xc>
 8005fc4:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <__smakebuf_r+0x7c>)
 8005fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	6020      	str	r0, [r4, #0]
 8005fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	9b00      	ldr	r3, [sp, #0]
 8005fd4:	6163      	str	r3, [r4, #20]
 8005fd6:	9b01      	ldr	r3, [sp, #4]
 8005fd8:	6120      	str	r0, [r4, #16]
 8005fda:	b15b      	cbz	r3, 8005ff4 <__smakebuf_r+0x74>
 8005fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f000 fc9b 	bl	800691c <_isatty_r>
 8005fe6:	b128      	cbz	r0, 8005ff4 <__smakebuf_r+0x74>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	f043 0301 	orr.w	r3, r3, #1
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	89a0      	ldrh	r0, [r4, #12]
 8005ff6:	4305      	orrs	r5, r0
 8005ff8:	81a5      	strh	r5, [r4, #12]
 8005ffa:	e7cd      	b.n	8005f98 <__smakebuf_r+0x18>
 8005ffc:	08005d89 	.word	0x08005d89

08006000 <__ascii_mbtowc>:
 8006000:	b082      	sub	sp, #8
 8006002:	b901      	cbnz	r1, 8006006 <__ascii_mbtowc+0x6>
 8006004:	a901      	add	r1, sp, #4
 8006006:	b142      	cbz	r2, 800601a <__ascii_mbtowc+0x1a>
 8006008:	b14b      	cbz	r3, 800601e <__ascii_mbtowc+0x1e>
 800600a:	7813      	ldrb	r3, [r2, #0]
 800600c:	600b      	str	r3, [r1, #0]
 800600e:	7812      	ldrb	r2, [r2, #0]
 8006010:	1e10      	subs	r0, r2, #0
 8006012:	bf18      	it	ne
 8006014:	2001      	movne	r0, #1
 8006016:	b002      	add	sp, #8
 8006018:	4770      	bx	lr
 800601a:	4610      	mov	r0, r2
 800601c:	e7fb      	b.n	8006016 <__ascii_mbtowc+0x16>
 800601e:	f06f 0001 	mvn.w	r0, #1
 8006022:	e7f8      	b.n	8006016 <__ascii_mbtowc+0x16>

08006024 <memcpy>:
 8006024:	440a      	add	r2, r1
 8006026:	4291      	cmp	r1, r2
 8006028:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800602c:	d100      	bne.n	8006030 <memcpy+0xc>
 800602e:	4770      	bx	lr
 8006030:	b510      	push	{r4, lr}
 8006032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800603a:	4291      	cmp	r1, r2
 800603c:	d1f9      	bne.n	8006032 <memcpy+0xe>
 800603e:	bd10      	pop	{r4, pc}

08006040 <__malloc_lock>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__malloc_lock+0x8>)
 8006042:	f7fd bfd4 	b.w	8003fee <__retarget_lock_acquire_recursive>
 8006046:	bf00      	nop
 8006048:	20000334 	.word	0x20000334

0800604c <__malloc_unlock>:
 800604c:	4801      	ldr	r0, [pc, #4]	; (8006054 <__malloc_unlock+0x8>)
 800604e:	f7fd bfcf 	b.w	8003ff0 <__retarget_lock_release_recursive>
 8006052:	bf00      	nop
 8006054:	20000334 	.word	0x20000334

08006058 <_Balloc>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800605c:	4604      	mov	r4, r0
 800605e:	460d      	mov	r5, r1
 8006060:	b976      	cbnz	r6, 8006080 <_Balloc+0x28>
 8006062:	2010      	movs	r0, #16
 8006064:	f7fd ffc6 	bl	8003ff4 <malloc>
 8006068:	4602      	mov	r2, r0
 800606a:	6260      	str	r0, [r4, #36]	; 0x24
 800606c:	b920      	cbnz	r0, 8006078 <_Balloc+0x20>
 800606e:	4b18      	ldr	r3, [pc, #96]	; (80060d0 <_Balloc+0x78>)
 8006070:	4818      	ldr	r0, [pc, #96]	; (80060d4 <_Balloc+0x7c>)
 8006072:	2166      	movs	r1, #102	; 0x66
 8006074:	f7fd fef2 	bl	8003e5c <__assert_func>
 8006078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800607c:	6006      	str	r6, [r0, #0]
 800607e:	60c6      	str	r6, [r0, #12]
 8006080:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006082:	68f3      	ldr	r3, [r6, #12]
 8006084:	b183      	cbz	r3, 80060a8 <_Balloc+0x50>
 8006086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800608e:	b9b8      	cbnz	r0, 80060c0 <_Balloc+0x68>
 8006090:	2101      	movs	r1, #1
 8006092:	fa01 f605 	lsl.w	r6, r1, r5
 8006096:	1d72      	adds	r2, r6, #5
 8006098:	0092      	lsls	r2, r2, #2
 800609a:	4620      	mov	r0, r4
 800609c:	f000 fb60 	bl	8006760 <_calloc_r>
 80060a0:	b160      	cbz	r0, 80060bc <_Balloc+0x64>
 80060a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060a6:	e00e      	b.n	80060c6 <_Balloc+0x6e>
 80060a8:	2221      	movs	r2, #33	; 0x21
 80060aa:	2104      	movs	r1, #4
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 fb57 	bl	8006760 <_calloc_r>
 80060b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b4:	60f0      	str	r0, [r6, #12]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e4      	bne.n	8006086 <_Balloc+0x2e>
 80060bc:	2000      	movs	r0, #0
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	6802      	ldr	r2, [r0, #0]
 80060c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060c6:	2300      	movs	r3, #0
 80060c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060cc:	e7f7      	b.n	80060be <_Balloc+0x66>
 80060ce:	bf00      	nop
 80060d0:	080079d6 	.word	0x080079d6
 80060d4:	08007aaa 	.word	0x08007aaa

080060d8 <_Bfree>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060dc:	4605      	mov	r5, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	b976      	cbnz	r6, 8006100 <_Bfree+0x28>
 80060e2:	2010      	movs	r0, #16
 80060e4:	f7fd ff86 	bl	8003ff4 <malloc>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6268      	str	r0, [r5, #36]	; 0x24
 80060ec:	b920      	cbnz	r0, 80060f8 <_Bfree+0x20>
 80060ee:	4b09      	ldr	r3, [pc, #36]	; (8006114 <_Bfree+0x3c>)
 80060f0:	4809      	ldr	r0, [pc, #36]	; (8006118 <_Bfree+0x40>)
 80060f2:	218a      	movs	r1, #138	; 0x8a
 80060f4:	f7fd feb2 	bl	8003e5c <__assert_func>
 80060f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060fc:	6006      	str	r6, [r0, #0]
 80060fe:	60c6      	str	r6, [r0, #12]
 8006100:	b13c      	cbz	r4, 8006112 <_Bfree+0x3a>
 8006102:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006104:	6862      	ldr	r2, [r4, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800610c:	6021      	str	r1, [r4, #0]
 800610e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	080079d6 	.word	0x080079d6
 8006118:	08007aaa 	.word	0x08007aaa

0800611c <__multadd>:
 800611c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006120:	690d      	ldr	r5, [r1, #16]
 8006122:	4607      	mov	r7, r0
 8006124:	460c      	mov	r4, r1
 8006126:	461e      	mov	r6, r3
 8006128:	f101 0c14 	add.w	ip, r1, #20
 800612c:	2000      	movs	r0, #0
 800612e:	f8dc 3000 	ldr.w	r3, [ip]
 8006132:	b299      	uxth	r1, r3
 8006134:	fb02 6101 	mla	r1, r2, r1, r6
 8006138:	0c1e      	lsrs	r6, r3, #16
 800613a:	0c0b      	lsrs	r3, r1, #16
 800613c:	fb02 3306 	mla	r3, r2, r6, r3
 8006140:	b289      	uxth	r1, r1
 8006142:	3001      	adds	r0, #1
 8006144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006148:	4285      	cmp	r5, r0
 800614a:	f84c 1b04 	str.w	r1, [ip], #4
 800614e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006152:	dcec      	bgt.n	800612e <__multadd+0x12>
 8006154:	b30e      	cbz	r6, 800619a <__multadd+0x7e>
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	42ab      	cmp	r3, r5
 800615a:	dc19      	bgt.n	8006190 <__multadd+0x74>
 800615c:	6861      	ldr	r1, [r4, #4]
 800615e:	4638      	mov	r0, r7
 8006160:	3101      	adds	r1, #1
 8006162:	f7ff ff79 	bl	8006058 <_Balloc>
 8006166:	4680      	mov	r8, r0
 8006168:	b928      	cbnz	r0, 8006176 <__multadd+0x5a>
 800616a:	4602      	mov	r2, r0
 800616c:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <__multadd+0x84>)
 800616e:	480d      	ldr	r0, [pc, #52]	; (80061a4 <__multadd+0x88>)
 8006170:	21b5      	movs	r1, #181	; 0xb5
 8006172:	f7fd fe73 	bl	8003e5c <__assert_func>
 8006176:	6922      	ldr	r2, [r4, #16]
 8006178:	3202      	adds	r2, #2
 800617a:	f104 010c 	add.w	r1, r4, #12
 800617e:	0092      	lsls	r2, r2, #2
 8006180:	300c      	adds	r0, #12
 8006182:	f7ff ff4f 	bl	8006024 <memcpy>
 8006186:	4621      	mov	r1, r4
 8006188:	4638      	mov	r0, r7
 800618a:	f7ff ffa5 	bl	80060d8 <_Bfree>
 800618e:	4644      	mov	r4, r8
 8006190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006194:	3501      	adds	r5, #1
 8006196:	615e      	str	r6, [r3, #20]
 8006198:	6125      	str	r5, [r4, #16]
 800619a:	4620      	mov	r0, r4
 800619c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a0:	08007a2c 	.word	0x08007a2c
 80061a4:	08007aaa 	.word	0x08007aaa

080061a8 <__hi0bits>:
 80061a8:	0c03      	lsrs	r3, r0, #16
 80061aa:	041b      	lsls	r3, r3, #16
 80061ac:	b9d3      	cbnz	r3, 80061e4 <__hi0bits+0x3c>
 80061ae:	0400      	lsls	r0, r0, #16
 80061b0:	2310      	movs	r3, #16
 80061b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80061b6:	bf04      	itt	eq
 80061b8:	0200      	lsleq	r0, r0, #8
 80061ba:	3308      	addeq	r3, #8
 80061bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80061c0:	bf04      	itt	eq
 80061c2:	0100      	lsleq	r0, r0, #4
 80061c4:	3304      	addeq	r3, #4
 80061c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80061ca:	bf04      	itt	eq
 80061cc:	0080      	lsleq	r0, r0, #2
 80061ce:	3302      	addeq	r3, #2
 80061d0:	2800      	cmp	r0, #0
 80061d2:	db05      	blt.n	80061e0 <__hi0bits+0x38>
 80061d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80061d8:	f103 0301 	add.w	r3, r3, #1
 80061dc:	bf08      	it	eq
 80061de:	2320      	moveq	r3, #32
 80061e0:	4618      	mov	r0, r3
 80061e2:	4770      	bx	lr
 80061e4:	2300      	movs	r3, #0
 80061e6:	e7e4      	b.n	80061b2 <__hi0bits+0xa>

080061e8 <__lo0bits>:
 80061e8:	6803      	ldr	r3, [r0, #0]
 80061ea:	f013 0207 	ands.w	r2, r3, #7
 80061ee:	4601      	mov	r1, r0
 80061f0:	d00b      	beq.n	800620a <__lo0bits+0x22>
 80061f2:	07da      	lsls	r2, r3, #31
 80061f4:	d423      	bmi.n	800623e <__lo0bits+0x56>
 80061f6:	0798      	lsls	r0, r3, #30
 80061f8:	bf49      	itett	mi
 80061fa:	085b      	lsrmi	r3, r3, #1
 80061fc:	089b      	lsrpl	r3, r3, #2
 80061fe:	2001      	movmi	r0, #1
 8006200:	600b      	strmi	r3, [r1, #0]
 8006202:	bf5c      	itt	pl
 8006204:	600b      	strpl	r3, [r1, #0]
 8006206:	2002      	movpl	r0, #2
 8006208:	4770      	bx	lr
 800620a:	b298      	uxth	r0, r3
 800620c:	b9a8      	cbnz	r0, 800623a <__lo0bits+0x52>
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	2010      	movs	r0, #16
 8006212:	b2da      	uxtb	r2, r3
 8006214:	b90a      	cbnz	r2, 800621a <__lo0bits+0x32>
 8006216:	3008      	adds	r0, #8
 8006218:	0a1b      	lsrs	r3, r3, #8
 800621a:	071a      	lsls	r2, r3, #28
 800621c:	bf04      	itt	eq
 800621e:	091b      	lsreq	r3, r3, #4
 8006220:	3004      	addeq	r0, #4
 8006222:	079a      	lsls	r2, r3, #30
 8006224:	bf04      	itt	eq
 8006226:	089b      	lsreq	r3, r3, #2
 8006228:	3002      	addeq	r0, #2
 800622a:	07da      	lsls	r2, r3, #31
 800622c:	d403      	bmi.n	8006236 <__lo0bits+0x4e>
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	f100 0001 	add.w	r0, r0, #1
 8006234:	d005      	beq.n	8006242 <__lo0bits+0x5a>
 8006236:	600b      	str	r3, [r1, #0]
 8006238:	4770      	bx	lr
 800623a:	4610      	mov	r0, r2
 800623c:	e7e9      	b.n	8006212 <__lo0bits+0x2a>
 800623e:	2000      	movs	r0, #0
 8006240:	4770      	bx	lr
 8006242:	2020      	movs	r0, #32
 8006244:	4770      	bx	lr
	...

08006248 <__i2b>:
 8006248:	b510      	push	{r4, lr}
 800624a:	460c      	mov	r4, r1
 800624c:	2101      	movs	r1, #1
 800624e:	f7ff ff03 	bl	8006058 <_Balloc>
 8006252:	4602      	mov	r2, r0
 8006254:	b928      	cbnz	r0, 8006262 <__i2b+0x1a>
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <__i2b+0x24>)
 8006258:	4805      	ldr	r0, [pc, #20]	; (8006270 <__i2b+0x28>)
 800625a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800625e:	f7fd fdfd 	bl	8003e5c <__assert_func>
 8006262:	2301      	movs	r3, #1
 8006264:	6144      	str	r4, [r0, #20]
 8006266:	6103      	str	r3, [r0, #16]
 8006268:	bd10      	pop	{r4, pc}
 800626a:	bf00      	nop
 800626c:	08007a2c 	.word	0x08007a2c
 8006270:	08007aaa 	.word	0x08007aaa

08006274 <__multiply>:
 8006274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006278:	4691      	mov	r9, r2
 800627a:	690a      	ldr	r2, [r1, #16]
 800627c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006280:	429a      	cmp	r2, r3
 8006282:	bfb8      	it	lt
 8006284:	460b      	movlt	r3, r1
 8006286:	460c      	mov	r4, r1
 8006288:	bfbc      	itt	lt
 800628a:	464c      	movlt	r4, r9
 800628c:	4699      	movlt	r9, r3
 800628e:	6927      	ldr	r7, [r4, #16]
 8006290:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006294:	68a3      	ldr	r3, [r4, #8]
 8006296:	6861      	ldr	r1, [r4, #4]
 8006298:	eb07 060a 	add.w	r6, r7, sl
 800629c:	42b3      	cmp	r3, r6
 800629e:	b085      	sub	sp, #20
 80062a0:	bfb8      	it	lt
 80062a2:	3101      	addlt	r1, #1
 80062a4:	f7ff fed8 	bl	8006058 <_Balloc>
 80062a8:	b930      	cbnz	r0, 80062b8 <__multiply+0x44>
 80062aa:	4602      	mov	r2, r0
 80062ac:	4b44      	ldr	r3, [pc, #272]	; (80063c0 <__multiply+0x14c>)
 80062ae:	4845      	ldr	r0, [pc, #276]	; (80063c4 <__multiply+0x150>)
 80062b0:	f240 115d 	movw	r1, #349	; 0x15d
 80062b4:	f7fd fdd2 	bl	8003e5c <__assert_func>
 80062b8:	f100 0514 	add.w	r5, r0, #20
 80062bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062c0:	462b      	mov	r3, r5
 80062c2:	2200      	movs	r2, #0
 80062c4:	4543      	cmp	r3, r8
 80062c6:	d321      	bcc.n	800630c <__multiply+0x98>
 80062c8:	f104 0314 	add.w	r3, r4, #20
 80062cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80062d0:	f109 0314 	add.w	r3, r9, #20
 80062d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80062d8:	9202      	str	r2, [sp, #8]
 80062da:	1b3a      	subs	r2, r7, r4
 80062dc:	3a15      	subs	r2, #21
 80062de:	f022 0203 	bic.w	r2, r2, #3
 80062e2:	3204      	adds	r2, #4
 80062e4:	f104 0115 	add.w	r1, r4, #21
 80062e8:	428f      	cmp	r7, r1
 80062ea:	bf38      	it	cc
 80062ec:	2204      	movcc	r2, #4
 80062ee:	9201      	str	r2, [sp, #4]
 80062f0:	9a02      	ldr	r2, [sp, #8]
 80062f2:	9303      	str	r3, [sp, #12]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d80c      	bhi.n	8006312 <__multiply+0x9e>
 80062f8:	2e00      	cmp	r6, #0
 80062fa:	dd03      	ble.n	8006304 <__multiply+0x90>
 80062fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006300:	2b00      	cmp	r3, #0
 8006302:	d05a      	beq.n	80063ba <__multiply+0x146>
 8006304:	6106      	str	r6, [r0, #16]
 8006306:	b005      	add	sp, #20
 8006308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630c:	f843 2b04 	str.w	r2, [r3], #4
 8006310:	e7d8      	b.n	80062c4 <__multiply+0x50>
 8006312:	f8b3 a000 	ldrh.w	sl, [r3]
 8006316:	f1ba 0f00 	cmp.w	sl, #0
 800631a:	d024      	beq.n	8006366 <__multiply+0xf2>
 800631c:	f104 0e14 	add.w	lr, r4, #20
 8006320:	46a9      	mov	r9, r5
 8006322:	f04f 0c00 	mov.w	ip, #0
 8006326:	f85e 2b04 	ldr.w	r2, [lr], #4
 800632a:	f8d9 1000 	ldr.w	r1, [r9]
 800632e:	fa1f fb82 	uxth.w	fp, r2
 8006332:	b289      	uxth	r1, r1
 8006334:	fb0a 110b 	mla	r1, sl, fp, r1
 8006338:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800633c:	f8d9 2000 	ldr.w	r2, [r9]
 8006340:	4461      	add	r1, ip
 8006342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006346:	fb0a c20b 	mla	r2, sl, fp, ip
 800634a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800634e:	b289      	uxth	r1, r1
 8006350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006354:	4577      	cmp	r7, lr
 8006356:	f849 1b04 	str.w	r1, [r9], #4
 800635a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800635e:	d8e2      	bhi.n	8006326 <__multiply+0xb2>
 8006360:	9a01      	ldr	r2, [sp, #4]
 8006362:	f845 c002 	str.w	ip, [r5, r2]
 8006366:	9a03      	ldr	r2, [sp, #12]
 8006368:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800636c:	3304      	adds	r3, #4
 800636e:	f1b9 0f00 	cmp.w	r9, #0
 8006372:	d020      	beq.n	80063b6 <__multiply+0x142>
 8006374:	6829      	ldr	r1, [r5, #0]
 8006376:	f104 0c14 	add.w	ip, r4, #20
 800637a:	46ae      	mov	lr, r5
 800637c:	f04f 0a00 	mov.w	sl, #0
 8006380:	f8bc b000 	ldrh.w	fp, [ip]
 8006384:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006388:	fb09 220b 	mla	r2, r9, fp, r2
 800638c:	4492      	add	sl, r2
 800638e:	b289      	uxth	r1, r1
 8006390:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006394:	f84e 1b04 	str.w	r1, [lr], #4
 8006398:	f85c 2b04 	ldr.w	r2, [ip], #4
 800639c:	f8be 1000 	ldrh.w	r1, [lr]
 80063a0:	0c12      	lsrs	r2, r2, #16
 80063a2:	fb09 1102 	mla	r1, r9, r2, r1
 80063a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80063aa:	4567      	cmp	r7, ip
 80063ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063b0:	d8e6      	bhi.n	8006380 <__multiply+0x10c>
 80063b2:	9a01      	ldr	r2, [sp, #4]
 80063b4:	50a9      	str	r1, [r5, r2]
 80063b6:	3504      	adds	r5, #4
 80063b8:	e79a      	b.n	80062f0 <__multiply+0x7c>
 80063ba:	3e01      	subs	r6, #1
 80063bc:	e79c      	b.n	80062f8 <__multiply+0x84>
 80063be:	bf00      	nop
 80063c0:	08007a2c 	.word	0x08007a2c
 80063c4:	08007aaa 	.word	0x08007aaa

080063c8 <__pow5mult>:
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063cc:	4615      	mov	r5, r2
 80063ce:	f012 0203 	ands.w	r2, r2, #3
 80063d2:	4606      	mov	r6, r0
 80063d4:	460f      	mov	r7, r1
 80063d6:	d007      	beq.n	80063e8 <__pow5mult+0x20>
 80063d8:	4c25      	ldr	r4, [pc, #148]	; (8006470 <__pow5mult+0xa8>)
 80063da:	3a01      	subs	r2, #1
 80063dc:	2300      	movs	r3, #0
 80063de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063e2:	f7ff fe9b 	bl	800611c <__multadd>
 80063e6:	4607      	mov	r7, r0
 80063e8:	10ad      	asrs	r5, r5, #2
 80063ea:	d03d      	beq.n	8006468 <__pow5mult+0xa0>
 80063ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063ee:	b97c      	cbnz	r4, 8006410 <__pow5mult+0x48>
 80063f0:	2010      	movs	r0, #16
 80063f2:	f7fd fdff 	bl	8003ff4 <malloc>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6270      	str	r0, [r6, #36]	; 0x24
 80063fa:	b928      	cbnz	r0, 8006408 <__pow5mult+0x40>
 80063fc:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <__pow5mult+0xac>)
 80063fe:	481e      	ldr	r0, [pc, #120]	; (8006478 <__pow5mult+0xb0>)
 8006400:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006404:	f7fd fd2a 	bl	8003e5c <__assert_func>
 8006408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800640c:	6004      	str	r4, [r0, #0]
 800640e:	60c4      	str	r4, [r0, #12]
 8006410:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006418:	b94c      	cbnz	r4, 800642e <__pow5mult+0x66>
 800641a:	f240 2171 	movw	r1, #625	; 0x271
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff ff12 	bl	8006248 <__i2b>
 8006424:	2300      	movs	r3, #0
 8006426:	f8c8 0008 	str.w	r0, [r8, #8]
 800642a:	4604      	mov	r4, r0
 800642c:	6003      	str	r3, [r0, #0]
 800642e:	f04f 0900 	mov.w	r9, #0
 8006432:	07eb      	lsls	r3, r5, #31
 8006434:	d50a      	bpl.n	800644c <__pow5mult+0x84>
 8006436:	4639      	mov	r1, r7
 8006438:	4622      	mov	r2, r4
 800643a:	4630      	mov	r0, r6
 800643c:	f7ff ff1a 	bl	8006274 <__multiply>
 8006440:	4639      	mov	r1, r7
 8006442:	4680      	mov	r8, r0
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff fe47 	bl	80060d8 <_Bfree>
 800644a:	4647      	mov	r7, r8
 800644c:	106d      	asrs	r5, r5, #1
 800644e:	d00b      	beq.n	8006468 <__pow5mult+0xa0>
 8006450:	6820      	ldr	r0, [r4, #0]
 8006452:	b938      	cbnz	r0, 8006464 <__pow5mult+0x9c>
 8006454:	4622      	mov	r2, r4
 8006456:	4621      	mov	r1, r4
 8006458:	4630      	mov	r0, r6
 800645a:	f7ff ff0b 	bl	8006274 <__multiply>
 800645e:	6020      	str	r0, [r4, #0]
 8006460:	f8c0 9000 	str.w	r9, [r0]
 8006464:	4604      	mov	r4, r0
 8006466:	e7e4      	b.n	8006432 <__pow5mult+0x6a>
 8006468:	4638      	mov	r0, r7
 800646a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800646e:	bf00      	nop
 8006470:	08007be0 	.word	0x08007be0
 8006474:	080079d6 	.word	0x080079d6
 8006478:	08007aaa 	.word	0x08007aaa

0800647c <__lshift>:
 800647c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	460c      	mov	r4, r1
 8006482:	6849      	ldr	r1, [r1, #4]
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	4607      	mov	r7, r0
 800648e:	4691      	mov	r9, r2
 8006490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006494:	f108 0601 	add.w	r6, r8, #1
 8006498:	42b3      	cmp	r3, r6
 800649a:	db0b      	blt.n	80064b4 <__lshift+0x38>
 800649c:	4638      	mov	r0, r7
 800649e:	f7ff fddb 	bl	8006058 <_Balloc>
 80064a2:	4605      	mov	r5, r0
 80064a4:	b948      	cbnz	r0, 80064ba <__lshift+0x3e>
 80064a6:	4602      	mov	r2, r0
 80064a8:	4b2a      	ldr	r3, [pc, #168]	; (8006554 <__lshift+0xd8>)
 80064aa:	482b      	ldr	r0, [pc, #172]	; (8006558 <__lshift+0xdc>)
 80064ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064b0:	f7fd fcd4 	bl	8003e5c <__assert_func>
 80064b4:	3101      	adds	r1, #1
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	e7ee      	b.n	8006498 <__lshift+0x1c>
 80064ba:	2300      	movs	r3, #0
 80064bc:	f100 0114 	add.w	r1, r0, #20
 80064c0:	f100 0210 	add.w	r2, r0, #16
 80064c4:	4618      	mov	r0, r3
 80064c6:	4553      	cmp	r3, sl
 80064c8:	db37      	blt.n	800653a <__lshift+0xbe>
 80064ca:	6920      	ldr	r0, [r4, #16]
 80064cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064d0:	f104 0314 	add.w	r3, r4, #20
 80064d4:	f019 091f 	ands.w	r9, r9, #31
 80064d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064e0:	d02f      	beq.n	8006542 <__lshift+0xc6>
 80064e2:	f1c9 0e20 	rsb	lr, r9, #32
 80064e6:	468a      	mov	sl, r1
 80064e8:	f04f 0c00 	mov.w	ip, #0
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	fa02 f209 	lsl.w	r2, r2, r9
 80064f2:	ea42 020c 	orr.w	r2, r2, ip
 80064f6:	f84a 2b04 	str.w	r2, [sl], #4
 80064fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80064fe:	4298      	cmp	r0, r3
 8006500:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006504:	d8f2      	bhi.n	80064ec <__lshift+0x70>
 8006506:	1b03      	subs	r3, r0, r4
 8006508:	3b15      	subs	r3, #21
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	3304      	adds	r3, #4
 8006510:	f104 0215 	add.w	r2, r4, #21
 8006514:	4290      	cmp	r0, r2
 8006516:	bf38      	it	cc
 8006518:	2304      	movcc	r3, #4
 800651a:	f841 c003 	str.w	ip, [r1, r3]
 800651e:	f1bc 0f00 	cmp.w	ip, #0
 8006522:	d001      	beq.n	8006528 <__lshift+0xac>
 8006524:	f108 0602 	add.w	r6, r8, #2
 8006528:	3e01      	subs	r6, #1
 800652a:	4638      	mov	r0, r7
 800652c:	612e      	str	r6, [r5, #16]
 800652e:	4621      	mov	r1, r4
 8006530:	f7ff fdd2 	bl	80060d8 <_Bfree>
 8006534:	4628      	mov	r0, r5
 8006536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653a:	f842 0f04 	str.w	r0, [r2, #4]!
 800653e:	3301      	adds	r3, #1
 8006540:	e7c1      	b.n	80064c6 <__lshift+0x4a>
 8006542:	3904      	subs	r1, #4
 8006544:	f853 2b04 	ldr.w	r2, [r3], #4
 8006548:	f841 2f04 	str.w	r2, [r1, #4]!
 800654c:	4298      	cmp	r0, r3
 800654e:	d8f9      	bhi.n	8006544 <__lshift+0xc8>
 8006550:	e7ea      	b.n	8006528 <__lshift+0xac>
 8006552:	bf00      	nop
 8006554:	08007a2c 	.word	0x08007a2c
 8006558:	08007aaa 	.word	0x08007aaa

0800655c <__mcmp>:
 800655c:	b530      	push	{r4, r5, lr}
 800655e:	6902      	ldr	r2, [r0, #16]
 8006560:	690c      	ldr	r4, [r1, #16]
 8006562:	1b12      	subs	r2, r2, r4
 8006564:	d10e      	bne.n	8006584 <__mcmp+0x28>
 8006566:	f100 0314 	add.w	r3, r0, #20
 800656a:	3114      	adds	r1, #20
 800656c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006570:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006574:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006578:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800657c:	42a5      	cmp	r5, r4
 800657e:	d003      	beq.n	8006588 <__mcmp+0x2c>
 8006580:	d305      	bcc.n	800658e <__mcmp+0x32>
 8006582:	2201      	movs	r2, #1
 8006584:	4610      	mov	r0, r2
 8006586:	bd30      	pop	{r4, r5, pc}
 8006588:	4283      	cmp	r3, r0
 800658a:	d3f3      	bcc.n	8006574 <__mcmp+0x18>
 800658c:	e7fa      	b.n	8006584 <__mcmp+0x28>
 800658e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006592:	e7f7      	b.n	8006584 <__mcmp+0x28>

08006594 <__mdiff>:
 8006594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	460c      	mov	r4, r1
 800659a:	4606      	mov	r6, r0
 800659c:	4611      	mov	r1, r2
 800659e:	4620      	mov	r0, r4
 80065a0:	4690      	mov	r8, r2
 80065a2:	f7ff ffdb 	bl	800655c <__mcmp>
 80065a6:	1e05      	subs	r5, r0, #0
 80065a8:	d110      	bne.n	80065cc <__mdiff+0x38>
 80065aa:	4629      	mov	r1, r5
 80065ac:	4630      	mov	r0, r6
 80065ae:	f7ff fd53 	bl	8006058 <_Balloc>
 80065b2:	b930      	cbnz	r0, 80065c2 <__mdiff+0x2e>
 80065b4:	4b3a      	ldr	r3, [pc, #232]	; (80066a0 <__mdiff+0x10c>)
 80065b6:	4602      	mov	r2, r0
 80065b8:	f240 2132 	movw	r1, #562	; 0x232
 80065bc:	4839      	ldr	r0, [pc, #228]	; (80066a4 <__mdiff+0x110>)
 80065be:	f7fd fc4d 	bl	8003e5c <__assert_func>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065cc:	bfa4      	itt	ge
 80065ce:	4643      	movge	r3, r8
 80065d0:	46a0      	movge	r8, r4
 80065d2:	4630      	mov	r0, r6
 80065d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80065d8:	bfa6      	itte	ge
 80065da:	461c      	movge	r4, r3
 80065dc:	2500      	movge	r5, #0
 80065de:	2501      	movlt	r5, #1
 80065e0:	f7ff fd3a 	bl	8006058 <_Balloc>
 80065e4:	b920      	cbnz	r0, 80065f0 <__mdiff+0x5c>
 80065e6:	4b2e      	ldr	r3, [pc, #184]	; (80066a0 <__mdiff+0x10c>)
 80065e8:	4602      	mov	r2, r0
 80065ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065ee:	e7e5      	b.n	80065bc <__mdiff+0x28>
 80065f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80065f4:	6926      	ldr	r6, [r4, #16]
 80065f6:	60c5      	str	r5, [r0, #12]
 80065f8:	f104 0914 	add.w	r9, r4, #20
 80065fc:	f108 0514 	add.w	r5, r8, #20
 8006600:	f100 0e14 	add.w	lr, r0, #20
 8006604:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006608:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800660c:	f108 0210 	add.w	r2, r8, #16
 8006610:	46f2      	mov	sl, lr
 8006612:	2100      	movs	r1, #0
 8006614:	f859 3b04 	ldr.w	r3, [r9], #4
 8006618:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800661c:	fa1f f883 	uxth.w	r8, r3
 8006620:	fa11 f18b 	uxtah	r1, r1, fp
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	eba1 0808 	sub.w	r8, r1, r8
 800662a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800662e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006632:	fa1f f888 	uxth.w	r8, r8
 8006636:	1419      	asrs	r1, r3, #16
 8006638:	454e      	cmp	r6, r9
 800663a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800663e:	f84a 3b04 	str.w	r3, [sl], #4
 8006642:	d8e7      	bhi.n	8006614 <__mdiff+0x80>
 8006644:	1b33      	subs	r3, r6, r4
 8006646:	3b15      	subs	r3, #21
 8006648:	f023 0303 	bic.w	r3, r3, #3
 800664c:	3304      	adds	r3, #4
 800664e:	3415      	adds	r4, #21
 8006650:	42a6      	cmp	r6, r4
 8006652:	bf38      	it	cc
 8006654:	2304      	movcc	r3, #4
 8006656:	441d      	add	r5, r3
 8006658:	4473      	add	r3, lr
 800665a:	469e      	mov	lr, r3
 800665c:	462e      	mov	r6, r5
 800665e:	4566      	cmp	r6, ip
 8006660:	d30e      	bcc.n	8006680 <__mdiff+0xec>
 8006662:	f10c 0203 	add.w	r2, ip, #3
 8006666:	1b52      	subs	r2, r2, r5
 8006668:	f022 0203 	bic.w	r2, r2, #3
 800666c:	3d03      	subs	r5, #3
 800666e:	45ac      	cmp	ip, r5
 8006670:	bf38      	it	cc
 8006672:	2200      	movcc	r2, #0
 8006674:	441a      	add	r2, r3
 8006676:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800667a:	b17b      	cbz	r3, 800669c <__mdiff+0x108>
 800667c:	6107      	str	r7, [r0, #16]
 800667e:	e7a3      	b.n	80065c8 <__mdiff+0x34>
 8006680:	f856 8b04 	ldr.w	r8, [r6], #4
 8006684:	fa11 f288 	uxtah	r2, r1, r8
 8006688:	1414      	asrs	r4, r2, #16
 800668a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800668e:	b292      	uxth	r2, r2
 8006690:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006694:	f84e 2b04 	str.w	r2, [lr], #4
 8006698:	1421      	asrs	r1, r4, #16
 800669a:	e7e0      	b.n	800665e <__mdiff+0xca>
 800669c:	3f01      	subs	r7, #1
 800669e:	e7ea      	b.n	8006676 <__mdiff+0xe2>
 80066a0:	08007a2c 	.word	0x08007a2c
 80066a4:	08007aaa 	.word	0x08007aaa

080066a8 <__d2b>:
 80066a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066ac:	4689      	mov	r9, r1
 80066ae:	2101      	movs	r1, #1
 80066b0:	ec57 6b10 	vmov	r6, r7, d0
 80066b4:	4690      	mov	r8, r2
 80066b6:	f7ff fccf 	bl	8006058 <_Balloc>
 80066ba:	4604      	mov	r4, r0
 80066bc:	b930      	cbnz	r0, 80066cc <__d2b+0x24>
 80066be:	4602      	mov	r2, r0
 80066c0:	4b25      	ldr	r3, [pc, #148]	; (8006758 <__d2b+0xb0>)
 80066c2:	4826      	ldr	r0, [pc, #152]	; (800675c <__d2b+0xb4>)
 80066c4:	f240 310a 	movw	r1, #778	; 0x30a
 80066c8:	f7fd fbc8 	bl	8003e5c <__assert_func>
 80066cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80066d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066d4:	bb35      	cbnz	r5, 8006724 <__d2b+0x7c>
 80066d6:	2e00      	cmp	r6, #0
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	d028      	beq.n	800672e <__d2b+0x86>
 80066dc:	4668      	mov	r0, sp
 80066de:	9600      	str	r6, [sp, #0]
 80066e0:	f7ff fd82 	bl	80061e8 <__lo0bits>
 80066e4:	9900      	ldr	r1, [sp, #0]
 80066e6:	b300      	cbz	r0, 800672a <__d2b+0x82>
 80066e8:	9a01      	ldr	r2, [sp, #4]
 80066ea:	f1c0 0320 	rsb	r3, r0, #32
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	430b      	orrs	r3, r1
 80066f4:	40c2      	lsrs	r2, r0
 80066f6:	6163      	str	r3, [r4, #20]
 80066f8:	9201      	str	r2, [sp, #4]
 80066fa:	9b01      	ldr	r3, [sp, #4]
 80066fc:	61a3      	str	r3, [r4, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bf14      	ite	ne
 8006702:	2202      	movne	r2, #2
 8006704:	2201      	moveq	r2, #1
 8006706:	6122      	str	r2, [r4, #16]
 8006708:	b1d5      	cbz	r5, 8006740 <__d2b+0x98>
 800670a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800670e:	4405      	add	r5, r0
 8006710:	f8c9 5000 	str.w	r5, [r9]
 8006714:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006718:	f8c8 0000 	str.w	r0, [r8]
 800671c:	4620      	mov	r0, r4
 800671e:	b003      	add	sp, #12
 8006720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006728:	e7d5      	b.n	80066d6 <__d2b+0x2e>
 800672a:	6161      	str	r1, [r4, #20]
 800672c:	e7e5      	b.n	80066fa <__d2b+0x52>
 800672e:	a801      	add	r0, sp, #4
 8006730:	f7ff fd5a 	bl	80061e8 <__lo0bits>
 8006734:	9b01      	ldr	r3, [sp, #4]
 8006736:	6163      	str	r3, [r4, #20]
 8006738:	2201      	movs	r2, #1
 800673a:	6122      	str	r2, [r4, #16]
 800673c:	3020      	adds	r0, #32
 800673e:	e7e3      	b.n	8006708 <__d2b+0x60>
 8006740:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006744:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006748:	f8c9 0000 	str.w	r0, [r9]
 800674c:	6918      	ldr	r0, [r3, #16]
 800674e:	f7ff fd2b 	bl	80061a8 <__hi0bits>
 8006752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006756:	e7df      	b.n	8006718 <__d2b+0x70>
 8006758:	08007a2c 	.word	0x08007a2c
 800675c:	08007aaa 	.word	0x08007aaa

08006760 <_calloc_r>:
 8006760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006762:	fba1 2402 	umull	r2, r4, r1, r2
 8006766:	b94c      	cbnz	r4, 800677c <_calloc_r+0x1c>
 8006768:	4611      	mov	r1, r2
 800676a:	9201      	str	r2, [sp, #4]
 800676c:	f7fd fc9e 	bl	80040ac <_malloc_r>
 8006770:	9a01      	ldr	r2, [sp, #4]
 8006772:	4605      	mov	r5, r0
 8006774:	b930      	cbnz	r0, 8006784 <_calloc_r+0x24>
 8006776:	4628      	mov	r0, r5
 8006778:	b003      	add	sp, #12
 800677a:	bd30      	pop	{r4, r5, pc}
 800677c:	220c      	movs	r2, #12
 800677e:	6002      	str	r2, [r0, #0]
 8006780:	2500      	movs	r5, #0
 8006782:	e7f8      	b.n	8006776 <_calloc_r+0x16>
 8006784:	4621      	mov	r1, r4
 8006786:	f7fd fc3d 	bl	8004004 <memset>
 800678a:	e7f4      	b.n	8006776 <_calloc_r+0x16>

0800678c <_raise_r>:
 800678c:	291f      	cmp	r1, #31
 800678e:	b538      	push	{r3, r4, r5, lr}
 8006790:	4604      	mov	r4, r0
 8006792:	460d      	mov	r5, r1
 8006794:	d904      	bls.n	80067a0 <_raise_r+0x14>
 8006796:	2316      	movs	r3, #22
 8006798:	6003      	str	r3, [r0, #0]
 800679a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800679e:	bd38      	pop	{r3, r4, r5, pc}
 80067a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80067a2:	b112      	cbz	r2, 80067aa <_raise_r+0x1e>
 80067a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067a8:	b94b      	cbnz	r3, 80067be <_raise_r+0x32>
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 f830 	bl	8006810 <_getpid_r>
 80067b0:	462a      	mov	r2, r5
 80067b2:	4601      	mov	r1, r0
 80067b4:	4620      	mov	r0, r4
 80067b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ba:	f000 b817 	b.w	80067ec <_kill_r>
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d00a      	beq.n	80067d8 <_raise_r+0x4c>
 80067c2:	1c59      	adds	r1, r3, #1
 80067c4:	d103      	bne.n	80067ce <_raise_r+0x42>
 80067c6:	2316      	movs	r3, #22
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	2001      	movs	r0, #1
 80067cc:	e7e7      	b.n	800679e <_raise_r+0x12>
 80067ce:	2400      	movs	r4, #0
 80067d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067d4:	4628      	mov	r0, r5
 80067d6:	4798      	blx	r3
 80067d8:	2000      	movs	r0, #0
 80067da:	e7e0      	b.n	800679e <_raise_r+0x12>

080067dc <raise>:
 80067dc:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <raise+0xc>)
 80067de:	4601      	mov	r1, r0
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	f7ff bfd3 	b.w	800678c <_raise_r>
 80067e6:	bf00      	nop
 80067e8:	20000030 	.word	0x20000030

080067ec <_kill_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4d07      	ldr	r5, [pc, #28]	; (800680c <_kill_r+0x20>)
 80067f0:	2300      	movs	r3, #0
 80067f2:	4604      	mov	r4, r0
 80067f4:	4608      	mov	r0, r1
 80067f6:	4611      	mov	r1, r2
 80067f8:	602b      	str	r3, [r5, #0]
 80067fa:	f7fb fabb 	bl	8001d74 <_kill>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	d102      	bne.n	8006808 <_kill_r+0x1c>
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	b103      	cbz	r3, 8006808 <_kill_r+0x1c>
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	bd38      	pop	{r3, r4, r5, pc}
 800680a:	bf00      	nop
 800680c:	20000340 	.word	0x20000340

08006810 <_getpid_r>:
 8006810:	f7fb baa8 	b.w	8001d64 <_getpid>

08006814 <__sread>:
 8006814:	b510      	push	{r4, lr}
 8006816:	460c      	mov	r4, r1
 8006818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681c:	f000 f8a0 	bl	8006960 <_read_r>
 8006820:	2800      	cmp	r0, #0
 8006822:	bfab      	itete	ge
 8006824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006826:	89a3      	ldrhlt	r3, [r4, #12]
 8006828:	181b      	addge	r3, r3, r0
 800682a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800682e:	bfac      	ite	ge
 8006830:	6563      	strge	r3, [r4, #84]	; 0x54
 8006832:	81a3      	strhlt	r3, [r4, #12]
 8006834:	bd10      	pop	{r4, pc}

08006836 <__swrite>:
 8006836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683a:	461f      	mov	r7, r3
 800683c:	898b      	ldrh	r3, [r1, #12]
 800683e:	05db      	lsls	r3, r3, #23
 8006840:	4605      	mov	r5, r0
 8006842:	460c      	mov	r4, r1
 8006844:	4616      	mov	r6, r2
 8006846:	d505      	bpl.n	8006854 <__swrite+0x1e>
 8006848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684c:	2302      	movs	r3, #2
 800684e:	2200      	movs	r2, #0
 8006850:	f000 f874 	bl	800693c <_lseek_r>
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800685a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800685e:	81a3      	strh	r3, [r4, #12]
 8006860:	4632      	mov	r2, r6
 8006862:	463b      	mov	r3, r7
 8006864:	4628      	mov	r0, r5
 8006866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800686a:	f000 b823 	b.w	80068b4 <_write_r>

0800686e <__sseek>:
 800686e:	b510      	push	{r4, lr}
 8006870:	460c      	mov	r4, r1
 8006872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006876:	f000 f861 	bl	800693c <_lseek_r>
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	bf15      	itete	ne
 8006880:	6560      	strne	r0, [r4, #84]	; 0x54
 8006882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800688a:	81a3      	strheq	r3, [r4, #12]
 800688c:	bf18      	it	ne
 800688e:	81a3      	strhne	r3, [r4, #12]
 8006890:	bd10      	pop	{r4, pc}

08006892 <__sclose>:
 8006892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006896:	f000 b81f 	b.w	80068d8 <_close_r>

0800689a <__ascii_wctomb>:
 800689a:	b149      	cbz	r1, 80068b0 <__ascii_wctomb+0x16>
 800689c:	2aff      	cmp	r2, #255	; 0xff
 800689e:	bf85      	ittet	hi
 80068a0:	238a      	movhi	r3, #138	; 0x8a
 80068a2:	6003      	strhi	r3, [r0, #0]
 80068a4:	700a      	strbls	r2, [r1, #0]
 80068a6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80068aa:	bf98      	it	ls
 80068ac:	2001      	movls	r0, #1
 80068ae:	4770      	bx	lr
 80068b0:	4608      	mov	r0, r1
 80068b2:	4770      	bx	lr

080068b4 <_write_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d07      	ldr	r5, [pc, #28]	; (80068d4 <_write_r+0x20>)
 80068b8:	4604      	mov	r4, r0
 80068ba:	4608      	mov	r0, r1
 80068bc:	4611      	mov	r1, r2
 80068be:	2200      	movs	r2, #0
 80068c0:	602a      	str	r2, [r5, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f7fa fe5a 	bl	800157c <_write>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_write_r+0x1e>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_write_r+0x1e>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	20000340 	.word	0x20000340

080068d8 <_close_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4d06      	ldr	r5, [pc, #24]	; (80068f4 <_close_r+0x1c>)
 80068dc:	2300      	movs	r3, #0
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	f7fb fa60 	bl	8001da8 <_close>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_close_r+0x1a>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_close_r+0x1a>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	20000340 	.word	0x20000340

080068f8 <_fstat_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d07      	ldr	r5, [pc, #28]	; (8006918 <_fstat_r+0x20>)
 80068fc:	2300      	movs	r3, #0
 80068fe:	4604      	mov	r4, r0
 8006900:	4608      	mov	r0, r1
 8006902:	4611      	mov	r1, r2
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	f7fb fa5b 	bl	8001dc0 <_fstat>
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	d102      	bne.n	8006914 <_fstat_r+0x1c>
 800690e:	682b      	ldr	r3, [r5, #0]
 8006910:	b103      	cbz	r3, 8006914 <_fstat_r+0x1c>
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	bd38      	pop	{r3, r4, r5, pc}
 8006916:	bf00      	nop
 8006918:	20000340 	.word	0x20000340

0800691c <_isatty_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4d06      	ldr	r5, [pc, #24]	; (8006938 <_isatty_r+0x1c>)
 8006920:	2300      	movs	r3, #0
 8006922:	4604      	mov	r4, r0
 8006924:	4608      	mov	r0, r1
 8006926:	602b      	str	r3, [r5, #0]
 8006928:	f7fb fa5a 	bl	8001de0 <_isatty>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d102      	bne.n	8006936 <_isatty_r+0x1a>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	b103      	cbz	r3, 8006936 <_isatty_r+0x1a>
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	20000340 	.word	0x20000340

0800693c <_lseek_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4d07      	ldr	r5, [pc, #28]	; (800695c <_lseek_r+0x20>)
 8006940:	4604      	mov	r4, r0
 8006942:	4608      	mov	r0, r1
 8006944:	4611      	mov	r1, r2
 8006946:	2200      	movs	r2, #0
 8006948:	602a      	str	r2, [r5, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	f7fb fa53 	bl	8001df6 <_lseek>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_lseek_r+0x1e>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	b103      	cbz	r3, 800695a <_lseek_r+0x1e>
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	20000340 	.word	0x20000340

08006960 <_read_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d07      	ldr	r5, [pc, #28]	; (8006980 <_read_r+0x20>)
 8006964:	4604      	mov	r4, r0
 8006966:	4608      	mov	r0, r1
 8006968:	4611      	mov	r1, r2
 800696a:	2200      	movs	r2, #0
 800696c:	602a      	str	r2, [r5, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	f7fa fdea 	bl	8001548 <_read>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <_read_r+0x1e>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	b103      	cbz	r3, 800697e <_read_r+0x1e>
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	20000340 	.word	0x20000340
 8006984:	00000000 	.word	0x00000000

08006988 <atan>:
 8006988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698c:	ec55 4b10 	vmov	r4, r5, d0
 8006990:	4bbf      	ldr	r3, [pc, #764]	; (8006c90 <atan+0x308>)
 8006992:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006996:	429e      	cmp	r6, r3
 8006998:	46aa      	mov	sl, r5
 800699a:	dd17      	ble.n	80069cc <atan+0x44>
 800699c:	4bbd      	ldr	r3, [pc, #756]	; (8006c94 <atan+0x30c>)
 800699e:	429e      	cmp	r6, r3
 80069a0:	dc0a      	bgt.n	80069b8 <atan+0x30>
 80069a2:	d007      	beq.n	80069b4 <atan+0x2c>
 80069a4:	f1ba 0f00 	cmp.w	sl, #0
 80069a8:	f340 80cc 	ble.w	8006b44 <atan+0x1bc>
 80069ac:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 8006c20 <atan+0x298>
 80069b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	2c00      	cmp	r4, #0
 80069b6:	d0f5      	beq.n	80069a4 <atan+0x1c>
 80069b8:	4622      	mov	r2, r4
 80069ba:	462b      	mov	r3, r5
 80069bc:	4620      	mov	r0, r4
 80069be:	4629      	mov	r1, r5
 80069c0:	f7f9 fc44 	bl	800024c <__adddf3>
 80069c4:	ec41 0b10 	vmov	d0, r0, r1
 80069c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069cc:	4bb2      	ldr	r3, [pc, #712]	; (8006c98 <atan+0x310>)
 80069ce:	429e      	cmp	r6, r3
 80069d0:	f300 80bc 	bgt.w	8006b4c <atan+0x1c4>
 80069d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80069d8:	429e      	cmp	r6, r3
 80069da:	f340 80a1 	ble.w	8006b20 <atan+0x198>
 80069de:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80069e2:	4622      	mov	r2, r4
 80069e4:	462b      	mov	r3, r5
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7f9 fde5 	bl	80005b8 <__aeabi_dmul>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4680      	mov	r8, r0
 80069f4:	4689      	mov	r9, r1
 80069f6:	f7f9 fddf 	bl	80005b8 <__aeabi_dmul>
 80069fa:	a38b      	add	r3, pc, #556	; (adr r3, 8006c28 <atan+0x2a0>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	4606      	mov	r6, r0
 8006a02:	460f      	mov	r7, r1
 8006a04:	f7f9 fdd8 	bl	80005b8 <__aeabi_dmul>
 8006a08:	a389      	add	r3, pc, #548	; (adr r3, 8006c30 <atan+0x2a8>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f7f9 fc1d 	bl	800024c <__adddf3>
 8006a12:	4632      	mov	r2, r6
 8006a14:	463b      	mov	r3, r7
 8006a16:	f7f9 fdcf 	bl	80005b8 <__aeabi_dmul>
 8006a1a:	a387      	add	r3, pc, #540	; (adr r3, 8006c38 <atan+0x2b0>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f7f9 fc14 	bl	800024c <__adddf3>
 8006a24:	4632      	mov	r2, r6
 8006a26:	463b      	mov	r3, r7
 8006a28:	f7f9 fdc6 	bl	80005b8 <__aeabi_dmul>
 8006a2c:	a384      	add	r3, pc, #528	; (adr r3, 8006c40 <atan+0x2b8>)
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f7f9 fc0b 	bl	800024c <__adddf3>
 8006a36:	4632      	mov	r2, r6
 8006a38:	463b      	mov	r3, r7
 8006a3a:	f7f9 fdbd 	bl	80005b8 <__aeabi_dmul>
 8006a3e:	a382      	add	r3, pc, #520	; (adr r3, 8006c48 <atan+0x2c0>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f7f9 fc02 	bl	800024c <__adddf3>
 8006a48:	4632      	mov	r2, r6
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	f7f9 fdb4 	bl	80005b8 <__aeabi_dmul>
 8006a50:	a37f      	add	r3, pc, #508	; (adr r3, 8006c50 <atan+0x2c8>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f7f9 fbf9 	bl	800024c <__adddf3>
 8006a5a:	4642      	mov	r2, r8
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	f7f9 fdab 	bl	80005b8 <__aeabi_dmul>
 8006a62:	a37d      	add	r3, pc, #500	; (adr r3, 8006c58 <atan+0x2d0>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	4680      	mov	r8, r0
 8006a6a:	4689      	mov	r9, r1
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	f7f9 fda2 	bl	80005b8 <__aeabi_dmul>
 8006a74:	a37a      	add	r3, pc, #488	; (adr r3, 8006c60 <atan+0x2d8>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fbe5 	bl	8000248 <__aeabi_dsub>
 8006a7e:	4632      	mov	r2, r6
 8006a80:	463b      	mov	r3, r7
 8006a82:	f7f9 fd99 	bl	80005b8 <__aeabi_dmul>
 8006a86:	a378      	add	r3, pc, #480	; (adr r3, 8006c68 <atan+0x2e0>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 fbdc 	bl	8000248 <__aeabi_dsub>
 8006a90:	4632      	mov	r2, r6
 8006a92:	463b      	mov	r3, r7
 8006a94:	f7f9 fd90 	bl	80005b8 <__aeabi_dmul>
 8006a98:	a375      	add	r3, pc, #468	; (adr r3, 8006c70 <atan+0x2e8>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fbd3 	bl	8000248 <__aeabi_dsub>
 8006aa2:	4632      	mov	r2, r6
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	f7f9 fd87 	bl	80005b8 <__aeabi_dmul>
 8006aaa:	a373      	add	r3, pc, #460	; (adr r3, 8006c78 <atan+0x2f0>)
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f7f9 fbca 	bl	8000248 <__aeabi_dsub>
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	f7f9 fd7e 	bl	80005b8 <__aeabi_dmul>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	f7f9 fbc2 	bl	800024c <__adddf3>
 8006ac8:	4622      	mov	r2, r4
 8006aca:	462b      	mov	r3, r5
 8006acc:	f7f9 fd74 	bl	80005b8 <__aeabi_dmul>
 8006ad0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	d05b      	beq.n	8006b92 <atan+0x20a>
 8006ada:	4a70      	ldr	r2, [pc, #448]	; (8006c9c <atan+0x314>)
 8006adc:	4b70      	ldr	r3, [pc, #448]	; (8006ca0 <atan+0x318>)
 8006ade:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8006ae2:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
 8006ae6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006aea:	f7f9 fbad 	bl	8000248 <__aeabi_dsub>
 8006aee:	4622      	mov	r2, r4
 8006af0:	462b      	mov	r3, r5
 8006af2:	f7f9 fba9 	bl	8000248 <__aeabi_dsub>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	e9db 0100 	ldrd	r0, r1, [fp]
 8006afe:	f7f9 fba3 	bl	8000248 <__aeabi_dsub>
 8006b02:	f1ba 0f00 	cmp.w	sl, #0
 8006b06:	ec41 0b10 	vmov	d0, r0, r1
 8006b0a:	f6bf af5d 	bge.w	80069c8 <atan+0x40>
 8006b0e:	ee10 1a90 	vmov	r1, s1
 8006b12:	4602      	mov	r2, r0
 8006b14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b18:	ec43 2b10 	vmov	d0, r2, r3
 8006b1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b20:	a357      	add	r3, pc, #348	; (adr r3, 8006c80 <atan+0x2f8>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	ee10 0a10 	vmov	r0, s0
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f7f9 fb8e 	bl	800024c <__adddf3>
 8006b30:	4b5c      	ldr	r3, [pc, #368]	; (8006ca4 <atan+0x31c>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	f7f9 ffd0 	bl	8000ad8 <__aeabi_dcmpgt>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	f43f af50 	beq.w	80069de <atan+0x56>
 8006b3e:	ec45 4b10 	vmov	d0, r4, r5
 8006b42:	e741      	b.n	80069c8 <atan+0x40>
 8006b44:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006c88 <atan+0x300>
 8006b48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4c:	f000 f8b4 	bl	8006cb8 <fabs>
 8006b50:	4b55      	ldr	r3, [pc, #340]	; (8006ca8 <atan+0x320>)
 8006b52:	429e      	cmp	r6, r3
 8006b54:	ec55 4b10 	vmov	r4, r5, d0
 8006b58:	dc23      	bgt.n	8006ba2 <atan+0x21a>
 8006b5a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006b5e:	429e      	cmp	r6, r3
 8006b60:	dc4e      	bgt.n	8006c00 <atan+0x278>
 8006b62:	ee10 2a10 	vmov	r2, s0
 8006b66:	462b      	mov	r3, r5
 8006b68:	ee10 0a10 	vmov	r0, s0
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	f7f9 fb6d 	bl	800024c <__adddf3>
 8006b72:	4b4c      	ldr	r3, [pc, #304]	; (8006ca4 <atan+0x31c>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	f7f9 fb67 	bl	8000248 <__aeabi_dsub>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	4614      	mov	r4, r2
 8006b84:	461d      	mov	r5, r3
 8006b86:	f04f 0b00 	mov.w	fp, #0
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b90:	e01f      	b.n	8006bd2 <atan+0x24a>
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7f9 fb57 	bl	8000248 <__aeabi_dsub>
 8006b9a:	ec41 0b10 	vmov	d0, r0, r1
 8006b9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba2:	4b42      	ldr	r3, [pc, #264]	; (8006cac <atan+0x324>)
 8006ba4:	429e      	cmp	r6, r3
 8006ba6:	da1f      	bge.n	8006be8 <atan+0x260>
 8006ba8:	4b41      	ldr	r3, [pc, #260]	; (8006cb0 <atan+0x328>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	4629      	mov	r1, r5
 8006bae:	ee10 0a10 	vmov	r0, s0
 8006bb2:	f7f9 fb49 	bl	8000248 <__aeabi_dsub>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4620      	mov	r0, r4
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	4614      	mov	r4, r2
 8006bc0:	461d      	mov	r5, r3
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	4b3a      	ldr	r3, [pc, #232]	; (8006cb0 <atan+0x328>)
 8006bc6:	f04f 0b02 	mov.w	fp, #2
 8006bca:	f7f9 fcf5 	bl	80005b8 <__aeabi_dmul>
 8006bce:	4b35      	ldr	r3, [pc, #212]	; (8006ca4 <atan+0x31c>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f7f9 fb3b 	bl	800024c <__adddf3>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4620      	mov	r0, r4
 8006bdc:	4629      	mov	r1, r5
 8006bde:	f7f9 fe15 	bl	800080c <__aeabi_ddiv>
 8006be2:	4604      	mov	r4, r0
 8006be4:	460d      	mov	r5, r1
 8006be6:	e6fc      	b.n	80069e2 <atan+0x5a>
 8006be8:	462b      	mov	r3, r5
 8006bea:	4932      	ldr	r1, [pc, #200]	; (8006cb4 <atan+0x32c>)
 8006bec:	ee10 2a10 	vmov	r2, s0
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f7f9 fe0b 	bl	800080c <__aeabi_ddiv>
 8006bf6:	f04f 0b03 	mov.w	fp, #3
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	460d      	mov	r5, r1
 8006bfe:	e6f0      	b.n	80069e2 <atan+0x5a>
 8006c00:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <atan+0x31c>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	4629      	mov	r1, r5
 8006c06:	ee10 0a10 	vmov	r0, s0
 8006c0a:	f7f9 fb1d 	bl	8000248 <__aeabi_dsub>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	f04f 0b01 	mov.w	fp, #1
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	461d      	mov	r5, r3
 8006c1e:	e7d6      	b.n	8006bce <atan+0x246>
 8006c20:	54442d18 	.word	0x54442d18
 8006c24:	3ff921fb 	.word	0x3ff921fb
 8006c28:	e322da11 	.word	0xe322da11
 8006c2c:	3f90ad3a 	.word	0x3f90ad3a
 8006c30:	24760deb 	.word	0x24760deb
 8006c34:	3fa97b4b 	.word	0x3fa97b4b
 8006c38:	a0d03d51 	.word	0xa0d03d51
 8006c3c:	3fb10d66 	.word	0x3fb10d66
 8006c40:	c54c206e 	.word	0xc54c206e
 8006c44:	3fb745cd 	.word	0x3fb745cd
 8006c48:	920083ff 	.word	0x920083ff
 8006c4c:	3fc24924 	.word	0x3fc24924
 8006c50:	5555550d 	.word	0x5555550d
 8006c54:	3fd55555 	.word	0x3fd55555
 8006c58:	2c6a6c2f 	.word	0x2c6a6c2f
 8006c5c:	bfa2b444 	.word	0xbfa2b444
 8006c60:	52defd9a 	.word	0x52defd9a
 8006c64:	3fadde2d 	.word	0x3fadde2d
 8006c68:	af749a6d 	.word	0xaf749a6d
 8006c6c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006c70:	fe231671 	.word	0xfe231671
 8006c74:	3fbc71c6 	.word	0x3fbc71c6
 8006c78:	9998ebc4 	.word	0x9998ebc4
 8006c7c:	3fc99999 	.word	0x3fc99999
 8006c80:	8800759c 	.word	0x8800759c
 8006c84:	7e37e43c 	.word	0x7e37e43c
 8006c88:	54442d18 	.word	0x54442d18
 8006c8c:	bff921fb 	.word	0xbff921fb
 8006c90:	440fffff 	.word	0x440fffff
 8006c94:	7ff00000 	.word	0x7ff00000
 8006c98:	3fdbffff 	.word	0x3fdbffff
 8006c9c:	08007d10 	.word	0x08007d10
 8006ca0:	08007cf0 	.word	0x08007cf0
 8006ca4:	3ff00000 	.word	0x3ff00000
 8006ca8:	3ff2ffff 	.word	0x3ff2ffff
 8006cac:	40038000 	.word	0x40038000
 8006cb0:	3ff80000 	.word	0x3ff80000
 8006cb4:	bff00000 	.word	0xbff00000

08006cb8 <fabs>:
 8006cb8:	ec51 0b10 	vmov	r0, r1, d0
 8006cbc:	ee10 2a10 	vmov	r2, s0
 8006cc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006cc4:	ec43 2b10 	vmov	d0, r2, r3
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop

08006ccc <acos>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	ed2d 8b02 	vpush	{d8}
 8006cd2:	ec55 4b10 	vmov	r4, r5, d0
 8006cd6:	f000 f84f 	bl	8006d78 <__ieee754_acos>
 8006cda:	4622      	mov	r2, r4
 8006cdc:	462b      	mov	r3, r5
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	eeb0 8a40 	vmov.f32	s16, s0
 8006ce6:	eef0 8a60 	vmov.f32	s17, s1
 8006cea:	f7f9 feff 	bl	8000aec <__aeabi_dcmpun>
 8006cee:	b950      	cbnz	r0, 8006d06 <acos+0x3a>
 8006cf0:	ec45 4b10 	vmov	d0, r4, r5
 8006cf4:	f7ff ffe0 	bl	8006cb8 <fabs>
 8006cf8:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <acos+0x60>)
 8006cfa:	ec51 0b10 	vmov	r0, r1, d0
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f7f9 feea 	bl	8000ad8 <__aeabi_dcmpgt>
 8006d04:	b930      	cbnz	r0, 8006d14 <acos+0x48>
 8006d06:	eeb0 0a48 	vmov.f32	s0, s16
 8006d0a:	eef0 0a68 	vmov.f32	s1, s17
 8006d0e:	ecbd 8b02 	vpop	{d8}
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	f7fd f8c0 	bl	8003e98 <__errno>
 8006d18:	ecbd 8b02 	vpop	{d8}
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2221      	movs	r2, #33	; 0x21
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	4803      	ldr	r0, [pc, #12]	; (8006d30 <acos+0x64>)
 8006d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d28:	f000 bb62 	b.w	80073f0 <nan>
 8006d2c:	3ff00000 	.word	0x3ff00000
 8006d30:	08007d30 	.word	0x08007d30

08006d34 <sqrtf>:
 8006d34:	b508      	push	{r3, lr}
 8006d36:	ed2d 8b02 	vpush	{d8}
 8006d3a:	eeb0 8a40 	vmov.f32	s16, s0
 8006d3e:	f000 fa8b 	bl	8007258 <__ieee754_sqrtf>
 8006d42:	eeb4 8a48 	vcmp.f32	s16, s16
 8006d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4a:	d606      	bvs.n	8006d5a <sqrtf+0x26>
 8006d4c:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006d74 <sqrtf+0x40>
 8006d50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d58:	d402      	bmi.n	8006d60 <sqrtf+0x2c>
 8006d5a:	ecbd 8b02 	vpop	{d8}
 8006d5e:	bd08      	pop	{r3, pc}
 8006d60:	f7fd f89a 	bl	8003e98 <__errno>
 8006d64:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006d68:	ecbd 8b02 	vpop	{d8}
 8006d6c:	2321      	movs	r3, #33	; 0x21
 8006d6e:	6003      	str	r3, [r0, #0]
 8006d70:	bd08      	pop	{r3, pc}
 8006d72:	bf00      	nop
 8006d74:	00000000 	.word	0x00000000

08006d78 <__ieee754_acos>:
 8006d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	ec55 4b10 	vmov	r4, r5, d0
 8006d80:	49cd      	ldr	r1, [pc, #820]	; (80070b8 <__ieee754_acos+0x340>)
 8006d82:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006d86:	428b      	cmp	r3, r1
 8006d88:	dd0d      	ble.n	8006da6 <__ieee754_acos+0x2e>
 8006d8a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8006d8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006d92:	4323      	orrs	r3, r4
 8006d94:	f040 80bd 	bne.w	8006f12 <__ieee754_acos+0x19a>
 8006d98:	2d00      	cmp	r5, #0
 8006d9a:	f340 80c9 	ble.w	8006f30 <__ieee754_acos+0x1b8>
 8006d9e:	ed9f 0baa 	vldr	d0, [pc, #680]	; 8007048 <__ieee754_acos+0x2d0>
 8006da2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da6:	49c5      	ldr	r1, [pc, #788]	; (80070bc <__ieee754_acos+0x344>)
 8006da8:	428b      	cmp	r3, r1
 8006daa:	dc07      	bgt.n	8006dbc <__ieee754_acos+0x44>
 8006dac:	4ac4      	ldr	r2, [pc, #784]	; (80070c0 <__ieee754_acos+0x348>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	f300 80c2 	bgt.w	8006f38 <__ieee754_acos+0x1c0>
 8006db4:	ed9f 0ba6 	vldr	d0, [pc, #664]	; 8007050 <__ieee754_acos+0x2d8>
 8006db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	2d00      	cmp	r5, #0
 8006dbe:	f2c0 8185 	blt.w	80070cc <__ieee754_acos+0x354>
 8006dc2:	ee10 2a10 	vmov	r2, s0
 8006dc6:	462b      	mov	r3, r5
 8006dc8:	49be      	ldr	r1, [pc, #760]	; (80070c4 <__ieee754_acos+0x34c>)
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f7f9 fa3c 	bl	8000248 <__aeabi_dsub>
 8006dd0:	4bbd      	ldr	r3, [pc, #756]	; (80070c8 <__ieee754_acos+0x350>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f7f9 fbf0 	bl	80005b8 <__aeabi_dmul>
 8006dd8:	4604      	mov	r4, r0
 8006dda:	460d      	mov	r5, r1
 8006ddc:	ec45 4b10 	vmov	d0, r4, r5
 8006de0:	f000 fa3e 	bl	8007260 <__ieee754_sqrt>
 8006de4:	a39c      	add	r3, pc, #624	; (adr r3, 8007058 <__ieee754_acos+0x2e0>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	4620      	mov	r0, r4
 8006dec:	4629      	mov	r1, r5
 8006dee:	ec59 8b10 	vmov	r8, r9, d0
 8006df2:	f7f9 fbe1 	bl	80005b8 <__aeabi_dmul>
 8006df6:	a39a      	add	r3, pc, #616	; (adr r3, 8007060 <__ieee754_acos+0x2e8>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 fa26 	bl	800024c <__adddf3>
 8006e00:	4622      	mov	r2, r4
 8006e02:	462b      	mov	r3, r5
 8006e04:	f7f9 fbd8 	bl	80005b8 <__aeabi_dmul>
 8006e08:	a397      	add	r3, pc, #604	; (adr r3, 8007068 <__ieee754_acos+0x2f0>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fa1b 	bl	8000248 <__aeabi_dsub>
 8006e12:	4622      	mov	r2, r4
 8006e14:	462b      	mov	r3, r5
 8006e16:	f7f9 fbcf 	bl	80005b8 <__aeabi_dmul>
 8006e1a:	a395      	add	r3, pc, #596	; (adr r3, 8007070 <__ieee754_acos+0x2f8>)
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	f7f9 fa14 	bl	800024c <__adddf3>
 8006e24:	4622      	mov	r2, r4
 8006e26:	462b      	mov	r3, r5
 8006e28:	f7f9 fbc6 	bl	80005b8 <__aeabi_dmul>
 8006e2c:	a392      	add	r3, pc, #584	; (adr r3, 8007078 <__ieee754_acos+0x300>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f7f9 fa09 	bl	8000248 <__aeabi_dsub>
 8006e36:	4622      	mov	r2, r4
 8006e38:	462b      	mov	r3, r5
 8006e3a:	f7f9 fbbd 	bl	80005b8 <__aeabi_dmul>
 8006e3e:	a390      	add	r3, pc, #576	; (adr r3, 8007080 <__ieee754_acos+0x308>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f7f9 fa02 	bl	800024c <__adddf3>
 8006e48:	4622      	mov	r2, r4
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	f7f9 fbb4 	bl	80005b8 <__aeabi_dmul>
 8006e50:	a38d      	add	r3, pc, #564	; (adr r3, 8007088 <__ieee754_acos+0x310>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	4682      	mov	sl, r0
 8006e58:	468b      	mov	fp, r1
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	f7f9 fbab 	bl	80005b8 <__aeabi_dmul>
 8006e62:	a38b      	add	r3, pc, #556	; (adr r3, 8007090 <__ieee754_acos+0x318>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f7f9 f9ee 	bl	8000248 <__aeabi_dsub>
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	462b      	mov	r3, r5
 8006e70:	f7f9 fba2 	bl	80005b8 <__aeabi_dmul>
 8006e74:	a388      	add	r3, pc, #544	; (adr r3, 8007098 <__ieee754_acos+0x320>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f7f9 f9e7 	bl	800024c <__adddf3>
 8006e7e:	4622      	mov	r2, r4
 8006e80:	462b      	mov	r3, r5
 8006e82:	f7f9 fb99 	bl	80005b8 <__aeabi_dmul>
 8006e86:	a386      	add	r3, pc, #536	; (adr r3, 80070a0 <__ieee754_acos+0x328>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f7f9 f9dc 	bl	8000248 <__aeabi_dsub>
 8006e90:	4622      	mov	r2, r4
 8006e92:	462b      	mov	r3, r5
 8006e94:	f7f9 fb90 	bl	80005b8 <__aeabi_dmul>
 8006e98:	4b8a      	ldr	r3, [pc, #552]	; (80070c4 <__ieee754_acos+0x34c>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f7f9 f9d6 	bl	800024c <__adddf3>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4650      	mov	r0, sl
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	f7f9 fcb0 	bl	800080c <__aeabi_ddiv>
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	f7f9 fb82 	bl	80005b8 <__aeabi_dmul>
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	4682      	mov	sl, r0
 8006eb8:	468b      	mov	fp, r1
 8006eba:	4632      	mov	r2, r6
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	f7f9 fb79 	bl	80005b8 <__aeabi_dmul>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4620      	mov	r0, r4
 8006ecc:	4629      	mov	r1, r5
 8006ece:	f7f9 f9bb 	bl	8000248 <__aeabi_dsub>
 8006ed2:	4632      	mov	r2, r6
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	464b      	mov	r3, r9
 8006eda:	4640      	mov	r0, r8
 8006edc:	4649      	mov	r1, r9
 8006ede:	f7f9 f9b5 	bl	800024c <__adddf3>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 fc8f 	bl	800080c <__aeabi_ddiv>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	f7f9 f9a9 	bl	800024c <__adddf3>
 8006efa:	4632      	mov	r2, r6
 8006efc:	464b      	mov	r3, r9
 8006efe:	f7f9 f9a5 	bl	800024c <__adddf3>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	f7f9 f9a1 	bl	800024c <__adddf3>
 8006f0a:	ec41 0b10 	vmov	d0, r0, r1
 8006f0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f12:	ee10 2a10 	vmov	r2, s0
 8006f16:	462b      	mov	r3, r5
 8006f18:	4620      	mov	r0, r4
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	f7f9 f994 	bl	8000248 <__aeabi_dsub>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	f7f9 fc72 	bl	800080c <__aeabi_ddiv>
 8006f28:	ec41 0b10 	vmov	d0, r0, r1
 8006f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f30:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 80070a8 <__ieee754_acos+0x330>
 8006f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	ee10 2a10 	vmov	r2, s0
 8006f3c:	ee10 0a10 	vmov	r0, s0
 8006f40:	462b      	mov	r3, r5
 8006f42:	4629      	mov	r1, r5
 8006f44:	f7f9 fb38 	bl	80005b8 <__aeabi_dmul>
 8006f48:	a343      	add	r3, pc, #268	; (adr r3, 8007058 <__ieee754_acos+0x2e0>)
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	4606      	mov	r6, r0
 8006f50:	460f      	mov	r7, r1
 8006f52:	f7f9 fb31 	bl	80005b8 <__aeabi_dmul>
 8006f56:	a342      	add	r3, pc, #264	; (adr r3, 8007060 <__ieee754_acos+0x2e8>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f7f9 f976 	bl	800024c <__adddf3>
 8006f60:	4632      	mov	r2, r6
 8006f62:	463b      	mov	r3, r7
 8006f64:	f7f9 fb28 	bl	80005b8 <__aeabi_dmul>
 8006f68:	a33f      	add	r3, pc, #252	; (adr r3, 8007068 <__ieee754_acos+0x2f0>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f7f9 f96b 	bl	8000248 <__aeabi_dsub>
 8006f72:	4632      	mov	r2, r6
 8006f74:	463b      	mov	r3, r7
 8006f76:	f7f9 fb1f 	bl	80005b8 <__aeabi_dmul>
 8006f7a:	a33d      	add	r3, pc, #244	; (adr r3, 8007070 <__ieee754_acos+0x2f8>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f7f9 f964 	bl	800024c <__adddf3>
 8006f84:	4632      	mov	r2, r6
 8006f86:	463b      	mov	r3, r7
 8006f88:	f7f9 fb16 	bl	80005b8 <__aeabi_dmul>
 8006f8c:	a33a      	add	r3, pc, #232	; (adr r3, 8007078 <__ieee754_acos+0x300>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f7f9 f959 	bl	8000248 <__aeabi_dsub>
 8006f96:	4632      	mov	r2, r6
 8006f98:	463b      	mov	r3, r7
 8006f9a:	f7f9 fb0d 	bl	80005b8 <__aeabi_dmul>
 8006f9e:	a338      	add	r3, pc, #224	; (adr r3, 8007080 <__ieee754_acos+0x308>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	f7f9 f952 	bl	800024c <__adddf3>
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	f7f9 fb04 	bl	80005b8 <__aeabi_dmul>
 8006fb0:	a335      	add	r3, pc, #212	; (adr r3, 8007088 <__ieee754_acos+0x310>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	4680      	mov	r8, r0
 8006fb8:	4689      	mov	r9, r1
 8006fba:	4630      	mov	r0, r6
 8006fbc:	4639      	mov	r1, r7
 8006fbe:	f7f9 fafb 	bl	80005b8 <__aeabi_dmul>
 8006fc2:	a333      	add	r3, pc, #204	; (adr r3, 8007090 <__ieee754_acos+0x318>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 f93e 	bl	8000248 <__aeabi_dsub>
 8006fcc:	4632      	mov	r2, r6
 8006fce:	463b      	mov	r3, r7
 8006fd0:	f7f9 faf2 	bl	80005b8 <__aeabi_dmul>
 8006fd4:	a330      	add	r3, pc, #192	; (adr r3, 8007098 <__ieee754_acos+0x320>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7f9 f937 	bl	800024c <__adddf3>
 8006fde:	4632      	mov	r2, r6
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	f7f9 fae9 	bl	80005b8 <__aeabi_dmul>
 8006fe6:	a32e      	add	r3, pc, #184	; (adr r3, 80070a0 <__ieee754_acos+0x328>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 f92c 	bl	8000248 <__aeabi_dsub>
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	f7f9 fae0 	bl	80005b8 <__aeabi_dmul>
 8006ff8:	4b32      	ldr	r3, [pc, #200]	; (80070c4 <__ieee754_acos+0x34c>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f7f9 f926 	bl	800024c <__adddf3>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4640      	mov	r0, r8
 8007006:	4649      	mov	r1, r9
 8007008:	f7f9 fc00 	bl	800080c <__aeabi_ddiv>
 800700c:	4622      	mov	r2, r4
 800700e:	462b      	mov	r3, r5
 8007010:	f7f9 fad2 	bl	80005b8 <__aeabi_dmul>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	a125      	add	r1, pc, #148	; (adr r1, 80070b0 <__ieee754_acos+0x338>)
 800701a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800701e:	f7f9 f913 	bl	8000248 <__aeabi_dsub>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7f9 f90d 	bl	8000248 <__aeabi_dsub>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	a107      	add	r1, pc, #28	; (adr r1, 8007050 <__ieee754_acos+0x2d8>)
 8007034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007038:	f7f9 f906 	bl	8000248 <__aeabi_dsub>
 800703c:	ec41 0b10 	vmov	d0, r0, r1
 8007040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007044:	f3af 8000 	nop.w
	...
 8007050:	54442d18 	.word	0x54442d18
 8007054:	3ff921fb 	.word	0x3ff921fb
 8007058:	0dfdf709 	.word	0x0dfdf709
 800705c:	3f023de1 	.word	0x3f023de1
 8007060:	7501b288 	.word	0x7501b288
 8007064:	3f49efe0 	.word	0x3f49efe0
 8007068:	b5688f3b 	.word	0xb5688f3b
 800706c:	3fa48228 	.word	0x3fa48228
 8007070:	0e884455 	.word	0x0e884455
 8007074:	3fc9c155 	.word	0x3fc9c155
 8007078:	03eb6f7d 	.word	0x03eb6f7d
 800707c:	3fd4d612 	.word	0x3fd4d612
 8007080:	55555555 	.word	0x55555555
 8007084:	3fc55555 	.word	0x3fc55555
 8007088:	b12e9282 	.word	0xb12e9282
 800708c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007090:	1b8d0159 	.word	0x1b8d0159
 8007094:	3fe6066c 	.word	0x3fe6066c
 8007098:	9c598ac8 	.word	0x9c598ac8
 800709c:	40002ae5 	.word	0x40002ae5
 80070a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80070a4:	40033a27 	.word	0x40033a27
 80070a8:	54442d18 	.word	0x54442d18
 80070ac:	400921fb 	.word	0x400921fb
 80070b0:	33145c07 	.word	0x33145c07
 80070b4:	3c91a626 	.word	0x3c91a626
 80070b8:	3fefffff 	.word	0x3fefffff
 80070bc:	3fdfffff 	.word	0x3fdfffff
 80070c0:	3c600000 	.word	0x3c600000
 80070c4:	3ff00000 	.word	0x3ff00000
 80070c8:	3fe00000 	.word	0x3fe00000
 80070cc:	ee10 0a10 	vmov	r0, s0
 80070d0:	4b5f      	ldr	r3, [pc, #380]	; (8007250 <__ieee754_acos+0x4d8>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	4629      	mov	r1, r5
 80070d6:	f7f9 f8b9 	bl	800024c <__adddf3>
 80070da:	4b5e      	ldr	r3, [pc, #376]	; (8007254 <__ieee754_acos+0x4dc>)
 80070dc:	2200      	movs	r2, #0
 80070de:	f7f9 fa6b 	bl	80005b8 <__aeabi_dmul>
 80070e2:	a343      	add	r3, pc, #268	; (adr r3, 80071f0 <__ieee754_acos+0x478>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	4604      	mov	r4, r0
 80070ea:	460d      	mov	r5, r1
 80070ec:	f7f9 fa64 	bl	80005b8 <__aeabi_dmul>
 80070f0:	a341      	add	r3, pc, #260	; (adr r3, 80071f8 <__ieee754_acos+0x480>)
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f7f9 f8a9 	bl	800024c <__adddf3>
 80070fa:	4622      	mov	r2, r4
 80070fc:	462b      	mov	r3, r5
 80070fe:	f7f9 fa5b 	bl	80005b8 <__aeabi_dmul>
 8007102:	a33f      	add	r3, pc, #252	; (adr r3, 8007200 <__ieee754_acos+0x488>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f89e 	bl	8000248 <__aeabi_dsub>
 800710c:	4622      	mov	r2, r4
 800710e:	462b      	mov	r3, r5
 8007110:	f7f9 fa52 	bl	80005b8 <__aeabi_dmul>
 8007114:	a33c      	add	r3, pc, #240	; (adr r3, 8007208 <__ieee754_acos+0x490>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f7f9 f897 	bl	800024c <__adddf3>
 800711e:	4622      	mov	r2, r4
 8007120:	462b      	mov	r3, r5
 8007122:	f7f9 fa49 	bl	80005b8 <__aeabi_dmul>
 8007126:	a33a      	add	r3, pc, #232	; (adr r3, 8007210 <__ieee754_acos+0x498>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f7f9 f88c 	bl	8000248 <__aeabi_dsub>
 8007130:	4622      	mov	r2, r4
 8007132:	462b      	mov	r3, r5
 8007134:	f7f9 fa40 	bl	80005b8 <__aeabi_dmul>
 8007138:	a337      	add	r3, pc, #220	; (adr r3, 8007218 <__ieee754_acos+0x4a0>)
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7f9 f885 	bl	800024c <__adddf3>
 8007142:	4622      	mov	r2, r4
 8007144:	462b      	mov	r3, r5
 8007146:	f7f9 fa37 	bl	80005b8 <__aeabi_dmul>
 800714a:	ec45 4b10 	vmov	d0, r4, r5
 800714e:	4680      	mov	r8, r0
 8007150:	4689      	mov	r9, r1
 8007152:	f000 f885 	bl	8007260 <__ieee754_sqrt>
 8007156:	a332      	add	r3, pc, #200	; (adr r3, 8007220 <__ieee754_acos+0x4a8>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	4620      	mov	r0, r4
 800715e:	4629      	mov	r1, r5
 8007160:	ec57 6b10 	vmov	r6, r7, d0
 8007164:	f7f9 fa28 	bl	80005b8 <__aeabi_dmul>
 8007168:	a32f      	add	r3, pc, #188	; (adr r3, 8007228 <__ieee754_acos+0x4b0>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f7f9 f86b 	bl	8000248 <__aeabi_dsub>
 8007172:	4622      	mov	r2, r4
 8007174:	462b      	mov	r3, r5
 8007176:	f7f9 fa1f 	bl	80005b8 <__aeabi_dmul>
 800717a:	a32d      	add	r3, pc, #180	; (adr r3, 8007230 <__ieee754_acos+0x4b8>)
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f7f9 f864 	bl	800024c <__adddf3>
 8007184:	4622      	mov	r2, r4
 8007186:	462b      	mov	r3, r5
 8007188:	f7f9 fa16 	bl	80005b8 <__aeabi_dmul>
 800718c:	a32a      	add	r3, pc, #168	; (adr r3, 8007238 <__ieee754_acos+0x4c0>)
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	f7f9 f859 	bl	8000248 <__aeabi_dsub>
 8007196:	4622      	mov	r2, r4
 8007198:	462b      	mov	r3, r5
 800719a:	f7f9 fa0d 	bl	80005b8 <__aeabi_dmul>
 800719e:	4b2c      	ldr	r3, [pc, #176]	; (8007250 <__ieee754_acos+0x4d8>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	f7f9 f853 	bl	800024c <__adddf3>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	4640      	mov	r0, r8
 80071ac:	4649      	mov	r1, r9
 80071ae:	f7f9 fb2d 	bl	800080c <__aeabi_ddiv>
 80071b2:	4632      	mov	r2, r6
 80071b4:	463b      	mov	r3, r7
 80071b6:	f7f9 f9ff 	bl	80005b8 <__aeabi_dmul>
 80071ba:	a321      	add	r3, pc, #132	; (adr r3, 8007240 <__ieee754_acos+0x4c8>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f7f9 f842 	bl	8000248 <__aeabi_dsub>
 80071c4:	4632      	mov	r2, r6
 80071c6:	463b      	mov	r3, r7
 80071c8:	f7f9 f840 	bl	800024c <__adddf3>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	f7f9 f83c 	bl	800024c <__adddf3>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	a11b      	add	r1, pc, #108	; (adr r1, 8007248 <__ieee754_acos+0x4d0>)
 80071da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071de:	f7f9 f833 	bl	8000248 <__aeabi_dsub>
 80071e2:	ec41 0b10 	vmov	d0, r0, r1
 80071e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ea:	bf00      	nop
 80071ec:	f3af 8000 	nop.w
 80071f0:	0dfdf709 	.word	0x0dfdf709
 80071f4:	3f023de1 	.word	0x3f023de1
 80071f8:	7501b288 	.word	0x7501b288
 80071fc:	3f49efe0 	.word	0x3f49efe0
 8007200:	b5688f3b 	.word	0xb5688f3b
 8007204:	3fa48228 	.word	0x3fa48228
 8007208:	0e884455 	.word	0x0e884455
 800720c:	3fc9c155 	.word	0x3fc9c155
 8007210:	03eb6f7d 	.word	0x03eb6f7d
 8007214:	3fd4d612 	.word	0x3fd4d612
 8007218:	55555555 	.word	0x55555555
 800721c:	3fc55555 	.word	0x3fc55555
 8007220:	b12e9282 	.word	0xb12e9282
 8007224:	3fb3b8c5 	.word	0x3fb3b8c5
 8007228:	1b8d0159 	.word	0x1b8d0159
 800722c:	3fe6066c 	.word	0x3fe6066c
 8007230:	9c598ac8 	.word	0x9c598ac8
 8007234:	40002ae5 	.word	0x40002ae5
 8007238:	1c8a2d4b 	.word	0x1c8a2d4b
 800723c:	40033a27 	.word	0x40033a27
 8007240:	33145c07 	.word	0x33145c07
 8007244:	3c91a626 	.word	0x3c91a626
 8007248:	54442d18 	.word	0x54442d18
 800724c:	400921fb 	.word	0x400921fb
 8007250:	3ff00000 	.word	0x3ff00000
 8007254:	3fe00000 	.word	0x3fe00000

08007258 <__ieee754_sqrtf>:
 8007258:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop

08007260 <__ieee754_sqrt>:
 8007260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	4a61      	ldr	r2, [pc, #388]	; (80073ec <__ieee754_sqrt+0x18c>)
 8007266:	ec55 4b10 	vmov	r4, r5, d0
 800726a:	43aa      	bics	r2, r5
 800726c:	f000 809c 	beq.w	80073a8 <__ieee754_sqrt+0x148>
 8007270:	2d00      	cmp	r5, #0
 8007272:	ee10 1a10 	vmov	r1, s0
 8007276:	462b      	mov	r3, r5
 8007278:	dd54      	ble.n	8007324 <__ieee754_sqrt+0xc4>
 800727a:	1528      	asrs	r0, r5, #20
 800727c:	d061      	beq.n	8007342 <__ieee754_sqrt+0xe2>
 800727e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007282:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007286:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 800728a:	0fcb      	lsrs	r3, r1, #31
 800728c:	07c0      	lsls	r0, r0, #31
 800728e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8007292:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007296:	d405      	bmi.n	80072a4 <__ieee754_sqrt+0x44>
 8007298:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 800729c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80072a0:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 80072a4:	2600      	movs	r6, #0
 80072a6:	107f      	asrs	r7, r7, #1
 80072a8:	f04f 0e16 	mov.w	lr, #22
 80072ac:	4634      	mov	r4, r6
 80072ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80072b2:	18a1      	adds	r1, r4, r2
 80072b4:	4299      	cmp	r1, r3
 80072b6:	dc02      	bgt.n	80072be <__ieee754_sqrt+0x5e>
 80072b8:	1a5b      	subs	r3, r3, r1
 80072ba:	188c      	adds	r4, r1, r2
 80072bc:	4416      	add	r6, r2
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	f1be 0e01 	subs.w	lr, lr, #1
 80072c4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80072c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80072cc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80072d0:	d1ef      	bne.n	80072b2 <__ieee754_sqrt+0x52>
 80072d2:	4675      	mov	r5, lr
 80072d4:	2020      	movs	r0, #32
 80072d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072da:	e00a      	b.n	80072f2 <__ieee754_sqrt+0x92>
 80072dc:	d041      	beq.n	8007362 <__ieee754_sqrt+0x102>
 80072de:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80072e2:	3801      	subs	r0, #1
 80072e4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80072e8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80072ec:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80072f0:	d040      	beq.n	8007374 <__ieee754_sqrt+0x114>
 80072f2:	42a3      	cmp	r3, r4
 80072f4:	eb02 010e 	add.w	r1, r2, lr
 80072f8:	ddf0      	ble.n	80072dc <__ieee754_sqrt+0x7c>
 80072fa:	2900      	cmp	r1, #0
 80072fc:	eb01 0e02 	add.w	lr, r1, r2
 8007300:	db0a      	blt.n	8007318 <__ieee754_sqrt+0xb8>
 8007302:	46a0      	mov	r8, r4
 8007304:	1b1b      	subs	r3, r3, r4
 8007306:	4561      	cmp	r1, ip
 8007308:	bf88      	it	hi
 800730a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800730e:	ebac 0c01 	sub.w	ip, ip, r1
 8007312:	4415      	add	r5, r2
 8007314:	4644      	mov	r4, r8
 8007316:	e7e2      	b.n	80072de <__ieee754_sqrt+0x7e>
 8007318:	f1be 0f00 	cmp.w	lr, #0
 800731c:	dbf1      	blt.n	8007302 <__ieee754_sqrt+0xa2>
 800731e:	f104 0801 	add.w	r8, r4, #1
 8007322:	e7ef      	b.n	8007304 <__ieee754_sqrt+0xa4>
 8007324:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007328:	4322      	orrs	r2, r4
 800732a:	d035      	beq.n	8007398 <__ieee754_sqrt+0x138>
 800732c:	2d00      	cmp	r5, #0
 800732e:	d14b      	bne.n	80073c8 <__ieee754_sqrt+0x168>
 8007330:	4628      	mov	r0, r5
 8007332:	0aca      	lsrs	r2, r1, #11
 8007334:	3815      	subs	r0, #21
 8007336:	4613      	mov	r3, r2
 8007338:	0549      	lsls	r1, r1, #21
 800733a:	2a00      	cmp	r2, #0
 800733c:	d0f9      	beq.n	8007332 <__ieee754_sqrt+0xd2>
 800733e:	02d7      	lsls	r7, r2, #11
 8007340:	d44f      	bmi.n	80073e2 <__ieee754_sqrt+0x182>
 8007342:	2400      	movs	r4, #0
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	02de      	lsls	r6, r3, #11
 8007348:	4625      	mov	r5, r4
 800734a:	f104 0401 	add.w	r4, r4, #1
 800734e:	d5f9      	bpl.n	8007344 <__ieee754_sqrt+0xe4>
 8007350:	461a      	mov	r2, r3
 8007352:	460b      	mov	r3, r1
 8007354:	40a1      	lsls	r1, r4
 8007356:	f1c4 0420 	rsb	r4, r4, #32
 800735a:	40e3      	lsrs	r3, r4
 800735c:	1b40      	subs	r0, r0, r5
 800735e:	4313      	orrs	r3, r2
 8007360:	e78d      	b.n	800727e <__ieee754_sqrt+0x1e>
 8007362:	4561      	cmp	r1, ip
 8007364:	d8bb      	bhi.n	80072de <__ieee754_sqrt+0x7e>
 8007366:	2900      	cmp	r1, #0
 8007368:	eb01 0e02 	add.w	lr, r1, r2
 800736c:	dbd4      	blt.n	8007318 <__ieee754_sqrt+0xb8>
 800736e:	4698      	mov	r8, r3
 8007370:	2300      	movs	r3, #0
 8007372:	e7cc      	b.n	800730e <__ieee754_sqrt+0xae>
 8007374:	ea53 030c 	orrs.w	r3, r3, ip
 8007378:	d110      	bne.n	800739c <__ieee754_sqrt+0x13c>
 800737a:	0868      	lsrs	r0, r5, #1
 800737c:	1071      	asrs	r1, r6, #1
 800737e:	07f3      	lsls	r3, r6, #31
 8007380:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 8007384:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8007388:	bf48      	it	mi
 800738a:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 800738e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 8007392:	4602      	mov	r2, r0
 8007394:	ec43 2b10 	vmov	d0, r2, r3
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800739c:	1c6a      	adds	r2, r5, #1
 800739e:	bf16      	itet	ne
 80073a0:	1c68      	addne	r0, r5, #1
 80073a2:	3601      	addeq	r6, #1
 80073a4:	0840      	lsrne	r0, r0, #1
 80073a6:	e7e9      	b.n	800737c <__ieee754_sqrt+0x11c>
 80073a8:	ee10 2a10 	vmov	r2, s0
 80073ac:	ee10 0a10 	vmov	r0, s0
 80073b0:	462b      	mov	r3, r5
 80073b2:	4629      	mov	r1, r5
 80073b4:	f7f9 f900 	bl	80005b8 <__aeabi_dmul>
 80073b8:	4622      	mov	r2, r4
 80073ba:	462b      	mov	r3, r5
 80073bc:	f7f8 ff46 	bl	800024c <__adddf3>
 80073c0:	ec41 0b10 	vmov	d0, r0, r1
 80073c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c8:	ee10 2a10 	vmov	r2, s0
 80073cc:	4620      	mov	r0, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	f7f8 ff3a 	bl	8000248 <__aeabi_dsub>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	f7f9 fa18 	bl	800080c <__aeabi_ddiv>
 80073dc:	ec41 0b10 	vmov	d0, r0, r1
 80073e0:	e7da      	b.n	8007398 <__ieee754_sqrt+0x138>
 80073e2:	460b      	mov	r3, r1
 80073e4:	2420      	movs	r4, #32
 80073e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80073ea:	e7b6      	b.n	800735a <__ieee754_sqrt+0xfa>
 80073ec:	7ff00000 	.word	0x7ff00000

080073f0 <nan>:
 80073f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80073f8 <nan+0x8>
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	00000000 	.word	0x00000000
 80073fc:	7ff80000 	.word	0x7ff80000

08007400 <__udivmoddi4>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007406:	4688      	mov	r8, r1
 8007408:	468e      	mov	lr, r1
 800740a:	4615      	mov	r5, r2
 800740c:	4604      	mov	r4, r0
 800740e:	4619      	mov	r1, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	f040 80c7 	bne.w	80075a4 <__udivmoddi4+0x1a4>
 8007416:	4542      	cmp	r2, r8
 8007418:	fab2 f782 	clz	r7, r2
 800741c:	d946      	bls.n	80074ac <__udivmoddi4+0xac>
 800741e:	b14f      	cbz	r7, 8007434 <__udivmoddi4+0x34>
 8007420:	f1c7 0c20 	rsb	ip, r7, #32
 8007424:	fa08 f307 	lsl.w	r3, r8, r7
 8007428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800742c:	40bd      	lsls	r5, r7
 800742e:	ea4c 0e03 	orr.w	lr, ip, r3
 8007432:	40bc      	lsls	r4, r7
 8007434:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007438:	fa1f fc85 	uxth.w	ip, r5
 800743c:	fbbe f9f8 	udiv	r9, lr, r8
 8007440:	0c22      	lsrs	r2, r4, #16
 8007442:	fb08 e319 	mls	r3, r8, r9, lr
 8007446:	fb09 fa0c 	mul.w	sl, r9, ip
 800744a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800744e:	459a      	cmp	sl, r3
 8007450:	d928      	bls.n	80074a4 <__udivmoddi4+0xa4>
 8007452:	18eb      	adds	r3, r5, r3
 8007454:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8007458:	d204      	bcs.n	8007464 <__udivmoddi4+0x64>
 800745a:	459a      	cmp	sl, r3
 800745c:	d902      	bls.n	8007464 <__udivmoddi4+0x64>
 800745e:	f1a9 0002 	sub.w	r0, r9, #2
 8007462:	442b      	add	r3, r5
 8007464:	eba3 030a 	sub.w	r3, r3, sl
 8007468:	b2a4      	uxth	r4, r4
 800746a:	fbb3 f2f8 	udiv	r2, r3, r8
 800746e:	fb08 3312 	mls	r3, r8, r2, r3
 8007472:	fb02 fc0c 	mul.w	ip, r2, ip
 8007476:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800747a:	45a4      	cmp	ip, r4
 800747c:	d914      	bls.n	80074a8 <__udivmoddi4+0xa8>
 800747e:	192c      	adds	r4, r5, r4
 8007480:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8007484:	d203      	bcs.n	800748e <__udivmoddi4+0x8e>
 8007486:	45a4      	cmp	ip, r4
 8007488:	d901      	bls.n	800748e <__udivmoddi4+0x8e>
 800748a:	1e93      	subs	r3, r2, #2
 800748c:	442c      	add	r4, r5
 800748e:	eba4 040c 	sub.w	r4, r4, ip
 8007492:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007496:	b11e      	cbz	r6, 80074a0 <__udivmoddi4+0xa0>
 8007498:	40fc      	lsrs	r4, r7
 800749a:	2300      	movs	r3, #0
 800749c:	6034      	str	r4, [r6, #0]
 800749e:	6073      	str	r3, [r6, #4]
 80074a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a4:	4648      	mov	r0, r9
 80074a6:	e7dd      	b.n	8007464 <__udivmoddi4+0x64>
 80074a8:	4613      	mov	r3, r2
 80074aa:	e7f0      	b.n	800748e <__udivmoddi4+0x8e>
 80074ac:	b902      	cbnz	r2, 80074b0 <__udivmoddi4+0xb0>
 80074ae:	deff      	udf	#255	; 0xff
 80074b0:	bb8f      	cbnz	r7, 8007516 <__udivmoddi4+0x116>
 80074b2:	eba8 0302 	sub.w	r3, r8, r2
 80074b6:	2101      	movs	r1, #1
 80074b8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80074bc:	b2aa      	uxth	r2, r5
 80074be:	fbb3 fcfe 	udiv	ip, r3, lr
 80074c2:	0c20      	lsrs	r0, r4, #16
 80074c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80074c8:	fb0c f802 	mul.w	r8, ip, r2
 80074cc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80074d0:	4598      	cmp	r8, r3
 80074d2:	d963      	bls.n	800759c <__udivmoddi4+0x19c>
 80074d4:	18eb      	adds	r3, r5, r3
 80074d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80074da:	d204      	bcs.n	80074e6 <__udivmoddi4+0xe6>
 80074dc:	4598      	cmp	r8, r3
 80074de:	d902      	bls.n	80074e6 <__udivmoddi4+0xe6>
 80074e0:	f1ac 0002 	sub.w	r0, ip, #2
 80074e4:	442b      	add	r3, r5
 80074e6:	eba3 0308 	sub.w	r3, r3, r8
 80074ea:	b2a4      	uxth	r4, r4
 80074ec:	fbb3 fcfe 	udiv	ip, r3, lr
 80074f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80074f4:	fb0c f202 	mul.w	r2, ip, r2
 80074f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80074fc:	42a2      	cmp	r2, r4
 80074fe:	d94f      	bls.n	80075a0 <__udivmoddi4+0x1a0>
 8007500:	192c      	adds	r4, r5, r4
 8007502:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8007506:	d204      	bcs.n	8007512 <__udivmoddi4+0x112>
 8007508:	42a2      	cmp	r2, r4
 800750a:	d902      	bls.n	8007512 <__udivmoddi4+0x112>
 800750c:	f1ac 0302 	sub.w	r3, ip, #2
 8007510:	442c      	add	r4, r5
 8007512:	1aa4      	subs	r4, r4, r2
 8007514:	e7bd      	b.n	8007492 <__udivmoddi4+0x92>
 8007516:	f1c7 0c20 	rsb	ip, r7, #32
 800751a:	fa28 f90c 	lsr.w	r9, r8, ip
 800751e:	fa08 f307 	lsl.w	r3, r8, r7
 8007522:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007526:	40bd      	lsls	r5, r7
 8007528:	ea4c 0203 	orr.w	r2, ip, r3
 800752c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007530:	b2ab      	uxth	r3, r5
 8007532:	fbb9 fcfe 	udiv	ip, r9, lr
 8007536:	0c11      	lsrs	r1, r2, #16
 8007538:	fb0e 901c 	mls	r0, lr, ip, r9
 800753c:	fb0c f803 	mul.w	r8, ip, r3
 8007540:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8007544:	4580      	cmp	r8, r0
 8007546:	fa04 f407 	lsl.w	r4, r4, r7
 800754a:	d923      	bls.n	8007594 <__udivmoddi4+0x194>
 800754c:	1828      	adds	r0, r5, r0
 800754e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8007552:	d204      	bcs.n	800755e <__udivmoddi4+0x15e>
 8007554:	4580      	cmp	r8, r0
 8007556:	d902      	bls.n	800755e <__udivmoddi4+0x15e>
 8007558:	f1ac 0102 	sub.w	r1, ip, #2
 800755c:	4428      	add	r0, r5
 800755e:	eba0 0008 	sub.w	r0, r0, r8
 8007562:	b292      	uxth	r2, r2
 8007564:	fbb0 fcfe 	udiv	ip, r0, lr
 8007568:	fb0e 001c 	mls	r0, lr, ip, r0
 800756c:	fb0c f803 	mul.w	r8, ip, r3
 8007570:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8007574:	4598      	cmp	r8, r3
 8007576:	d90f      	bls.n	8007598 <__udivmoddi4+0x198>
 8007578:	18eb      	adds	r3, r5, r3
 800757a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800757e:	d204      	bcs.n	800758a <__udivmoddi4+0x18a>
 8007580:	4598      	cmp	r8, r3
 8007582:	d902      	bls.n	800758a <__udivmoddi4+0x18a>
 8007584:	f1ac 0202 	sub.w	r2, ip, #2
 8007588:	442b      	add	r3, r5
 800758a:	eba3 0308 	sub.w	r3, r3, r8
 800758e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8007592:	e791      	b.n	80074b8 <__udivmoddi4+0xb8>
 8007594:	4661      	mov	r1, ip
 8007596:	e7e2      	b.n	800755e <__udivmoddi4+0x15e>
 8007598:	4662      	mov	r2, ip
 800759a:	e7f6      	b.n	800758a <__udivmoddi4+0x18a>
 800759c:	4660      	mov	r0, ip
 800759e:	e7a2      	b.n	80074e6 <__udivmoddi4+0xe6>
 80075a0:	4663      	mov	r3, ip
 80075a2:	e7b6      	b.n	8007512 <__udivmoddi4+0x112>
 80075a4:	4543      	cmp	r3, r8
 80075a6:	d905      	bls.n	80075b4 <__udivmoddi4+0x1b4>
 80075a8:	b10e      	cbz	r6, 80075ae <__udivmoddi4+0x1ae>
 80075aa:	e9c6 0800 	strd	r0, r8, [r6]
 80075ae:	2100      	movs	r1, #0
 80075b0:	4608      	mov	r0, r1
 80075b2:	e775      	b.n	80074a0 <__udivmoddi4+0xa0>
 80075b4:	fab3 fc83 	clz	ip, r3
 80075b8:	f1bc 0f00 	cmp.w	ip, #0
 80075bc:	d110      	bne.n	80075e0 <__udivmoddi4+0x1e0>
 80075be:	4543      	cmp	r3, r8
 80075c0:	d301      	bcc.n	80075c6 <__udivmoddi4+0x1c6>
 80075c2:	4282      	cmp	r2, r0
 80075c4:	d80a      	bhi.n	80075dc <__udivmoddi4+0x1dc>
 80075c6:	1a84      	subs	r4, r0, r2
 80075c8:	eb68 0303 	sbc.w	r3, r8, r3
 80075cc:	2001      	movs	r0, #1
 80075ce:	469e      	mov	lr, r3
 80075d0:	2e00      	cmp	r6, #0
 80075d2:	d068      	beq.n	80076a6 <__udivmoddi4+0x2a6>
 80075d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80075d8:	2100      	movs	r1, #0
 80075da:	e761      	b.n	80074a0 <__udivmoddi4+0xa0>
 80075dc:	4660      	mov	r0, ip
 80075de:	e7f7      	b.n	80075d0 <__udivmoddi4+0x1d0>
 80075e0:	f1cc 0e20 	rsb	lr, ip, #32
 80075e4:	fa03 f30c 	lsl.w	r3, r3, ip
 80075e8:	fa22 f40e 	lsr.w	r4, r2, lr
 80075ec:	431c      	orrs	r4, r3
 80075ee:	fa20 f10e 	lsr.w	r1, r0, lr
 80075f2:	fa08 f30c 	lsl.w	r3, r8, ip
 80075f6:	fa28 fb0e 	lsr.w	fp, r8, lr
 80075fa:	4319      	orrs	r1, r3
 80075fc:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8007600:	fa02 f50c 	lsl.w	r5, r2, ip
 8007604:	fbbb f8f9 	udiv	r8, fp, r9
 8007608:	b2a3      	uxth	r3, r4
 800760a:	fb09 bb18 	mls	fp, r9, r8, fp
 800760e:	0c0a      	lsrs	r2, r1, #16
 8007610:	fb08 fa03 	mul.w	sl, r8, r3
 8007614:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8007618:	4592      	cmp	sl, r2
 800761a:	fa00 f70c 	lsl.w	r7, r0, ip
 800761e:	d93e      	bls.n	800769e <__udivmoddi4+0x29e>
 8007620:	18a2      	adds	r2, r4, r2
 8007622:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8007626:	d204      	bcs.n	8007632 <__udivmoddi4+0x232>
 8007628:	4592      	cmp	sl, r2
 800762a:	d902      	bls.n	8007632 <__udivmoddi4+0x232>
 800762c:	f1a8 0002 	sub.w	r0, r8, #2
 8007630:	4422      	add	r2, r4
 8007632:	eba2 020a 	sub.w	r2, r2, sl
 8007636:	b289      	uxth	r1, r1
 8007638:	fbb2 f8f9 	udiv	r8, r2, r9
 800763c:	fb09 2218 	mls	r2, r9, r8, r2
 8007640:	fb08 f303 	mul.w	r3, r8, r3
 8007644:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8007648:	4293      	cmp	r3, r2
 800764a:	d92a      	bls.n	80076a2 <__udivmoddi4+0x2a2>
 800764c:	18a2      	adds	r2, r4, r2
 800764e:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8007652:	d204      	bcs.n	800765e <__udivmoddi4+0x25e>
 8007654:	4293      	cmp	r3, r2
 8007656:	d902      	bls.n	800765e <__udivmoddi4+0x25e>
 8007658:	f1a8 0102 	sub.w	r1, r8, #2
 800765c:	4422      	add	r2, r4
 800765e:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8007662:	fba0 9805 	umull	r9, r8, r0, r5
 8007666:	1ad2      	subs	r2, r2, r3
 8007668:	4542      	cmp	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	4641      	mov	r1, r8
 800766e:	d302      	bcc.n	8007676 <__udivmoddi4+0x276>
 8007670:	d106      	bne.n	8007680 <__udivmoddi4+0x280>
 8007672:	454f      	cmp	r7, r9
 8007674:	d204      	bcs.n	8007680 <__udivmoddi4+0x280>
 8007676:	ebb9 0305 	subs.w	r3, r9, r5
 800767a:	eb68 0104 	sbc.w	r1, r8, r4
 800767e:	3801      	subs	r0, #1
 8007680:	b18e      	cbz	r6, 80076a6 <__udivmoddi4+0x2a6>
 8007682:	1afc      	subs	r4, r7, r3
 8007684:	eb62 0701 	sbc.w	r7, r2, r1
 8007688:	fa07 fe0e 	lsl.w	lr, r7, lr
 800768c:	fa24 f30c 	lsr.w	r3, r4, ip
 8007690:	ea4e 0303 	orr.w	r3, lr, r3
 8007694:	fa27 f70c 	lsr.w	r7, r7, ip
 8007698:	e9c6 3700 	strd	r3, r7, [r6]
 800769c:	e79c      	b.n	80075d8 <__udivmoddi4+0x1d8>
 800769e:	4640      	mov	r0, r8
 80076a0:	e7c7      	b.n	8007632 <__udivmoddi4+0x232>
 80076a2:	4641      	mov	r1, r8
 80076a4:	e7db      	b.n	800765e <__udivmoddi4+0x25e>
 80076a6:	4631      	mov	r1, r6
 80076a8:	e6fa      	b.n	80074a0 <__udivmoddi4+0xa0>
	...

080076ac <_init>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr

080076b8 <_fini>:
 80076b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ba:	bf00      	nop
 80076bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076be:	bc08      	pop	{r3}
 80076c0:	469e      	mov	lr, r3
 80076c2:	4770      	bx	lr
